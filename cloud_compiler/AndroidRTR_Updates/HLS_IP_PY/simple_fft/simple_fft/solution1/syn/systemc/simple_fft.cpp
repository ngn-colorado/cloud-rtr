// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "simple_fft.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic simple_fft::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> simple_fft::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic simple_fft::ap_const_logic_1 = sc_dt::Log_1;
const bool simple_fft::ap_true = true;

simple_fft::simple_fft(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fft_config1_U0 = new fft_config1_s("fft_config1_U0");
    fft_config1_U0->ap_clk(ap_clk);
    fft_config1_U0->ap_rst(ap_rst);
    fft_config1_U0->ap_start(fft_config1_U0_ap_start);
    fft_config1_U0->ap_ce(fft_config1_U0_ap_ce);
    fft_config1_U0->ap_done(fft_config1_U0_ap_done);
    fft_config1_U0->ap_idle(fft_config1_U0_ap_idle);
    fft_config1_U0->ap_ready(fft_config1_U0_ap_ready);
    fft_config1_U0->xn_dout(fft_config1_U0_xn_dout);
    fft_config1_U0->xn_empty_n(fft_config1_U0_xn_empty_n);
    fft_config1_U0->xn_read(fft_config1_U0_xn_read);
    fft_config1_U0->xk_din(fft_config1_U0_xk_din);
    fft_config1_U0->xk_full_n(fft_config1_U0_xk_full_n);
    fft_config1_U0->xk_write(fft_config1_U0_xk_write);
    fft_config1_U0->status_data_V_din(fft_config1_U0_status_data_V_din);
    fft_config1_U0->status_data_V_full_n(fft_config1_U0_status_data_V_full_n);
    fft_config1_U0->status_data_V_write(fft_config1_U0_status_data_V_write);
    fft_config1_U0->config_ch_data_V_dout(fft_config1_U0_config_ch_data_V_dout);
    fft_config1_U0->config_ch_data_V_empty_n(fft_config1_U0_config_ch_data_V_empty_n);
    fft_config1_U0->config_ch_data_V_read(fft_config1_U0_config_ch_data_V_read);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_hs_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( fft_config1_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_top_allready );

    SC_METHOD(thread_ap_sig_hs_continue);

    SC_METHOD(thread_ap_sig_hs_done);
    sensitive << ( fft_config1_U0_ap_done );
    sensitive << ( ap_reg_procdone_fft_config1_U0 );

    SC_METHOD(thread_ap_sig_top_allready);
    sensitive << ( fft_config1_U0_ap_ready );

    SC_METHOD(thread_fft_config1_U0_ap_ce);

    SC_METHOD(thread_fft_config1_U0_ap_continue);
    sensitive << ( ap_sig_hs_continue );

    SC_METHOD(thread_fft_config1_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_fft_config1_U0_xk_full_n);
    sensitive << ( out_r_full_n );

    SC_METHOD(thread_fft_config1_U0_xn_dout);
    sensitive << ( in_r_dout );

    SC_METHOD(thread_fft_config1_U0_xn_empty_n);
    sensitive << ( in_r_empty_n );

    SC_METHOD(thread_in_r_read);
    sensitive << ( fft_config1_U0_xn_read );

    SC_METHOD(thread_out_r_din);
    sensitive << ( fft_config1_U0_xk_din );

    SC_METHOD(thread_out_r_write);
    sensitive << ( fft_config1_U0_xk_write );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_reg_procdone_fft_config1_U0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "simple_fft_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, in_r_dout, "(port)in_r_dout");
    sc_trace(mVcdFile, in_r_empty_n, "(port)in_r_empty_n");
    sc_trace(mVcdFile, in_r_read, "(port)in_r_read");
    sc_trace(mVcdFile, out_r_din, "(port)out_r_din");
    sc_trace(mVcdFile, out_r_full_n, "(port)out_r_full_n");
    sc_trace(mVcdFile, out_r_write, "(port)out_r_write");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, fft_config1_U0_ap_start, "fft_config1_U0_ap_start");
    sc_trace(mVcdFile, fft_config1_U0_ap_ce, "fft_config1_U0_ap_ce");
    sc_trace(mVcdFile, fft_config1_U0_ap_done, "fft_config1_U0_ap_done");
    sc_trace(mVcdFile, fft_config1_U0_ap_idle, "fft_config1_U0_ap_idle");
    sc_trace(mVcdFile, fft_config1_U0_ap_ready, "fft_config1_U0_ap_ready");
    sc_trace(mVcdFile, fft_config1_U0_xn_dout, "fft_config1_U0_xn_dout");
    sc_trace(mVcdFile, fft_config1_U0_xn_empty_n, "fft_config1_U0_xn_empty_n");
    sc_trace(mVcdFile, fft_config1_U0_xn_read, "fft_config1_U0_xn_read");
    sc_trace(mVcdFile, fft_config1_U0_xk_din, "fft_config1_U0_xk_din");
    sc_trace(mVcdFile, fft_config1_U0_xk_full_n, "fft_config1_U0_xk_full_n");
    sc_trace(mVcdFile, fft_config1_U0_xk_write, "fft_config1_U0_xk_write");
    sc_trace(mVcdFile, fft_config1_U0_status_data_V_din, "fft_config1_U0_status_data_V_din");
    sc_trace(mVcdFile, fft_config1_U0_status_data_V_full_n, "fft_config1_U0_status_data_V_full_n");
    sc_trace(mVcdFile, fft_config1_U0_status_data_V_write, "fft_config1_U0_status_data_V_write");
    sc_trace(mVcdFile, fft_config1_U0_config_ch_data_V_dout, "fft_config1_U0_config_ch_data_V_dout");
    sc_trace(mVcdFile, fft_config1_U0_config_ch_data_V_empty_n, "fft_config1_U0_config_ch_data_V_empty_n");
    sc_trace(mVcdFile, fft_config1_U0_config_ch_data_V_read, "fft_config1_U0_config_ch_data_V_read");
    sc_trace(mVcdFile, fft_config1_U0_ap_continue, "fft_config1_U0_ap_continue");
    sc_trace(mVcdFile, ap_sig_hs_continue, "ap_sig_hs_continue");
    sc_trace(mVcdFile, ap_reg_procdone_fft_config1_U0, "ap_reg_procdone_fft_config1_U0");
    sc_trace(mVcdFile, ap_sig_hs_done, "ap_sig_hs_done");
    sc_trace(mVcdFile, ap_CS, "ap_CS");
    sc_trace(mVcdFile, ap_sig_top_allready, "ap_sig_top_allready");
#endif

    }
    mHdltvinHandle.open("simple_fft.hdltvin.dat");
    mHdltvoutHandle.open("simple_fft.hdltvout.dat");
}

simple_fft::~simple_fft() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete fft_config1_U0;
}

void simple_fft::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_procdone_fft_config1_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_fft_config1_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(fft_config1_U0_ap_done.read(), ap_const_logic_1)) {
            ap_reg_procdone_fft_config1_U0 = ap_const_logic_1;
        }
    }
}

void simple_fft::thread_ap_done() {
    ap_done = ap_sig_hs_done.read();
}

void simple_fft::thread_ap_idle() {
    if (esl_seteq<1,1,1>(fft_config1_U0_ap_idle.read(), ap_const_logic_1)) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void simple_fft::thread_ap_ready() {
    ap_ready = ap_sig_top_allready.read();
}

void simple_fft::thread_ap_sig_hs_continue() {
    ap_sig_hs_continue = ap_const_logic_1;
}

void simple_fft::thread_ap_sig_hs_done() {
    if ((esl_seteq<1,1,1>(fft_config1_U0_ap_done.read(), ap_const_logic_1) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_procdone_fft_config1_U0.read()))) {
        ap_sig_hs_done = ap_const_logic_1;
    } else {
        ap_sig_hs_done = ap_const_logic_0;
    }
}

void simple_fft::thread_ap_sig_top_allready() {
    ap_sig_top_allready = fft_config1_U0_ap_ready.read();
}

void simple_fft::thread_fft_config1_U0_ap_ce() {
    fft_config1_U0_ap_ce = ap_const_logic_1;
}

void simple_fft::thread_fft_config1_U0_ap_continue() {
    fft_config1_U0_ap_continue = ap_sig_hs_continue.read();
}

void simple_fft::thread_fft_config1_U0_ap_start() {
    if ( ap_rst.read() == ap_const_logic_1) {
        fft_config1_U0_ap_start = ap_const_logic_0;
    } else {
        fft_config1_U0_ap_start = ap_start.read();
    }
}

void simple_fft::thread_fft_config1_U0_xk_full_n() {
    fft_config1_U0_xk_full_n = out_r_full_n.read();
}

void simple_fft::thread_fft_config1_U0_xn_dout() {
    fft_config1_U0_xn_dout = in_r_dout.read();
}

void simple_fft::thread_fft_config1_U0_xn_empty_n() {
    fft_config1_U0_xn_empty_n = in_r_empty_n.read();
}

void simple_fft::thread_in_r_read() {
    in_r_read = fft_config1_U0_xn_read.read();
}

void simple_fft::thread_out_r_din() {
    out_r_din = fft_config1_U0_xk_din.read();
}

void simple_fft::thread_out_r_write() {
    out_r_write = fft_config1_U0_xk_write.read();
}

void simple_fft::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"in_r_dout\" :  \"" << in_r_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_empty_n\" :  \"" << in_r_empty_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_r_read\" :  \"" << in_r_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_din\" :  \"" << out_r_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_r_full_n\" :  \"" << out_r_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_write\" :  \"" << out_r_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

