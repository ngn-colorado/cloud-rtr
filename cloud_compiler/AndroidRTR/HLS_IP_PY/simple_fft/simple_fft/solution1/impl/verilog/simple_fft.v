// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="simple_fft,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=3195,HLS_SYN_TPT=3196,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module simple_fft (
        in_r_dout,
        in_r_empty_n,
        in_r_read,
        out_r_din,
        out_r_full_n,
        out_r_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_start,
        ap_idle,
        ap_ready
);

parameter    ap_const_logic_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_true = 1'b1;

input  [31:0] in_r_dout;
input   in_r_empty_n;
output   in_r_read;
output  [31:0] out_r_din;
input   out_r_full_n;
output   out_r_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
input   ap_start;
output   ap_idle;
output   ap_ready;

reg ap_idle;
wire    fft_config1_U0_ap_start;
wire    fft_config1_U0_ap_ce;
wire    fft_config1_U0_ap_done;
wire    fft_config1_U0_ap_idle;
wire    fft_config1_U0_ap_ready;
wire   [31:0] fft_config1_U0_xn_dout;
wire    fft_config1_U0_xn_empty_n;
wire    fft_config1_U0_xn_read;
wire   [31:0] fft_config1_U0_xk_din;
wire    fft_config1_U0_xk_full_n;
wire    fft_config1_U0_xk_write;
wire   [7:0] fft_config1_U0_status_data_V_din;
wire    fft_config1_U0_status_data_V_full_n;
wire    fft_config1_U0_status_data_V_write;
wire   [15:0] fft_config1_U0_config_ch_data_V_dout;
wire    fft_config1_U0_config_ch_data_V_empty_n;
wire    fft_config1_U0_config_ch_data_V_read;
wire    fft_config1_U0_ap_continue;
wire    ap_sig_hs_continue;
reg    ap_reg_procdone_fft_config1_U0 = 1'b0;
reg    ap_sig_hs_done;
wire    ap_CS;
wire    ap_sig_top_allready;


fft_config1_s fft_config1_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( fft_config1_U0_ap_start ),
    .ap_ce( fft_config1_U0_ap_ce ),
    .ap_done( fft_config1_U0_ap_done ),
    .ap_idle( fft_config1_U0_ap_idle ),
    .ap_ready( fft_config1_U0_ap_ready ),
    .xn_dout( fft_config1_U0_xn_dout ),
    .xn_empty_n( fft_config1_U0_xn_empty_n ),
    .xn_read( fft_config1_U0_xn_read ),
    .xk_din( fft_config1_U0_xk_din ),
    .xk_full_n( fft_config1_U0_xk_full_n ),
    .xk_write( fft_config1_U0_xk_write ),
    .status_data_V_din( fft_config1_U0_status_data_V_din ),
    .status_data_V_full_n( fft_config1_U0_status_data_V_full_n ),
    .status_data_V_write( fft_config1_U0_status_data_V_write ),
    .config_ch_data_V_dout( fft_config1_U0_config_ch_data_V_dout ),
    .config_ch_data_V_empty_n( fft_config1_U0_config_ch_data_V_empty_n ),
    .config_ch_data_V_read( fft_config1_U0_config_ch_data_V_read )
);



/// ap_reg_procdone_fft_config1_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_fft_config1_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_fft_config1_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_fft_config1_U0 <= ap_const_logic_0;
        end else if ((fft_config1_U0_ap_done == ap_const_logic_1)) begin
            ap_reg_procdone_fft_config1_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_idle assign process. ///
always @ (fft_config1_U0_ap_idle)
begin
    if ((fft_config1_U0_ap_idle == ap_const_logic_1)) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_sig_hs_done assign process. ///
always @ (fft_config1_U0_ap_done or ap_reg_procdone_fft_config1_U0)
begin
    if (((fft_config1_U0_ap_done == ap_const_logic_1) | (ap_const_logic_1 == ap_reg_procdone_fft_config1_U0))) begin
        ap_sig_hs_done = ap_const_logic_1;
    end else begin
        ap_sig_hs_done = ap_const_logic_0;
    end
end
assign ap_done = ap_sig_hs_done;
assign ap_ready = ap_sig_top_allready;
assign ap_sig_hs_continue = ap_const_logic_1;
assign ap_sig_top_allready = fft_config1_U0_ap_ready;
assign fft_config1_U0_ap_ce = ap_const_logic_1;
assign fft_config1_U0_ap_continue = ap_sig_hs_continue;
assign fft_config1_U0_ap_start = ap_start;
assign fft_config1_U0_xk_full_n = out_r_full_n;
assign fft_config1_U0_xn_dout = in_r_dout;
assign fft_config1_U0_xn_empty_n = in_r_empty_n;
assign in_r_read = fft_config1_U0_xn_read;
assign out_r_din = fft_config1_U0_xk_din;
assign out_r_write = fft_config1_U0_xk_write;


endmodule //simple_fft

