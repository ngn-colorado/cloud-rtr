// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _simple_fft_HH_
#define _simple_fft_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fft_config1_s.h"

namespace ap_rtl {

struct simple_fft : public sc_module {
    // Port declarations 12
    sc_in< sc_lv<32> > in_r_dout;
    sc_in< sc_logic > in_r_empty_n;
    sc_out< sc_logic > in_r_read;
    sc_out< sc_lv<32> > out_r_din;
    sc_in< sc_logic > out_r_full_n;
    sc_out< sc_logic > out_r_write;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;


    // Module declarations
    simple_fft(sc_module_name name);
    SC_HAS_PROCESS(simple_fft);

    ~simple_fft();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fft_config1_s* fft_config1_U0;
    sc_signal< sc_logic > fft_config1_U0_ap_start;
    sc_signal< sc_logic > fft_config1_U0_ap_ce;
    sc_signal< sc_logic > fft_config1_U0_ap_done;
    sc_signal< sc_logic > fft_config1_U0_ap_idle;
    sc_signal< sc_logic > fft_config1_U0_ap_ready;
    sc_signal< sc_lv<32> > fft_config1_U0_xn_dout;
    sc_signal< sc_logic > fft_config1_U0_xn_empty_n;
    sc_signal< sc_logic > fft_config1_U0_xn_read;
    sc_signal< sc_lv<32> > fft_config1_U0_xk_din;
    sc_signal< sc_logic > fft_config1_U0_xk_full_n;
    sc_signal< sc_logic > fft_config1_U0_xk_write;
    sc_signal< sc_lv<8> > fft_config1_U0_status_data_V_din;
    sc_signal< sc_logic > fft_config1_U0_status_data_V_full_n;
    sc_signal< sc_logic > fft_config1_U0_status_data_V_write;
    sc_signal< sc_lv<16> > fft_config1_U0_config_ch_data_V_dout;
    sc_signal< sc_logic > fft_config1_U0_config_ch_data_V_empty_n;
    sc_signal< sc_logic > fft_config1_U0_config_ch_data_V_read;
    sc_signal< sc_logic > fft_config1_U0_ap_continue;
    sc_signal< sc_logic > ap_sig_hs_continue;
    sc_signal< sc_logic > ap_reg_procdone_fft_config1_U0;
    sc_signal< sc_logic > ap_sig_hs_done;
    sc_signal< sc_logic > ap_CS;
    sc_signal< sc_logic > ap_sig_top_allready;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_1;
    static const bool ap_true;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_hs_continue();
    void thread_ap_sig_hs_done();
    void thread_ap_sig_top_allready();
    void thread_fft_config1_U0_ap_ce();
    void thread_fft_config1_U0_ap_continue();
    void thread_fft_config1_U0_ap_start();
    void thread_fft_config1_U0_xk_full_n();
    void thread_fft_config1_U0_xn_dout();
    void thread_fft_config1_U0_xn_empty_n();
    void thread_in_r_read();
    void thread_out_r_din();
    void thread_out_r_write();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
