// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "reset_axi.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic reset_axi::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic reset_axi::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> reset_axi::ap_const_lv32_1 = "1";

reset_axi::reset_axi(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_reset_out);
    sensitive << ( ap_start );
    sensitive << ( in_reset );

    SC_METHOD(thread_reset_out_ap_vld);
    sensitive << ( ap_start );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "reset_axi_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_reset, "(port)in_reset");
    sc_trace(mVcdFile, reset_out, "(port)reset_out");
    sc_trace(mVcdFile, reset_out_ap_vld, "(port)reset_out_ap_vld");
#endif

    }
    mHdltvinHandle.open("reset_axi.hdltvin.dat");
    mHdltvoutHandle.open("reset_axi.hdltvout.dat");
}

reset_axi::~reset_axi() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void reset_axi::thread_ap_done() {
    ap_done = ap_start.read();
}

void reset_axi::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void reset_axi::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void reset_axi::thread_reset_out() {
    reset_out =  (sc_logic) ((!in_reset.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<1>(): (sc_bigint<32>(in_reset.read()) < sc_bigint<32>(ap_const_lv32_1)))[0];
}

void reset_axi::thread_reset_out_ap_vld() {
    if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
        reset_out_ap_vld = ap_const_logic_1;
    } else {
        reset_out_ap_vld = ap_const_logic_0;
    }
}

void reset_axi::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_reset\" :  \"" << in_reset.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"reset_out\" :  \"" << reset_out.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"reset_out_ap_vld\" :  \"" << reset_out_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

