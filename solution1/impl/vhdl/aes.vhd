-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ddr_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    ddr_ce0 : OUT STD_LOGIC;
    ddr_we0 : OUT STD_LOGIC;
    ddr_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ddr_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of aes is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.870000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_ready : STD_LOGIC;
    signal sourceAddress : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddress_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddress_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sourceAddress_ap_vld : STD_LOGIC;
    signal sourceAddress_ap_vld_in_sig : STD_LOGIC;
    signal sourceAddress_ap_vld_preg : STD_LOGIC := '0';
    signal key_in_V : STD_LOGIC_VECTOR (127 downto 0);
    signal key_in_V_in_sig : STD_LOGIC_VECTOR (127 downto 0);
    signal key_in_V_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal key_in_V_ap_vld : STD_LOGIC;
    signal key_in_V_ap_vld_in_sig : STD_LOGIC;
    signal key_in_V_ap_vld_preg : STD_LOGIC := '0';
    signal destinationAddress : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal destinationAddress_ap_vld : STD_LOGIC;
    signal destinationAddress_ap_vld_in_sig : STD_LOGIC;
    signal destinationAddress_ap_vld_preg : STD_LOGIC := '0';
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal length_r_ap_vld : STD_LOGIC;
    signal length_r_ap_vld_in_sig : STD_LOGIC;
    signal length_r_ap_vld_preg : STD_LOGIC := '0';
    signal ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_135 : BOOLEAN;
    signal iterations_1_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal iterations_1_reg_587 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_362_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_595 : STD_LOGIC_VECTOR (4 downto 0);
    signal ddr_addr_reg_600 : STD_LOGIC_VECTOR (21 downto 0);
    signal exitcond3_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_391_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_28_reg_605 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_fu_407_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_613 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_assign_fu_413_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_assign_reg_618 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond4_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_2_fu_445_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal mask_2_fu_463_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aestest_fu_278_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal encrypted_data_V_reg_633 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_2_fu_477_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sourceAddressLocal_1_fu_540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal destinationAddressLocal_1_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aestest_fu_278_ap_rst : STD_LOGIC;
    signal grp_aestest_fu_278_ap_start : STD_LOGIC;
    signal grp_aestest_fu_278_ap_done : STD_LOGIC;
    signal grp_aestest_fu_278_ap_idle : STD_LOGIC;
    signal grp_aestest_fu_278_ap_ready : STD_LOGIC;
    signal grp_aestest_fu_278_ap_ce : STD_LOGIC;
    signal grp_aestest_fu_278_inptext_V_read : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aestest_fu_278_key_V_read : STD_LOGIC_VECTOR (127 downto 0);
    signal iterations_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddressLocal1_reg_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddressLocal1_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_reg_208 : STD_LOGIC_VECTOR (127 downto 0);
    signal exitcond8_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_220 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_1_reg_231 : STD_LOGIC_VECTOR (127 downto 0);
    signal j_reg_243 : STD_LOGIC_VECTOR (3 downto 0);
    signal mask_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_266 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aestest_fu_278_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sourceAddress_assign_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_assign_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast5_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_368_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_379_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_27_fu_383_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_cast3_fu_397_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_32_fu_418_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_assign_cast_fu_430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_433_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal mask_1_fu_453_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_325_fu_483_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_29_fu_487_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal Hi_assign_fu_495_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal Lo_assign_fu_505_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal Lo_assign_cast_fu_511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hi_assign_cast_fu_501_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_515_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_1_cast2_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);

    component aestest IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        inptext_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        key_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component aes_AXILiteS_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (0 downto 0);
        sourceAddress : OUT STD_LOGIC_VECTOR (31 downto 0);
        sourceAddress_ap_vld : OUT STD_LOGIC;
        key_in_V : OUT STD_LOGIC_VECTOR (127 downto 0);
        key_in_V_ap_vld : OUT STD_LOGIC;
        destinationAddress : OUT STD_LOGIC_VECTOR (31 downto 0);
        destinationAddress_ap_vld : OUT STD_LOGIC;
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        length_r_ap_vld : OUT STD_LOGIC );
    end component;



begin
    aes_AXILiteS_s_axi_U : component aes_AXILiteS_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        sourceAddress => sourceAddress,
        sourceAddress_ap_vld => sourceAddress_ap_vld,
        key_in_V => key_in_V,
        key_in_V_ap_vld => key_in_V_ap_vld,
        destinationAddress => destinationAddress,
        destinationAddress_ap_vld => destinationAddress_ap_vld,
        length_r => length_r,
        length_r_ap_vld => length_r_ap_vld);

    grp_aestest_fu_278 : component aestest
    port map (
        ap_clk => ap_clk,
        ap_rst => grp_aestest_fu_278_ap_rst,
        ap_start => grp_aestest_fu_278_ap_start,
        ap_done => grp_aestest_fu_278_ap_done,
        ap_idle => grp_aestest_fu_278_ap_idle,
        ap_ready => grp_aestest_fu_278_ap_ready,
        ap_ce => grp_aestest_fu_278_ap_ce,
        inptext_V_read => grp_aestest_fu_278_inptext_V_read,
        key_V_read => grp_aestest_fu_278_key_V_read,
        ap_return => grp_aestest_fu_278_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- destinationAddress_ap_vld_preg assign process. --
    destinationAddress_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                destinationAddress_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_341_p2)))) then 
                    destinationAddress_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = destinationAddress_ap_vld))) then 
                    destinationAddress_ap_vld_preg <= destinationAddress_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- destinationAddress_preg assign process. --
    destinationAddress_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                destinationAddress_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = destinationAddress_ap_vld))) then 
                    destinationAddress_preg <= destinationAddress;
                end if; 
            end if;
        end if;
    end process;


    -- grp_aestest_fu_278_ap_start_ap_start_reg assign process. --
    grp_aestest_fu_278_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                grp_aestest_fu_278_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_ST_st7_fsm_6 = ap_NS_fsm))) then 
                    grp_aestest_fu_278_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aestest_fu_278_ap_ready)) then 
                    grp_aestest_fu_278_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- key_in_V_ap_vld_preg assign process. --
    key_in_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                key_in_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_341_p2)))) then 
                    key_in_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = key_in_V_ap_vld))) then 
                    key_in_V_ap_vld_preg <= key_in_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- key_in_V_preg assign process. --
    key_in_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                key_in_V_preg <= ap_const_lv128_lc_1;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = key_in_V_ap_vld))) then 
                    key_in_V_preg <= key_in_V;
                end if; 
            end if;
        end if;
    end process;


    -- length_r_ap_vld_preg assign process. --
    length_r_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                length_r_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_341_p2)))) then 
                    length_r_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = length_r_ap_vld))) then 
                    length_r_ap_vld_preg <= length_r_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- length_r_preg assign process. --
    length_r_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                length_r_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = length_r_ap_vld))) then 
                    length_r_preg <= length_r;
                end if; 
            end if;
        end if;
    end process;


    -- sourceAddress_ap_vld_preg assign process. --
    sourceAddress_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                sourceAddress_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_341_p2)))) then 
                    sourceAddress_ap_vld_preg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = sourceAddress_ap_vld) and not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))))) then 
                    sourceAddress_ap_vld_preg <= sourceAddress_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- sourceAddress_preg assign process. --
    sourceAddress_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                sourceAddress_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = sourceAddress_ap_vld) and not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))))) then 
                    sourceAddress_preg <= sourceAddress;
                end if; 
            end if;
        end if;
    end process;


    -- data_V_reg_208 assign process. --
    data_V_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_401_p2)))) then 
                data_V_reg_208 <= p_Val2_1_reg_231;
            elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_341_p2))) then 
                data_V_reg_208 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    -- destinationAddressLocal1_reg_198 assign process. --
    destinationAddressLocal1_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st27_fsm_26 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_471_p2)))) then 
                destinationAddressLocal1_reg_198 <= destinationAddressLocal_1_fu_546_p2;
            elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                destinationAddressLocal1_reg_198 <= destinationAddress_assign_fu_130;
            end if; 
        end if;
    end process;

    -- i_1_reg_266 assign process. --
    i_1_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st27_fsm_26 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_471_p2))) then 
                i_1_reg_266 <= i_2_fu_477_p2;
            elsif ((ap_ST_st26_fsm_25 = ap_CS_fsm)) then 
                i_1_reg_266 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- i_reg_220 assign process. --
    i_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_401_p2)))) then 
                i_reg_220 <= i_3_reg_595;
            elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_341_p2))) then 
                i_reg_220 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- iterations_reg_177 assign process. --
    iterations_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st27_fsm_26 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_471_p2)))) then 
                iterations_reg_177 <= iterations_1_reg_587;
            elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                iterations_reg_177 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- j_reg_243 assign process. --
    j_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                j_reg_243 <= j_1_reg_613;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (exitcond3_fu_356_p2 = ap_const_lv1_0))) then 
                j_reg_243 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- mask_reg_254 assign process. --
    mask_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                mask_reg_254 <= mask_2_fu_463_p1;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (exitcond3_fu_356_p2 = ap_const_lv1_0))) then 
                mask_reg_254 <= ap_const_lv8_80;
            end if; 
        end if;
    end process;

    -- p_Val2_1_reg_231 assign process. --
    p_Val2_1_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                p_Val2_1_reg_231 <= data_V_2_fu_445_p3;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (exitcond3_fu_356_p2 = ap_const_lv1_0))) then 
                p_Val2_1_reg_231 <= data_V_reg_208;
            end if; 
        end if;
    end process;

    -- sourceAddressLocal1_reg_188 assign process. --
    sourceAddressLocal1_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st27_fsm_26 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_471_p2)))) then 
                sourceAddressLocal1_reg_188 <= sourceAddressLocal_1_fu_540_p2;
            elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                sourceAddressLocal1_reg_188 <= sourceAddress_assign_fu_126;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (exitcond3_fu_356_p2 = ap_const_lv1_0))) then
                ddr_addr_reg_600 <= tmp_26_fu_374_p1(22 - 1 downto 0);
                tmp_28_reg_605 <= tmp_28_fu_391_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_135))) then
                destinationAddress_assign_fu_130 <= destinationAddress_in_sig;
                sourceAddress_assign_fu_126 <= sourceAddress_in_sig;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st26_fsm_25 = ap_CS_fsm)) then
                encrypted_data_V_reg_633 <= grp_aestest_fu_278_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                i_3_reg_595 <= i_3_fu_362_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_401_p2))) then
                i_assign_reg_618 <= i_assign_fu_413_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                iterations_1_reg_587 <= iterations_1_fu_346_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then
                j_1_reg_613 <= j_1_fu_407_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , ap_sig_bdd_135 , exitcond3_fu_356_p2 , exitcond4_fu_401_p2 , exitcond_fu_471_p2 , exitcond8_fu_341_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_135)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond8_fu_341_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((exitcond3_fu_356_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = exitcond4_fu_401_p2)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                if (not((ap_const_lv1_0 = exitcond_fu_471_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    Hi_assign_cast_fu_501_p1 <= std_logic_vector(resize(unsigned(Hi_assign_fu_495_p2),32));
    Hi_assign_fu_495_p2 <= (tmp_29_fu_487_p3 xor ap_const_lv7_7F);
    Lo_assign_cast_fu_511_p1 <= std_logic_vector(resize(unsigned(Lo_assign_fu_505_p2),32));
    Lo_assign_fu_505_p2 <= std_logic_vector(unsigned(ap_const_lv7_78) - unsigned(tmp_29_fu_487_p3));

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, exitcond8_fu_341_p2)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_341_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond8_fu_341_p2)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_341_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv1_1;

    -- ap_sig_bdd_135 assign process. --
    ap_sig_bdd_135_assign_proc : process(ap_start, sourceAddress_ap_vld_in_sig, key_in_V_ap_vld_in_sig, destinationAddress_ap_vld_in_sig, length_r_ap_vld_in_sig)
    begin
                ap_sig_bdd_135 <= ((length_r_ap_vld_in_sig = ap_const_logic_0) or (destinationAddress_ap_vld_in_sig = ap_const_logic_0) or (sourceAddress_ap_vld_in_sig = ap_const_logic_0) or (key_in_V_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

    data_V_2_fu_445_p3 <= 
        p_Val2_1_reg_231 when (tmp_33_fu_424_p2(0) = '1') else 
        p_Result_2_fu_433_p5;

    -- ddr_address0 assign process. --
    ddr_address0_assign_proc : process(ap_CS_fsm, ddr_addr_reg_600, tmp_31_fu_535_p1)
    begin
        if ((ap_ST_st27_fsm_26 = ap_CS_fsm)) then 
            ddr_address0 <= tmp_31_fu_535_p1(22 - 1 downto 0);
        elsif ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            ddr_address0 <= ddr_addr_reg_600;
        else 
            ddr_address0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- ddr_ce0 assign process. --
    ddr_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) or (ap_ST_st27_fsm_26 = ap_CS_fsm))) then 
            ddr_ce0 <= ap_const_logic_1;
        else 
            ddr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ddr_d0 <= p_Result_s_fu_515_p4(8 - 1 downto 0);

    -- ddr_we0 assign process. --
    ddr_we0_assign_proc : process(ap_CS_fsm, exitcond_fu_471_p2)
    begin
        if ((((ap_ST_st27_fsm_26 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_471_p2)))) then 
            ddr_we0 <= ap_const_logic_1;
        else 
            ddr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    destinationAddressLocal_1_fu_546_p2 <= std_logic_vector(unsigned(destinationAddressLocal1_reg_198) + unsigned(ap_const_lv32_10));

    -- destinationAddress_ap_vld_in_sig assign process. --
    destinationAddress_ap_vld_in_sig_assign_proc : process(destinationAddress_ap_vld, destinationAddress_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = destinationAddress_ap_vld)) then 
            destinationAddress_ap_vld_in_sig <= destinationAddress_ap_vld;
        else 
            destinationAddress_ap_vld_in_sig <= destinationAddress_ap_vld_preg;
        end if; 
    end process;


    -- destinationAddress_in_sig assign process. --
    destinationAddress_in_sig_assign_proc : process(destinationAddress, destinationAddress_preg, destinationAddress_ap_vld)
    begin
        if ((ap_const_logic_1 = destinationAddress_ap_vld)) then 
            destinationAddress_in_sig <= destinationAddress;
        else 
            destinationAddress_in_sig <= destinationAddress_preg;
        end if; 
    end process;

    exitcond3_fu_356_p2 <= "1" when (i_reg_220 = ap_const_lv5_10) else "0";
    exitcond4_fu_401_p2 <= "1" when (j_reg_243 = ap_const_lv4_8) else "0";
    exitcond8_fu_341_p2 <= "1" when (iterations_reg_177 = length_r_in_sig) else "0";
    exitcond_fu_471_p2 <= "1" when (i_1_reg_266 = ap_const_lv5_10) else "0";
    grp_aestest_fu_278_ap_ce <= ap_const_logic_1;

    -- grp_aestest_fu_278_ap_rst assign process. --
    grp_aestest_fu_278_ap_rst_assign_proc : process(ap_rst_n)
    begin
                grp_aestest_fu_278_ap_rst <= not(ap_rst_n);
    end process;

    grp_aestest_fu_278_ap_start <= grp_aestest_fu_278_ap_start_ap_start_reg;
    grp_aestest_fu_278_inptext_V_read <= data_V_reg_208;
    grp_aestest_fu_278_key_V_read <= key_in_V_in_sig;
    i_1_cast2_fu_467_p1 <= std_logic_vector(resize(unsigned(i_1_reg_266),32));
    i_2_fu_477_p2 <= std_logic_vector(unsigned(i_1_reg_266) + unsigned(ap_const_lv5_1));
    i_3_fu_362_p2 <= std_logic_vector(unsigned(i_reg_220) + unsigned(ap_const_lv5_1));
    i_assign_cast_fu_430_p1 <= std_logic_vector(resize(unsigned(i_assign_reg_618),32));
    i_assign_fu_413_p2 <= std_logic_vector(unsigned(tmp_28_reg_605) - unsigned(j_cast3_fu_397_p1));
    i_cast5_fu_352_p1 <= std_logic_vector(resize(unsigned(i_reg_220),32));
    iterations_1_fu_346_p2 <= std_logic_vector(unsigned(iterations_reg_177) + unsigned(ap_const_lv32_1));
    j_1_fu_407_p2 <= std_logic_vector(unsigned(j_reg_243) + unsigned(ap_const_lv4_1));
    j_cast3_fu_397_p1 <= std_logic_vector(resize(unsigned(j_reg_243),7));

    -- key_in_V_ap_vld_in_sig assign process. --
    key_in_V_ap_vld_in_sig_assign_proc : process(key_in_V_ap_vld, key_in_V_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = key_in_V_ap_vld)) then 
            key_in_V_ap_vld_in_sig <= key_in_V_ap_vld;
        else 
            key_in_V_ap_vld_in_sig <= key_in_V_ap_vld_preg;
        end if; 
    end process;


    -- key_in_V_in_sig assign process. --
    key_in_V_in_sig_assign_proc : process(key_in_V, key_in_V_preg, key_in_V_ap_vld)
    begin
        if ((ap_const_logic_1 = key_in_V_ap_vld)) then 
            key_in_V_in_sig <= key_in_V;
        else 
            key_in_V_in_sig <= key_in_V_preg;
        end if; 
    end process;


    -- length_r_ap_vld_in_sig assign process. --
    length_r_ap_vld_in_sig_assign_proc : process(length_r_ap_vld, length_r_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = length_r_ap_vld)) then 
            length_r_ap_vld_in_sig <= length_r_ap_vld;
        else 
            length_r_ap_vld_in_sig <= length_r_ap_vld_preg;
        end if; 
    end process;


    -- length_r_in_sig assign process. --
    length_r_in_sig_assign_proc : process(length_r, length_r_preg, length_r_ap_vld)
    begin
        if ((ap_const_logic_1 = length_r_ap_vld)) then 
            length_r_in_sig <= length_r;
        else 
            length_r_in_sig <= length_r_preg;
        end if; 
    end process;

    mask_1_fu_453_p4 <= mask_reg_254(7 downto 1);
    mask_2_fu_463_p1 <= std_logic_vector(resize(unsigned(mask_1_fu_453_p4),8));
    
    p_Result_2_fu_433_p5_proc : process(p_Val2_1_reg_231, i_assign_cast_fu_430_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32-1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32-1 downto 0);
    variable v1_shift : STD_LOGIC_VECTOR(128-1 downto 0);
    variable tmp : STD_LOGIC_VECTOR(128-1 downto 0);
    variable v1_reverse : boolean;
    variable v1_cpy : STD_LOGIC_VECTOR(128+32-1 downto 0);
    variable p_Result_2_fu_433_p5_i : integer;
    variable tmp_v1, tmp_mask_low, tmp_mask_hi : STD_LOGIC_VECTOR(128-1 downto 0);
    variable res_v1, res_mask, res_mask_low, res_mask_hi : STD_LOGIC_VECTOR(128- 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7-1 downto 0) := i_assign_cast_fu_430_p1(7-1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7-1 downto 0) := i_assign_cast_fu_430_p1(7-1 downto 0);
        v1_shift := (others => '0');
        v1_shift(7-1 downto 0) := vlo_cpy(7-1 downto 0);
        v1_reverse := false;
        if (vlo_cpy > vhi_cpy) then
            v1_shift(7-1 downto 0) := std_logic_vector(128-1 -unsigned(vlo_cpy(7-1 downto 0)));
            v1_reverse := true;
            tmp := (others => '0');
            tmp(7- 1 downto 0) := vhi_cpy(7-1 downto 0);
            vhi_cpy(7-1 downto 0) := i_assign_cast_fu_430_p1(7-1 downto 0);
            vlo_cpy(7-1 downto 0) := tmp(7-1 downto 0);
        end if;
        v1_cpy := (others => '0');
        v1_cpy(32-1 downto 0) := ap_const_lv32_1;
        tmp_mask_low := (others => '1');
        res_mask_low := std_logic_vector(shift_left(unsigned(tmp_mask_low),to_integer(unsigned('0' & vlo_cpy(31-1 downto 0)))));
        tmp_mask_hi := (others => '1');
        res_mask_hi := std_logic_vector(shift_left(unsigned(tmp_mask_hi),to_integer(unsigned('0' & vhi_cpy(31-1 downto 0)))));
        res_mask := (res_mask_hi(128-2 downto 0) & '0') or not res_mask_low;
        tmp_v1 := std_logic_vector(shift_left(unsigned(v1_cpy(128-1 downto 0)),to_integer(unsigned('0' & v1_shift(31-1 downto 0)))));
        if v1_reverse then
            for p_Result_2_fu_433_p5_i in 0 to 128-1 loop
                res_v1(p_Result_2_fu_433_p5_i) := tmp_v1(128-1-p_Result_2_fu_433_p5_i);
            end loop;
        else
            res_v1 := tmp_v1;
        end if;
        p_Result_2_fu_433_p5 <= ((p_Val2_1_reg_231 and res_mask) or (res_v1 and not res_mask));
    end process;

    
    p_Result_s_fu_515_p4_proc : process(encrypted_data_V_reg_633, Lo_assign_cast_fu_511_p1, Hi_assign_cast_fu_501_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable p_Result_s_fu_515_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := Lo_assign_cast_fu_511_p1(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := Hi_assign_cast_fu_501_p1(7 - 1 downto 0);
        v0_cpy := encrypted_data_V_reg_633;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(Hi_assign_cast_fu_501_p1(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(Lo_assign_cast_fu_511_p1(7-1 downto 0)));
            for p_Result_s_fu_515_p4_i in 0 to 128-1 loop
                v0_cpy(p_Result_s_fu_515_p4_i) := encrypted_data_V_reg_633(128-1-p_Result_s_fu_515_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_515_p4 <= resvalue(128-1 downto 0);
    end process;

    sourceAddressLocal_1_fu_540_p2 <= std_logic_vector(unsigned(sourceAddressLocal1_reg_188) + unsigned(ap_const_lv32_10));

    -- sourceAddress_ap_vld_in_sig assign process. --
    sourceAddress_ap_vld_in_sig_assign_proc : process(sourceAddress_ap_vld, sourceAddress_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = sourceAddress_ap_vld)) then 
            sourceAddress_ap_vld_in_sig <= sourceAddress_ap_vld;
        else 
            sourceAddress_ap_vld_in_sig <= sourceAddress_ap_vld_preg;
        end if; 
    end process;


    -- sourceAddress_in_sig assign process. --
    sourceAddress_in_sig_assign_proc : process(sourceAddress, sourceAddress_preg, sourceAddress_ap_vld)
    begin
        if ((ap_const_logic_1 = sourceAddress_ap_vld)) then 
            sourceAddress_in_sig <= sourceAddress;
        else 
            sourceAddress_in_sig <= sourceAddress_preg;
        end if; 
    end process;

    tmp_26_fu_374_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_368_p2),64));
    tmp_27_fu_383_p3 <= (tmp_fu_379_p1 & ap_const_lv3_0);
    tmp_28_fu_391_p2 <= (tmp_27_fu_383_p3 xor ap_const_lv7_7F);
    tmp_29_fu_487_p3 <= (tmp_325_fu_483_p1 & ap_const_lv3_0);
    tmp_30_fu_529_p2 <= std_logic_vector(unsigned(i_1_cast2_fu_467_p1) + unsigned(destinationAddressLocal1_reg_198));
    tmp_31_fu_535_p1 <= std_logic_vector(resize(unsigned(tmp_30_fu_529_p2),64));
    tmp_325_fu_483_p1 <= i_1_reg_266(4 - 1 downto 0);
    tmp_32_fu_418_p2 <= (ddr_q0 and mask_reg_254);
    tmp_33_fu_424_p2 <= "1" when (tmp_32_fu_418_p2 = ap_const_lv8_0) else "0";
    tmp_fu_379_p1 <= i_reg_220(4 - 1 downto 0);
    tmp_s_fu_368_p2 <= std_logic_vector(unsigned(i_cast5_fu_352_p1) + unsigned(sourceAddressLocal1_reg_188));
end behav;
