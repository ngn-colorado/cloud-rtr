-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DDR_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DDR_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_V_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_DDR_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_V_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_V_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DDR_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_DDR_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DDR_V_USER_VALUE : INTEGER := 0 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_ddr_V_AWVALID : OUT STD_LOGIC;
    m_axi_ddr_V_AWREADY : IN STD_LOGIC;
    m_axi_ddr_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_ADDR_WIDTH-1 downto 0);
    m_axi_ddr_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_ID_WIDTH-1 downto 0);
    m_axi_ddr_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ddr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_AWUSER_WIDTH-1 downto 0);
    m_axi_ddr_V_WVALID : OUT STD_LOGIC;
    m_axi_ddr_V_WREADY : IN STD_LOGIC;
    m_axi_ddr_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_DATA_WIDTH-1 downto 0);
    m_axi_ddr_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_DATA_WIDTH/8-1 downto 0);
    m_axi_ddr_V_WLAST : OUT STD_LOGIC;
    m_axi_ddr_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_ID_WIDTH-1 downto 0);
    m_axi_ddr_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_WUSER_WIDTH-1 downto 0);
    m_axi_ddr_V_ARVALID : OUT STD_LOGIC;
    m_axi_ddr_V_ARREADY : IN STD_LOGIC;
    m_axi_ddr_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_ADDR_WIDTH-1 downto 0);
    m_axi_ddr_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_ID_WIDTH-1 downto 0);
    m_axi_ddr_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ddr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_ARUSER_WIDTH-1 downto 0);
    m_axi_ddr_V_RVALID : IN STD_LOGIC;
    m_axi_ddr_V_RREADY : OUT STD_LOGIC;
    m_axi_ddr_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DDR_V_DATA_WIDTH-1 downto 0);
    m_axi_ddr_V_RLAST : IN STD_LOGIC;
    m_axi_ddr_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DDR_V_ID_WIDTH-1 downto 0);
    m_axi_ddr_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DDR_V_RUSER_WIDTH-1 downto 0);
    m_axi_ddr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_BVALID : IN STD_LOGIC;
    m_axi_ddr_V_BREADY : OUT STD_LOGIC;
    m_axi_ddr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DDR_V_ID_WIDTH-1 downto 0);
    m_axi_ddr_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DDR_V_BUSER_WIDTH-1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of aes is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_ready : STD_LOGIC;
    signal sourceAddress : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddress_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddress_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sourceAddress_ap_vld : STD_LOGIC;
    signal sourceAddress_ap_vld_in_sig : STD_LOGIC;
    signal sourceAddress_ap_vld_preg : STD_LOGIC := '0';
    signal key_in_V : STD_LOGIC_VECTOR (127 downto 0);
    signal key_in_V_in_sig : STD_LOGIC_VECTOR (127 downto 0);
    signal key_in_V_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal key_in_V_ap_vld : STD_LOGIC;
    signal key_in_V_ap_vld_in_sig : STD_LOGIC;
    signal key_in_V_ap_vld_preg : STD_LOGIC := '0';
    signal destinationAddress : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal destinationAddress_ap_vld : STD_LOGIC;
    signal destinationAddress_ap_vld_in_sig : STD_LOGIC;
    signal destinationAddress_ap_vld_preg : STD_LOGIC := '0';
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal length_r_ap_vld : STD_LOGIC;
    signal length_r_ap_vld_in_sig : STD_LOGIC;
    signal length_r_ap_vld_preg : STD_LOGIC := '0';
    signal ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_V_AWVALID : STD_LOGIC;
    signal ddr_V_AWREADY : STD_LOGIC;
    signal ddr_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal ddr_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ddr_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ddr_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ddr_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ddr_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ddr_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ddr_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_V_WVALID : STD_LOGIC;
    signal ddr_V_WREADY : STD_LOGIC;
    signal ddr_V_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ddr_V_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal ddr_V_WLAST : STD_LOGIC;
    signal ddr_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_V_ARVALID : STD_LOGIC;
    signal ddr_V_ARREADY : STD_LOGIC;
    signal ddr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal ddr_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ddr_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ddr_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ddr_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ddr_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ddr_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ddr_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_V_RVALID : STD_LOGIC;
    signal ddr_V_RREADY : STD_LOGIC;
    signal ddr_V_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ddr_V_RLAST : STD_LOGIC;
    signal ddr_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr_V_BVALID : STD_LOGIC;
    signal ddr_V_BREADY : STD_LOGIC;
    signal ddr_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_250 : BOOLEAN;
    signal sourceAddressLocal_2_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddressLocal_2_fu_253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_ddr_V_ARREADY : STD_LOGIC;
    signal sourceAddressLocal_1_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddressLocal_1_reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_reg_352 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aestest_fu_167_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal encrypted_data_V_reg_357 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_sig_ioackin_ddr_V_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_ddr_V_WREADY : STD_LOGIC;
    signal destinationAddressLocal_1_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddressLocal_1_reg_367 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aestest_fu_167_ap_rst : STD_LOGIC;
    signal grp_aestest_fu_167_ap_start : STD_LOGIC;
    signal grp_aestest_fu_167_ap_done : STD_LOGIC;
    signal grp_aestest_fu_167_ap_idle : STD_LOGIC;
    signal grp_aestest_fu_167_ap_ready : STD_LOGIC;
    signal grp_aestest_fu_167_ap_ce : STD_LOGIC;
    signal grp_aestest_fu_167_inptext_V_read : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aestest_fu_167_key_V_read : STD_LOGIC_VECTOR (127 downto 0);
    signal sourceAddressLocal1_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddressLocal1_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aestest_fu_167_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_ddr_V_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_ddr_V_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_ddr_V_WREADY : STD_LOGIC := '0';
    signal sourceAddress_assign_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_assign_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddressLocal_fu_226_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal destinationAddressLocal_fu_243_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_sig_bdd_1781 : BOOLEAN;

    component aestest IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        inptext_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        key_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component aes_AXILiteS_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (0 downto 0);
        sourceAddress : OUT STD_LOGIC_VECTOR (31 downto 0);
        sourceAddress_ap_vld : OUT STD_LOGIC;
        key_in_V : OUT STD_LOGIC_VECTOR (127 downto 0);
        key_in_V_ap_vld : OUT STD_LOGIC;
        destinationAddress : OUT STD_LOGIC_VECTOR (31 downto 0);
        destinationAddress_ap_vld : OUT STD_LOGIC;
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        length_r_ap_vld : OUT STD_LOGIC );
    end component;


    component aes_ddr_V_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    aes_AXILiteS_s_axi_U : component aes_AXILiteS_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        sourceAddress => sourceAddress,
        sourceAddress_ap_vld => sourceAddress_ap_vld,
        key_in_V => key_in_V,
        key_in_V_ap_vld => key_in_V_ap_vld,
        destinationAddress => destinationAddress,
        destinationAddress_ap_vld => destinationAddress_ap_vld,
        length_r => length_r,
        length_r_ap_vld => length_r_ap_vld);

    aes_ddr_V_m_axi_U : component aes_ddr_V_m_axi
    generic map (
        USER_DW => 128,
        USER_AW => 32,
        USER_MAXREQS => 2,
        C_ID_WIDTH => C_M_AXI_DDR_V_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_DDR_V_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_DDR_V_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_DDR_V_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_DDR_V_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_DDR_V_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_DDR_V_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_DDR_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_DDR_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_DDR_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DDR_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DDR_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ddr_V_AWVALID,
        AWREADY => m_axi_ddr_V_AWREADY,
        AWADDR => m_axi_ddr_V_AWADDR,
        AWID => m_axi_ddr_V_AWID,
        AWLEN => m_axi_ddr_V_AWLEN,
        AWSIZE => m_axi_ddr_V_AWSIZE,
        AWBURST => m_axi_ddr_V_AWBURST,
        AWLOCK => m_axi_ddr_V_AWLOCK,
        AWCACHE => m_axi_ddr_V_AWCACHE,
        AWPROT => m_axi_ddr_V_AWPROT,
        AWQOS => m_axi_ddr_V_AWQOS,
        AWREGION => m_axi_ddr_V_AWREGION,
        AWUSER => m_axi_ddr_V_AWUSER,
        WVALID => m_axi_ddr_V_WVALID,
        WREADY => m_axi_ddr_V_WREADY,
        WDATA => m_axi_ddr_V_WDATA,
        WSTRB => m_axi_ddr_V_WSTRB,
        WLAST => m_axi_ddr_V_WLAST,
        WID => m_axi_ddr_V_WID,
        WUSER => m_axi_ddr_V_WUSER,
        ARVALID => m_axi_ddr_V_ARVALID,
        ARREADY => m_axi_ddr_V_ARREADY,
        ARADDR => m_axi_ddr_V_ARADDR,
        ARID => m_axi_ddr_V_ARID,
        ARLEN => m_axi_ddr_V_ARLEN,
        ARSIZE => m_axi_ddr_V_ARSIZE,
        ARBURST => m_axi_ddr_V_ARBURST,
        ARLOCK => m_axi_ddr_V_ARLOCK,
        ARCACHE => m_axi_ddr_V_ARCACHE,
        ARPROT => m_axi_ddr_V_ARPROT,
        ARQOS => m_axi_ddr_V_ARQOS,
        ARREGION => m_axi_ddr_V_ARREGION,
        ARUSER => m_axi_ddr_V_ARUSER,
        RVALID => m_axi_ddr_V_RVALID,
        RREADY => m_axi_ddr_V_RREADY,
        RDATA => m_axi_ddr_V_RDATA,
        RLAST => m_axi_ddr_V_RLAST,
        RID => m_axi_ddr_V_RID,
        RUSER => m_axi_ddr_V_RUSER,
        RRESP => m_axi_ddr_V_RRESP,
        BVALID => m_axi_ddr_V_BVALID,
        BREADY => m_axi_ddr_V_BREADY,
        BRESP => m_axi_ddr_V_BRESP,
        BID => m_axi_ddr_V_BID,
        BUSER => m_axi_ddr_V_BUSER,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        I_ARVALID => ddr_V_ARVALID,
        I_ARREADY => ddr_V_ARREADY,
        I_ARADDR => ddr_V_ARADDR,
        I_ARID => ddr_V_ARID,
        I_ARLEN => ddr_V_ARLEN,
        I_ARSIZE => ddr_V_ARSIZE,
        I_ARLOCK => ddr_V_ARLOCK,
        I_ARCACHE => ddr_V_ARCACHE,
        I_ARQOS => ddr_V_ARQOS,
        I_ARPROT => ddr_V_ARPROT,
        I_ARUSER => ddr_V_ARUSER,
        I_ARBURST => ddr_V_ARBURST,
        I_ARREGION => ddr_V_ARREGION,
        I_RVALID => ddr_V_RVALID,
        I_RREADY => ddr_V_RREADY,
        I_RDATA => ddr_V_RDATA,
        I_RID => ddr_V_RID,
        I_RUSER => ddr_V_RUSER,
        I_RRESP => ddr_V_RRESP,
        I_RLAST => ddr_V_RLAST,
        I_AWVALID => ddr_V_AWVALID,
        I_AWREADY => ddr_V_AWREADY,
        I_AWADDR => ddr_V_AWADDR,
        I_AWID => ddr_V_AWID,
        I_AWLEN => ddr_V_AWLEN,
        I_AWSIZE => ddr_V_AWSIZE,
        I_AWLOCK => ddr_V_AWLOCK,
        I_AWCACHE => ddr_V_AWCACHE,
        I_AWQOS => ddr_V_AWQOS,
        I_AWPROT => ddr_V_AWPROT,
        I_AWUSER => ddr_V_AWUSER,
        I_AWBURST => ddr_V_AWBURST,
        I_AWREGION => ddr_V_AWREGION,
        I_WVALID => ddr_V_WVALID,
        I_WREADY => ddr_V_WREADY,
        I_WDATA => ddr_V_WDATA,
        I_WID => ddr_V_WID,
        I_WUSER => ddr_V_WUSER,
        I_WLAST => ddr_V_WLAST,
        I_WSTRB => ddr_V_WSTRB,
        I_BVALID => ddr_V_BVALID,
        I_BREADY => ddr_V_BREADY,
        I_BRESP => ddr_V_BRESP,
        I_BID => ddr_V_BID,
        I_BUSER => ddr_V_BUSER);

    grp_aestest_fu_167 : component aestest
    port map (
        ap_clk => ap_clk,
        ap_rst => grp_aestest_fu_167_ap_rst,
        ap_start => grp_aestest_fu_167_ap_start,
        ap_done => grp_aestest_fu_167_ap_done,
        ap_idle => grp_aestest_fu_167_ap_idle,
        ap_ready => grp_aestest_fu_167_ap_ready,
        ap_ce => grp_aestest_fu_167_ap_ce,
        inptext_V_read => grp_aestest_fu_167_inptext_V_read,
        key_V_read => grp_aestest_fu_167_key_V_read,
        ap_return => grp_aestest_fu_167_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_ddr_V_ARREADY assign process. --
    ap_reg_ioackin_ddr_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_ddr_V_ARREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_1781) then
                    if (not(((exitcond_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_ddr_V_ARREADY)))) then 
                        ap_reg_ioackin_ddr_V_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ddr_V_ARREADY)) then 
                        ap_reg_ioackin_ddr_V_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_ddr_V_AWREADY assign process. --
    ap_reg_ioackin_ddr_V_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_ddr_V_AWREADY <= ap_const_logic_0;
            else
                if ((ap_ST_st25_fsm_24 = ap_CS_fsm)) then
                    if (not(((ap_const_logic_0 = ap_sig_ioackin_ddr_V_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_ddr_V_WREADY)))) then 
                        ap_reg_ioackin_ddr_V_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ddr_V_AWREADY)) then 
                        ap_reg_ioackin_ddr_V_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_ddr_V_WREADY assign process. --
    ap_reg_ioackin_ddr_V_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_ddr_V_WREADY <= ap_const_logic_0;
            else
                if ((ap_ST_st25_fsm_24 = ap_CS_fsm)) then
                    if (not(((ap_const_logic_0 = ap_sig_ioackin_ddr_V_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_ddr_V_WREADY)))) then 
                        ap_reg_ioackin_ddr_V_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ddr_V_WREADY)) then 
                        ap_reg_ioackin_ddr_V_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- destinationAddress_ap_vld_preg assign process. --
    destinationAddress_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                destinationAddress_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((exitcond_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_ddr_V_ARREADY))) and not((exitcond_fu_262_p2 = ap_const_lv1_0)))) then 
                    destinationAddress_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = destinationAddress_ap_vld))) then 
                    destinationAddress_ap_vld_preg <= destinationAddress_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- destinationAddress_preg assign process. --
    destinationAddress_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                destinationAddress_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = destinationAddress_ap_vld))) then 
                    destinationAddress_preg <= destinationAddress;
                end if; 
            end if;
        end if;
    end process;


    -- grp_aestest_fu_167_ap_start_ap_start_reg assign process. --
    grp_aestest_fu_167_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                grp_aestest_fu_167_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_ST_st5_fsm_4 = ap_NS_fsm))) then 
                    grp_aestest_fu_167_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aestest_fu_167_ap_ready)) then 
                    grp_aestest_fu_167_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- key_in_V_ap_vld_preg assign process. --
    key_in_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                key_in_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((exitcond_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_ddr_V_ARREADY))) and not((exitcond_fu_262_p2 = ap_const_lv1_0)))) then 
                    key_in_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = key_in_V_ap_vld))) then 
                    key_in_V_ap_vld_preg <= key_in_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- key_in_V_preg assign process. --
    key_in_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                key_in_V_preg <= ap_const_lv128_lc_1;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = key_in_V_ap_vld))) then 
                    key_in_V_preg <= key_in_V;
                end if; 
            end if;
        end if;
    end process;


    -- length_r_ap_vld_preg assign process. --
    length_r_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                length_r_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((exitcond_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_ddr_V_ARREADY))) and not((exitcond_fu_262_p2 = ap_const_lv1_0)))) then 
                    length_r_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = length_r_ap_vld))) then 
                    length_r_ap_vld_preg <= length_r_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- length_r_preg assign process. --
    length_r_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                length_r_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = length_r_ap_vld))) then 
                    length_r_preg <= length_r;
                end if; 
            end if;
        end if;
    end process;


    -- sourceAddress_ap_vld_preg assign process. --
    sourceAddress_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                sourceAddress_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((exitcond_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_ddr_V_ARREADY))) and not((exitcond_fu_262_p2 = ap_const_lv1_0)))) then 
                    sourceAddress_ap_vld_preg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = sourceAddress_ap_vld) and not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))))) then 
                    sourceAddress_ap_vld_preg <= sourceAddress_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- sourceAddress_preg assign process. --
    sourceAddress_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                sourceAddress_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = sourceAddress_ap_vld) and not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))))) then 
                    sourceAddress_preg <= sourceAddress;
                end if; 
            end if;
        end if;
    end process;


    -- destinationAddressLocal1_reg_156 assign process. --
    destinationAddressLocal1_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st26_fsm_25 = ap_CS_fsm) and not((ddr_V_BVALID = ap_const_logic_0)))) then 
                destinationAddressLocal1_reg_156 <= destinationAddressLocal_1_reg_367;
            elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                destinationAddressLocal1_reg_156 <= destinationAddressLocal_2_fu_253_p1;
            end if; 
        end if;
    end process;

    -- sourceAddressLocal1_reg_147 assign process. --
    sourceAddressLocal1_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st26_fsm_25 = ap_CS_fsm) and not((ddr_V_BVALID = ap_const_logic_0)))) then 
                sourceAddressLocal1_reg_147 <= sourceAddressLocal_1_reg_347;
            elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                sourceAddressLocal1_reg_147 <= sourceAddressLocal_2_fu_236_p1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ddr_V_RVALID = ap_const_logic_0)))) then
                data_V_reg_352 <= ddr_V_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st25_fsm_24 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_ddr_V_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_ddr_V_WREADY))))) then
                destinationAddressLocal_1_reg_367 <= destinationAddressLocal_1_fu_295_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_250))) then
                destinationAddress_assign_fu_104 <= destinationAddress_in_sig;
                sourceAddress_assign_fu_100 <= sourceAddress_in_sig;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then
                encrypted_data_V_reg_357 <= grp_aestest_fu_167_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond_fu_262_p2 = ap_const_lv1_0) and not(((exitcond_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_ddr_V_ARREADY))))) then
                sourceAddressLocal_1_reg_347 <= sourceAddressLocal_1_fu_278_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                tmp_reg_333 <= tmp_fu_257_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , ddr_V_RVALID , ddr_V_BVALID , ap_sig_bdd_250 , exitcond_fu_262_p2 , ap_sig_ioackin_ddr_V_ARREADY , ap_sig_ioackin_ddr_V_AWREADY , ap_sig_ioackin_ddr_V_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_250)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if ((not(((exitcond_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_ddr_V_ARREADY))) and not((exitcond_fu_262_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((exitcond_fu_262_p2 = ap_const_lv1_0) and not(((exitcond_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_ddr_V_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ddr_V_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_ddr_V_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_ddr_V_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                else
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                end if;
            when ap_ST_st26_fsm_25 => 
                if (not((ddr_V_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, exitcond_fu_262_p2, ap_sig_ioackin_ddr_V_ARREADY)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((exitcond_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_ddr_V_ARREADY))) and not((exitcond_fu_262_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond_fu_262_p2, ap_sig_ioackin_ddr_V_ARREADY)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((exitcond_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_ddr_V_ARREADY))) and not((exitcond_fu_262_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv1_1;

    -- ap_sig_bdd_1781 assign process. --
    ap_sig_bdd_1781_assign_proc : process(ap_CS_fsm, exitcond_fu_262_p2)
    begin
                ap_sig_bdd_1781 <= ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond_fu_262_p2 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_250 assign process. --
    ap_sig_bdd_250_assign_proc : process(ap_start, sourceAddress_ap_vld_in_sig, key_in_V_ap_vld_in_sig, destinationAddress_ap_vld_in_sig, length_r_ap_vld_in_sig)
    begin
                ap_sig_bdd_250 <= ((length_r_ap_vld_in_sig = ap_const_logic_0) or (destinationAddress_ap_vld_in_sig = ap_const_logic_0) or (sourceAddress_ap_vld_in_sig = ap_const_logic_0) or (key_in_V_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    -- ap_sig_ioackin_ddr_V_ARREADY assign process. --
    ap_sig_ioackin_ddr_V_ARREADY_assign_proc : process(ddr_V_ARREADY, ap_reg_ioackin_ddr_V_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_ddr_V_ARREADY)) then 
            ap_sig_ioackin_ddr_V_ARREADY <= ddr_V_ARREADY;
        else 
            ap_sig_ioackin_ddr_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_ddr_V_AWREADY assign process. --
    ap_sig_ioackin_ddr_V_AWREADY_assign_proc : process(ddr_V_AWREADY, ap_reg_ioackin_ddr_V_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_ddr_V_AWREADY)) then 
            ap_sig_ioackin_ddr_V_AWREADY <= ddr_V_AWREADY;
        else 
            ap_sig_ioackin_ddr_V_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_ddr_V_WREADY assign process. --
    ap_sig_ioackin_ddr_V_WREADY_assign_proc : process(ddr_V_WREADY, ap_reg_ioackin_ddr_V_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_ddr_V_WREADY)) then 
            ap_sig_ioackin_ddr_V_WREADY <= ddr_V_WREADY;
        else 
            ap_sig_ioackin_ddr_V_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    ddr_V_ARADDR <= tmp_1_fu_267_p1(32 - 1 downto 0);
    ddr_V_ARBURST <= ap_const_lv2_0;
    ddr_V_ARCACHE <= ap_const_lv4_0;
    ddr_V_ARID <= ap_const_lv1_0;
    ddr_V_ARLEN <= ap_const_lv32_1;
    ddr_V_ARLOCK <= ap_const_lv2_0;
    ddr_V_ARPROT <= ap_const_lv3_0;
    ddr_V_ARQOS <= ap_const_lv4_0;
    ddr_V_ARREGION <= ap_const_lv4_0;
    ddr_V_ARSIZE <= ap_const_lv3_0;
    ddr_V_ARUSER <= ap_const_lv1_0;

    -- ddr_V_ARVALID assign process. --
    ddr_V_ARVALID_assign_proc : process(ap_CS_fsm, exitcond_fu_262_p2, ap_reg_ioackin_ddr_V_ARREADY)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_reg_ioackin_ddr_V_ARREADY))) then 
            ddr_V_ARVALID <= ap_const_logic_1;
        else 
            ddr_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    ddr_V_AWADDR <= tmp_2_fu_284_p1(32 - 1 downto 0);
    ddr_V_AWBURST <= ap_const_lv2_0;
    ddr_V_AWCACHE <= ap_const_lv4_0;
    ddr_V_AWID <= ap_const_lv1_0;
    ddr_V_AWLEN <= ap_const_lv32_1;
    ddr_V_AWLOCK <= ap_const_lv2_0;
    ddr_V_AWPROT <= ap_const_lv3_0;
    ddr_V_AWQOS <= ap_const_lv4_0;
    ddr_V_AWREGION <= ap_const_lv4_0;
    ddr_V_AWSIZE <= ap_const_lv3_0;
    ddr_V_AWUSER <= ap_const_lv1_0;

    -- ddr_V_AWVALID assign process. --
    ddr_V_AWVALID_assign_proc : process(ap_CS_fsm, ap_reg_ioackin_ddr_V_AWREADY)
    begin
        if (((ap_ST_st25_fsm_24 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_ddr_V_AWREADY))) then 
            ddr_V_AWVALID <= ap_const_logic_1;
        else 
            ddr_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- ddr_V_BREADY assign process. --
    ddr_V_BREADY_assign_proc : process(ap_CS_fsm, ddr_V_BVALID)
    begin
        if (((ap_ST_st26_fsm_25 = ap_CS_fsm) and not((ddr_V_BVALID = ap_const_logic_0)))) then 
            ddr_V_BREADY <= ap_const_logic_1;
        else 
            ddr_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- ddr_V_RREADY assign process. --
    ddr_V_RREADY_assign_proc : process(ap_CS_fsm, ddr_V_RVALID)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ddr_V_RVALID = ap_const_logic_0)))) then 
            ddr_V_RREADY <= ap_const_logic_1;
        else 
            ddr_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    ddr_V_WDATA <= encrypted_data_V_reg_357;
    ddr_V_WID <= ap_const_lv1_0;
    ddr_V_WLAST <= ap_const_logic_0;
    ddr_V_WSTRB <= ap_const_lv16_FFFF;
    ddr_V_WUSER <= ap_const_lv1_0;

    -- ddr_V_WVALID assign process. --
    ddr_V_WVALID_assign_proc : process(ap_CS_fsm, ap_reg_ioackin_ddr_V_WREADY)
    begin
        if (((ap_ST_st25_fsm_24 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_ddr_V_WREADY))) then 
            ddr_V_WVALID <= ap_const_logic_1;
        else 
            ddr_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    destinationAddressLocal_1_fu_295_p2 <= std_logic_vector(unsigned(destinationAddressLocal1_reg_156) + unsigned(ap_const_lv32_1));
    destinationAddressLocal_2_fu_253_p1 <= std_logic_vector(resize(unsigned(destinationAddressLocal_fu_243_p4),32));
    destinationAddressLocal_fu_243_p4 <= destinationAddress_assign_fu_104(31 downto 4);

    -- destinationAddress_ap_vld_in_sig assign process. --
    destinationAddress_ap_vld_in_sig_assign_proc : process(destinationAddress_ap_vld, destinationAddress_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = destinationAddress_ap_vld)) then 
            destinationAddress_ap_vld_in_sig <= destinationAddress_ap_vld;
        else 
            destinationAddress_ap_vld_in_sig <= destinationAddress_ap_vld_preg;
        end if; 
    end process;


    -- destinationAddress_in_sig assign process. --
    destinationAddress_in_sig_assign_proc : process(destinationAddress, destinationAddress_preg, destinationAddress_ap_vld)
    begin
        if ((ap_const_logic_1 = destinationAddress_ap_vld)) then 
            destinationAddress_in_sig <= destinationAddress;
        else 
            destinationAddress_in_sig <= destinationAddress_preg;
        end if; 
    end process;

    exitcond_fu_262_p2 <= "1" when (sourceAddressLocal1_reg_147 = tmp_reg_333) else "0";
    grp_aestest_fu_167_ap_ce <= ap_const_logic_1;

    -- grp_aestest_fu_167_ap_rst assign process. --
    grp_aestest_fu_167_ap_rst_assign_proc : process(ap_rst_n)
    begin
                grp_aestest_fu_167_ap_rst <= not(ap_rst_n);
    end process;

    grp_aestest_fu_167_ap_start <= grp_aestest_fu_167_ap_start_ap_start_reg;
    grp_aestest_fu_167_inptext_V_read <= data_V_reg_352;
    grp_aestest_fu_167_key_V_read <= key_in_V_in_sig;

    -- key_in_V_ap_vld_in_sig assign process. --
    key_in_V_ap_vld_in_sig_assign_proc : process(key_in_V_ap_vld, key_in_V_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = key_in_V_ap_vld)) then 
            key_in_V_ap_vld_in_sig <= key_in_V_ap_vld;
        else 
            key_in_V_ap_vld_in_sig <= key_in_V_ap_vld_preg;
        end if; 
    end process;


    -- key_in_V_in_sig assign process. --
    key_in_V_in_sig_assign_proc : process(key_in_V, key_in_V_preg, key_in_V_ap_vld)
    begin
        if ((ap_const_logic_1 = key_in_V_ap_vld)) then 
            key_in_V_in_sig <= key_in_V;
        else 
            key_in_V_in_sig <= key_in_V_preg;
        end if; 
    end process;


    -- length_r_ap_vld_in_sig assign process. --
    length_r_ap_vld_in_sig_assign_proc : process(length_r_ap_vld, length_r_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = length_r_ap_vld)) then 
            length_r_ap_vld_in_sig <= length_r_ap_vld;
        else 
            length_r_ap_vld_in_sig <= length_r_ap_vld_preg;
        end if; 
    end process;


    -- length_r_in_sig assign process. --
    length_r_in_sig_assign_proc : process(length_r, length_r_preg, length_r_ap_vld)
    begin
        if ((ap_const_logic_1 = length_r_ap_vld)) then 
            length_r_in_sig <= length_r;
        else 
            length_r_in_sig <= length_r_preg;
        end if; 
    end process;

    sourceAddressLocal_1_fu_278_p2 <= std_logic_vector(unsigned(sourceAddressLocal1_reg_147) + unsigned(ap_const_lv32_1));
    sourceAddressLocal_2_fu_236_p1 <= std_logic_vector(resize(unsigned(sourceAddressLocal_fu_226_p4),32));
    sourceAddressLocal_fu_226_p4 <= sourceAddress_assign_fu_100(31 downto 4);

    -- sourceAddress_ap_vld_in_sig assign process. --
    sourceAddress_ap_vld_in_sig_assign_proc : process(sourceAddress_ap_vld, sourceAddress_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = sourceAddress_ap_vld)) then 
            sourceAddress_ap_vld_in_sig <= sourceAddress_ap_vld;
        else 
            sourceAddress_ap_vld_in_sig <= sourceAddress_ap_vld_preg;
        end if; 
    end process;


    -- sourceAddress_in_sig assign process. --
    sourceAddress_in_sig_assign_proc : process(sourceAddress, sourceAddress_preg, sourceAddress_ap_vld)
    begin
        if ((ap_const_logic_1 = sourceAddress_ap_vld)) then 
            sourceAddress_in_sig <= sourceAddress;
        else 
            sourceAddress_in_sig <= sourceAddress_preg;
        end if; 
    end process;

    tmp_1_fu_267_p1 <= std_logic_vector(resize(unsigned(sourceAddressLocal1_reg_147),64));
    tmp_2_fu_284_p1 <= std_logic_vector(resize(unsigned(destinationAddressLocal1_reg_156),64));
    tmp_fu_257_p2 <= std_logic_vector(unsigned(sourceAddressLocal_2_fu_236_p1) + unsigned(length_r_in_sig));
end behav;
