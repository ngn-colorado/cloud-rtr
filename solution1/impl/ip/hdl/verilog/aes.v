// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aes,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module aes (
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        ap_clk,
        ap_rst_n,
        m_axi_m_mm2s_ctl_AWVALID,
        m_axi_m_mm2s_ctl_AWREADY,
        m_axi_m_mm2s_ctl_AWADDR,
        m_axi_m_mm2s_ctl_AWID,
        m_axi_m_mm2s_ctl_AWLEN,
        m_axi_m_mm2s_ctl_AWSIZE,
        m_axi_m_mm2s_ctl_AWBURST,
        m_axi_m_mm2s_ctl_AWLOCK,
        m_axi_m_mm2s_ctl_AWCACHE,
        m_axi_m_mm2s_ctl_AWPROT,
        m_axi_m_mm2s_ctl_AWQOS,
        m_axi_m_mm2s_ctl_AWREGION,
        m_axi_m_mm2s_ctl_AWUSER,
        m_axi_m_mm2s_ctl_WVALID,
        m_axi_m_mm2s_ctl_WREADY,
        m_axi_m_mm2s_ctl_WDATA,
        m_axi_m_mm2s_ctl_WSTRB,
        m_axi_m_mm2s_ctl_WLAST,
        m_axi_m_mm2s_ctl_WID,
        m_axi_m_mm2s_ctl_WUSER,
        m_axi_m_mm2s_ctl_ARVALID,
        m_axi_m_mm2s_ctl_ARREADY,
        m_axi_m_mm2s_ctl_ARADDR,
        m_axi_m_mm2s_ctl_ARID,
        m_axi_m_mm2s_ctl_ARLEN,
        m_axi_m_mm2s_ctl_ARSIZE,
        m_axi_m_mm2s_ctl_ARBURST,
        m_axi_m_mm2s_ctl_ARLOCK,
        m_axi_m_mm2s_ctl_ARCACHE,
        m_axi_m_mm2s_ctl_ARPROT,
        m_axi_m_mm2s_ctl_ARQOS,
        m_axi_m_mm2s_ctl_ARREGION,
        m_axi_m_mm2s_ctl_ARUSER,
        m_axi_m_mm2s_ctl_RVALID,
        m_axi_m_mm2s_ctl_RREADY,
        m_axi_m_mm2s_ctl_RDATA,
        m_axi_m_mm2s_ctl_RLAST,
        m_axi_m_mm2s_ctl_RID,
        m_axi_m_mm2s_ctl_RUSER,
        m_axi_m_mm2s_ctl_RRESP,
        m_axi_m_mm2s_ctl_BVALID,
        m_axi_m_mm2s_ctl_BREADY,
        m_axi_m_mm2s_ctl_BRESP,
        m_axi_m_mm2s_ctl_BID,
        m_axi_m_mm2s_ctl_BUSER,
        m_axi_m_s2mm_ctl_AWVALID,
        m_axi_m_s2mm_ctl_AWREADY,
        m_axi_m_s2mm_ctl_AWADDR,
        m_axi_m_s2mm_ctl_AWID,
        m_axi_m_s2mm_ctl_AWLEN,
        m_axi_m_s2mm_ctl_AWSIZE,
        m_axi_m_s2mm_ctl_AWBURST,
        m_axi_m_s2mm_ctl_AWLOCK,
        m_axi_m_s2mm_ctl_AWCACHE,
        m_axi_m_s2mm_ctl_AWPROT,
        m_axi_m_s2mm_ctl_AWQOS,
        m_axi_m_s2mm_ctl_AWREGION,
        m_axi_m_s2mm_ctl_AWUSER,
        m_axi_m_s2mm_ctl_WVALID,
        m_axi_m_s2mm_ctl_WREADY,
        m_axi_m_s2mm_ctl_WDATA,
        m_axi_m_s2mm_ctl_WSTRB,
        m_axi_m_s2mm_ctl_WLAST,
        m_axi_m_s2mm_ctl_WID,
        m_axi_m_s2mm_ctl_WUSER,
        m_axi_m_s2mm_ctl_ARVALID,
        m_axi_m_s2mm_ctl_ARREADY,
        m_axi_m_s2mm_ctl_ARADDR,
        m_axi_m_s2mm_ctl_ARID,
        m_axi_m_s2mm_ctl_ARLEN,
        m_axi_m_s2mm_ctl_ARSIZE,
        m_axi_m_s2mm_ctl_ARBURST,
        m_axi_m_s2mm_ctl_ARLOCK,
        m_axi_m_s2mm_ctl_ARCACHE,
        m_axi_m_s2mm_ctl_ARPROT,
        m_axi_m_s2mm_ctl_ARQOS,
        m_axi_m_s2mm_ctl_ARREGION,
        m_axi_m_s2mm_ctl_ARUSER,
        m_axi_m_s2mm_ctl_RVALID,
        m_axi_m_s2mm_ctl_RREADY,
        m_axi_m_s2mm_ctl_RDATA,
        m_axi_m_s2mm_ctl_RLAST,
        m_axi_m_s2mm_ctl_RID,
        m_axi_m_s2mm_ctl_RUSER,
        m_axi_m_s2mm_ctl_RRESP,
        m_axi_m_s2mm_ctl_BVALID,
        m_axi_m_s2mm_ctl_BREADY,
        m_axi_m_s2mm_ctl_BRESP,
        m_axi_m_s2mm_ctl_BID,
        m_axi_m_s2mm_ctl_BUSER,
        s_in_V_V_TDATA,
        s_in_V_V_TVALID,
        s_in_V_V_TREADY,
        s_out_V_V_TDATA,
        s_out_V_V_TVALID,
        s_out_V_V_TREADY,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 6'b000000;
parameter    ap_ST_st2_fsm_1 = 6'b1;
parameter    ap_ST_st3_fsm_2 = 6'b10;
parameter    ap_ST_st4_fsm_3 = 6'b11;
parameter    ap_ST_st5_fsm_4 = 6'b100;
parameter    ap_ST_st6_fsm_5 = 6'b101;
parameter    ap_ST_st7_fsm_6 = 6'b110;
parameter    ap_ST_st8_fsm_7 = 6'b111;
parameter    ap_ST_st9_fsm_8 = 6'b1000;
parameter    ap_ST_st10_fsm_9 = 6'b1001;
parameter    ap_ST_st11_fsm_10 = 6'b1010;
parameter    ap_ST_st12_fsm_11 = 6'b1011;
parameter    ap_ST_st13_fsm_12 = 6'b1100;
parameter    ap_ST_st14_fsm_13 = 6'b1101;
parameter    ap_ST_st15_fsm_14 = 6'b1110;
parameter    ap_ST_st16_fsm_15 = 6'b1111;
parameter    ap_ST_st17_fsm_16 = 6'b10000;
parameter    ap_ST_st18_fsm_17 = 6'b10001;
parameter    ap_ST_st19_fsm_18 = 6'b10010;
parameter    ap_ST_st20_fsm_19 = 6'b10011;
parameter    ap_ST_st21_fsm_20 = 6'b10100;
parameter    ap_ST_st22_fsm_21 = 6'b10101;
parameter    ap_ST_st23_fsm_22 = 6'b10110;
parameter    ap_ST_st24_fsm_23 = 6'b10111;
parameter    ap_ST_st25_fsm_24 = 6'b11000;
parameter    ap_ST_st26_fsm_25 = 6'b11001;
parameter    ap_ST_st27_fsm_26 = 6'b11010;
parameter    ap_ST_st28_fsm_27 = 6'b11011;
parameter    ap_ST_st29_fsm_28 = 6'b11100;
parameter    ap_ST_st30_fsm_29 = 6'b11101;
parameter    ap_ST_st31_fsm_30 = 6'b11110;
parameter    ap_ST_st32_fsm_31 = 6'b11111;
parameter    ap_ST_st33_fsm_32 = 6'b100000;
parameter    ap_ST_st34_fsm_33 = 6'b100001;
parameter    ap_ST_st35_fsm_34 = 6'b100010;
parameter    ap_ST_st36_fsm_35 = 6'b100011;
parameter    ap_ST_st37_fsm_36 = 6'b100100;
parameter    ap_ST_st38_fsm_37 = 6'b100101;
parameter    ap_ST_st39_fsm_38 = 6'b100110;
parameter    ap_ST_st40_fsm_39 = 6'b100111;
parameter    ap_ST_st41_fsm_40 = 6'b101000;
parameter    ap_ST_st42_fsm_41 = 6'b101001;
parameter    ap_ST_st43_fsm_42 = 6'b101010;
parameter    ap_ST_st44_fsm_43 = 6'b101011;
parameter    ap_ST_st45_fsm_44 = 6'b101100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv128_lc_1 = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_DATA_WIDTH = 32;
parameter    C_M_AXI_M_MM2S_CTL_ID_WIDTH = 1;
parameter    C_M_AXI_M_MM2S_CTL_ADDR_WIDTH = 32;
parameter    C_M_AXI_M_MM2S_CTL_DATA_WIDTH = 32;
parameter    C_M_AXI_M_MM2S_CTL_AWUSER_WIDTH = 1;
parameter    C_M_AXI_M_MM2S_CTL_ARUSER_WIDTH = 1;
parameter    C_M_AXI_M_MM2S_CTL_WUSER_WIDTH = 1;
parameter    C_M_AXI_M_MM2S_CTL_RUSER_WIDTH = 1;
parameter    C_M_AXI_M_MM2S_CTL_BUSER_WIDTH = 1;
parameter    C_M_AXI_M_MM2S_CTL_TARGET_ADDR = 0;
parameter    C_M_AXI_M_MM2S_CTL_USER_VALUE = 0;
parameter    C_M_AXI_M_MM2S_CTL_PROT_VALUE = 0;
parameter    C_M_AXI_M_MM2S_CTL_CACHE_VALUE = 3;
parameter    C_M_AXI_M_S2MM_CTL_ID_WIDTH = 1;
parameter    C_M_AXI_M_S2MM_CTL_ADDR_WIDTH = 32;
parameter    C_M_AXI_M_S2MM_CTL_DATA_WIDTH = 32;
parameter    C_M_AXI_M_S2MM_CTL_AWUSER_WIDTH = 1;
parameter    C_M_AXI_M_S2MM_CTL_ARUSER_WIDTH = 1;
parameter    C_M_AXI_M_S2MM_CTL_WUSER_WIDTH = 1;
parameter    C_M_AXI_M_S2MM_CTL_RUSER_WIDTH = 1;
parameter    C_M_AXI_M_S2MM_CTL_BUSER_WIDTH = 1;
parameter    C_M_AXI_M_S2MM_CTL_TARGET_ADDR = 0;
parameter    C_M_AXI_M_S2MM_CTL_USER_VALUE = 0;
parameter    C_M_AXI_M_S2MM_CTL_PROT_VALUE = 0;
parameter    C_M_AXI_M_S2MM_CTL_CACHE_VALUE = 3;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv64_C = 64'b1100;
parameter    ap_const_lv64_6 = 64'b110;
parameter    ap_const_lv64_12 = 64'b10010;
parameter    ap_const_lv64_A = 64'b1010;
parameter    ap_const_lv64_16 = 64'b10110;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv32_37 = 32'b110111;
parameter    ap_const_lv32_38 = 32'b111000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv32_47 = 32'b1000111;
parameter    ap_const_lv32_48 = 32'b1001000;
parameter    ap_const_lv32_4F = 32'b1001111;
parameter    ap_const_lv32_50 = 32'b1010000;
parameter    ap_const_lv32_57 = 32'b1010111;
parameter    ap_const_lv32_58 = 32'b1011000;
parameter    ap_const_lv32_5F = 32'b1011111;
parameter    ap_const_lv32_60 = 32'b1100000;
parameter    ap_const_lv32_67 = 32'b1100111;
parameter    ap_const_lv32_68 = 32'b1101000;
parameter    ap_const_lv32_6F = 32'b1101111;
parameter    ap_const_lv32_70 = 32'b1110000;
parameter    ap_const_lv32_77 = 32'b1110111;
parameter    ap_const_lv32_78 = 32'b1111000;
parameter    ap_const_lv32_7F = 32'b1111111;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv128_lc_2 = 128'b1;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter    C_WSTRB_WIDTH = (C_DATA_WIDTH / ap_const_int64_8);
parameter    C_M_AXI_M_MM2S_CTL_WSTRB_WIDTH = (C_M_AXI_M_MM2S_CTL_DATA_WIDTH / ap_const_int64_8);
parameter    C_M_AXI_M_S2MM_CTL_WSTRB_WIDTH = (C_M_AXI_M_S2MM_CTL_DATA_WIDTH / ap_const_int64_8);

input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   ap_clk;
input   ap_rst_n;
output   m_axi_m_mm2s_ctl_AWVALID;
input   m_axi_m_mm2s_ctl_AWREADY;
output  [C_M_AXI_M_MM2S_CTL_ADDR_WIDTH - 1 : 0] m_axi_m_mm2s_ctl_AWADDR;
output  [C_M_AXI_M_MM2S_CTL_ID_WIDTH - 1 : 0] m_axi_m_mm2s_ctl_AWID;
output  [7:0] m_axi_m_mm2s_ctl_AWLEN;
output  [2:0] m_axi_m_mm2s_ctl_AWSIZE;
output  [1:0] m_axi_m_mm2s_ctl_AWBURST;
output  [1:0] m_axi_m_mm2s_ctl_AWLOCK;
output  [3:0] m_axi_m_mm2s_ctl_AWCACHE;
output  [2:0] m_axi_m_mm2s_ctl_AWPROT;
output  [3:0] m_axi_m_mm2s_ctl_AWQOS;
output  [3:0] m_axi_m_mm2s_ctl_AWREGION;
output  [C_M_AXI_M_MM2S_CTL_AWUSER_WIDTH - 1 : 0] m_axi_m_mm2s_ctl_AWUSER;
output   m_axi_m_mm2s_ctl_WVALID;
input   m_axi_m_mm2s_ctl_WREADY;
output  [C_M_AXI_M_MM2S_CTL_DATA_WIDTH - 1 : 0] m_axi_m_mm2s_ctl_WDATA;
output  [C_M_AXI_M_MM2S_CTL_WSTRB_WIDTH - 1 : 0] m_axi_m_mm2s_ctl_WSTRB;
output   m_axi_m_mm2s_ctl_WLAST;
output  [C_M_AXI_M_MM2S_CTL_ID_WIDTH - 1 : 0] m_axi_m_mm2s_ctl_WID;
output  [C_M_AXI_M_MM2S_CTL_WUSER_WIDTH - 1 : 0] m_axi_m_mm2s_ctl_WUSER;
output   m_axi_m_mm2s_ctl_ARVALID;
input   m_axi_m_mm2s_ctl_ARREADY;
output  [C_M_AXI_M_MM2S_CTL_ADDR_WIDTH - 1 : 0] m_axi_m_mm2s_ctl_ARADDR;
output  [C_M_AXI_M_MM2S_CTL_ID_WIDTH - 1 : 0] m_axi_m_mm2s_ctl_ARID;
output  [7:0] m_axi_m_mm2s_ctl_ARLEN;
output  [2:0] m_axi_m_mm2s_ctl_ARSIZE;
output  [1:0] m_axi_m_mm2s_ctl_ARBURST;
output  [1:0] m_axi_m_mm2s_ctl_ARLOCK;
output  [3:0] m_axi_m_mm2s_ctl_ARCACHE;
output  [2:0] m_axi_m_mm2s_ctl_ARPROT;
output  [3:0] m_axi_m_mm2s_ctl_ARQOS;
output  [3:0] m_axi_m_mm2s_ctl_ARREGION;
output  [C_M_AXI_M_MM2S_CTL_ARUSER_WIDTH - 1 : 0] m_axi_m_mm2s_ctl_ARUSER;
input   m_axi_m_mm2s_ctl_RVALID;
output   m_axi_m_mm2s_ctl_RREADY;
input  [C_M_AXI_M_MM2S_CTL_DATA_WIDTH - 1 : 0] m_axi_m_mm2s_ctl_RDATA;
input   m_axi_m_mm2s_ctl_RLAST;
input  [C_M_AXI_M_MM2S_CTL_ID_WIDTH - 1 : 0] m_axi_m_mm2s_ctl_RID;
input  [C_M_AXI_M_MM2S_CTL_RUSER_WIDTH - 1 : 0] m_axi_m_mm2s_ctl_RUSER;
input  [1:0] m_axi_m_mm2s_ctl_RRESP;
input   m_axi_m_mm2s_ctl_BVALID;
output   m_axi_m_mm2s_ctl_BREADY;
input  [1:0] m_axi_m_mm2s_ctl_BRESP;
input  [C_M_AXI_M_MM2S_CTL_ID_WIDTH - 1 : 0] m_axi_m_mm2s_ctl_BID;
input  [C_M_AXI_M_MM2S_CTL_BUSER_WIDTH - 1 : 0] m_axi_m_mm2s_ctl_BUSER;
output   m_axi_m_s2mm_ctl_AWVALID;
input   m_axi_m_s2mm_ctl_AWREADY;
output  [C_M_AXI_M_S2MM_CTL_ADDR_WIDTH - 1 : 0] m_axi_m_s2mm_ctl_AWADDR;
output  [C_M_AXI_M_S2MM_CTL_ID_WIDTH - 1 : 0] m_axi_m_s2mm_ctl_AWID;
output  [7:0] m_axi_m_s2mm_ctl_AWLEN;
output  [2:0] m_axi_m_s2mm_ctl_AWSIZE;
output  [1:0] m_axi_m_s2mm_ctl_AWBURST;
output  [1:0] m_axi_m_s2mm_ctl_AWLOCK;
output  [3:0] m_axi_m_s2mm_ctl_AWCACHE;
output  [2:0] m_axi_m_s2mm_ctl_AWPROT;
output  [3:0] m_axi_m_s2mm_ctl_AWQOS;
output  [3:0] m_axi_m_s2mm_ctl_AWREGION;
output  [C_M_AXI_M_S2MM_CTL_AWUSER_WIDTH - 1 : 0] m_axi_m_s2mm_ctl_AWUSER;
output   m_axi_m_s2mm_ctl_WVALID;
input   m_axi_m_s2mm_ctl_WREADY;
output  [C_M_AXI_M_S2MM_CTL_DATA_WIDTH - 1 : 0] m_axi_m_s2mm_ctl_WDATA;
output  [C_M_AXI_M_S2MM_CTL_WSTRB_WIDTH - 1 : 0] m_axi_m_s2mm_ctl_WSTRB;
output   m_axi_m_s2mm_ctl_WLAST;
output  [C_M_AXI_M_S2MM_CTL_ID_WIDTH - 1 : 0] m_axi_m_s2mm_ctl_WID;
output  [C_M_AXI_M_S2MM_CTL_WUSER_WIDTH - 1 : 0] m_axi_m_s2mm_ctl_WUSER;
output   m_axi_m_s2mm_ctl_ARVALID;
input   m_axi_m_s2mm_ctl_ARREADY;
output  [C_M_AXI_M_S2MM_CTL_ADDR_WIDTH - 1 : 0] m_axi_m_s2mm_ctl_ARADDR;
output  [C_M_AXI_M_S2MM_CTL_ID_WIDTH - 1 : 0] m_axi_m_s2mm_ctl_ARID;
output  [7:0] m_axi_m_s2mm_ctl_ARLEN;
output  [2:0] m_axi_m_s2mm_ctl_ARSIZE;
output  [1:0] m_axi_m_s2mm_ctl_ARBURST;
output  [1:0] m_axi_m_s2mm_ctl_ARLOCK;
output  [3:0] m_axi_m_s2mm_ctl_ARCACHE;
output  [2:0] m_axi_m_s2mm_ctl_ARPROT;
output  [3:0] m_axi_m_s2mm_ctl_ARQOS;
output  [3:0] m_axi_m_s2mm_ctl_ARREGION;
output  [C_M_AXI_M_S2MM_CTL_ARUSER_WIDTH - 1 : 0] m_axi_m_s2mm_ctl_ARUSER;
input   m_axi_m_s2mm_ctl_RVALID;
output   m_axi_m_s2mm_ctl_RREADY;
input  [C_M_AXI_M_S2MM_CTL_DATA_WIDTH - 1 : 0] m_axi_m_s2mm_ctl_RDATA;
input   m_axi_m_s2mm_ctl_RLAST;
input  [C_M_AXI_M_S2MM_CTL_ID_WIDTH - 1 : 0] m_axi_m_s2mm_ctl_RID;
input  [C_M_AXI_M_S2MM_CTL_RUSER_WIDTH - 1 : 0] m_axi_m_s2mm_ctl_RUSER;
input  [1:0] m_axi_m_s2mm_ctl_RRESP;
input   m_axi_m_s2mm_ctl_BVALID;
output   m_axi_m_s2mm_ctl_BREADY;
input  [1:0] m_axi_m_s2mm_ctl_BRESP;
input  [C_M_AXI_M_S2MM_CTL_ID_WIDTH - 1 : 0] m_axi_m_s2mm_ctl_BID;
input  [C_M_AXI_M_S2MM_CTL_BUSER_WIDTH - 1 : 0] m_axi_m_s2mm_ctl_BUSER;
input  [31:0] s_in_V_V_TDATA;
input   s_in_V_V_TVALID;
output   s_in_V_V_TREADY;
output  [31:0] s_out_V_V_TDATA;
output   s_out_V_V_TVALID;
input   s_out_V_V_TREADY;
output   interrupt;

reg s_in_V_V_TREADY;
reg[31:0] s_out_V_V_TDATA;
reg s_out_V_V_TVALID;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
reg   [5:0] ap_CS_fsm = 6'b000000;
reg    ap_ready;
wire   [31:0] sourceAddress;
reg   [31:0] sourceAddress_in_sig;
reg   [31:0] sourceAddress_preg = 32'b00000000000000000000000000000000;
wire    sourceAddress_ap_vld;
reg    sourceAddress_ap_vld_in_sig;
reg    sourceAddress_ap_vld_preg = 1'b0;
wire   [127:0] key_in_V;
reg   [127:0] key_in_V_in_sig;
reg   [127:0] key_in_V_preg = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
wire    key_in_V_ap_vld;
reg    key_in_V_ap_vld_in_sig;
reg    key_in_V_ap_vld_preg = 1'b0;
wire   [127:0] iv_V;
reg   [127:0] iv_V_in_sig;
reg   [127:0] iv_V_preg = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
wire    iv_V_ap_vld;
reg    iv_V_ap_vld_in_sig;
reg    iv_V_ap_vld_preg = 1'b0;
wire   [31:0] destinationAddress;
reg   [31:0] destinationAddress_in_sig;
reg   [31:0] destinationAddress_preg = 32'b00000000000000000000000000000000;
wire    destinationAddress_ap_vld;
reg    destinationAddress_ap_vld_in_sig;
reg    destinationAddress_ap_vld_preg = 1'b0;
wire   [31:0] numBytes;
reg   [31:0] numBytes_in_sig;
reg   [31:0] numBytes_preg = 32'b00000000000000000000000000000000;
wire    numBytes_ap_vld;
reg    numBytes_ap_vld_in_sig;
reg    numBytes_ap_vld_preg = 1'b0;
wire   [31:0] mode;
reg   [31:0] mode_in_sig;
reg   [31:0] mode_preg = 32'b00000000000000000000000000000000;
wire    mode_ap_vld;
reg    mode_ap_vld_in_sig;
reg    mode_ap_vld_preg = 1'b0;
wire   [0:0] ap_return;
reg    m_mm2s_ctl_AWVALID;
wire    m_mm2s_ctl_AWREADY;
reg   [31:0] m_mm2s_ctl_AWADDR;
wire   [0:0] m_mm2s_ctl_AWID;
wire   [31:0] m_mm2s_ctl_AWLEN;
wire   [2:0] m_mm2s_ctl_AWSIZE;
wire   [1:0] m_mm2s_ctl_AWBURST;
wire   [1:0] m_mm2s_ctl_AWLOCK;
wire   [3:0] m_mm2s_ctl_AWCACHE;
wire   [2:0] m_mm2s_ctl_AWPROT;
wire   [3:0] m_mm2s_ctl_AWQOS;
wire   [3:0] m_mm2s_ctl_AWREGION;
wire   [0:0] m_mm2s_ctl_AWUSER;
reg    m_mm2s_ctl_WVALID;
wire    m_mm2s_ctl_WREADY;
reg   [31:0] m_mm2s_ctl_WDATA;
wire   [3:0] m_mm2s_ctl_WSTRB;
wire    m_mm2s_ctl_WLAST;
wire   [0:0] m_mm2s_ctl_WID;
wire   [0:0] m_mm2s_ctl_WUSER;
reg    m_mm2s_ctl_ARVALID;
wire    m_mm2s_ctl_ARREADY;
wire   [31:0] m_mm2s_ctl_ARADDR;
wire   [0:0] m_mm2s_ctl_ARID;
wire   [31:0] m_mm2s_ctl_ARLEN;
wire   [2:0] m_mm2s_ctl_ARSIZE;
wire   [1:0] m_mm2s_ctl_ARBURST;
wire   [1:0] m_mm2s_ctl_ARLOCK;
wire   [3:0] m_mm2s_ctl_ARCACHE;
wire   [2:0] m_mm2s_ctl_ARPROT;
wire   [3:0] m_mm2s_ctl_ARQOS;
wire   [3:0] m_mm2s_ctl_ARREGION;
wire   [0:0] m_mm2s_ctl_ARUSER;
wire    m_mm2s_ctl_RVALID;
reg    m_mm2s_ctl_RREADY;
wire   [31:0] m_mm2s_ctl_RDATA;
wire    m_mm2s_ctl_RLAST;
wire   [0:0] m_mm2s_ctl_RID;
wire   [0:0] m_mm2s_ctl_RUSER;
wire   [1:0] m_mm2s_ctl_RRESP;
wire    m_mm2s_ctl_BVALID;
reg    m_mm2s_ctl_BREADY;
wire   [1:0] m_mm2s_ctl_BRESP;
wire   [0:0] m_mm2s_ctl_BID;
wire   [0:0] m_mm2s_ctl_BUSER;
reg    m_s2mm_ctl_AWVALID;
wire    m_s2mm_ctl_AWREADY;
reg   [31:0] m_s2mm_ctl_AWADDR;
wire   [0:0] m_s2mm_ctl_AWID;
wire   [31:0] m_s2mm_ctl_AWLEN;
wire   [2:0] m_s2mm_ctl_AWSIZE;
wire   [1:0] m_s2mm_ctl_AWBURST;
wire   [1:0] m_s2mm_ctl_AWLOCK;
wire   [3:0] m_s2mm_ctl_AWCACHE;
wire   [2:0] m_s2mm_ctl_AWPROT;
wire   [3:0] m_s2mm_ctl_AWQOS;
wire   [3:0] m_s2mm_ctl_AWREGION;
wire   [0:0] m_s2mm_ctl_AWUSER;
reg    m_s2mm_ctl_WVALID;
wire    m_s2mm_ctl_WREADY;
reg   [31:0] m_s2mm_ctl_WDATA;
wire   [3:0] m_s2mm_ctl_WSTRB;
wire    m_s2mm_ctl_WLAST;
wire   [0:0] m_s2mm_ctl_WID;
wire   [0:0] m_s2mm_ctl_WUSER;
reg    m_s2mm_ctl_ARVALID;
wire    m_s2mm_ctl_ARREADY;
reg   [31:0] m_s2mm_ctl_ARADDR;
wire   [0:0] m_s2mm_ctl_ARID;
wire   [31:0] m_s2mm_ctl_ARLEN;
wire   [2:0] m_s2mm_ctl_ARSIZE;
wire   [1:0] m_s2mm_ctl_ARBURST;
wire   [1:0] m_s2mm_ctl_ARLOCK;
wire   [3:0] m_s2mm_ctl_ARCACHE;
wire   [2:0] m_s2mm_ctl_ARPROT;
wire   [3:0] m_s2mm_ctl_ARQOS;
wire   [3:0] m_s2mm_ctl_ARREGION;
wire   [0:0] m_s2mm_ctl_ARUSER;
wire    m_s2mm_ctl_RVALID;
reg    m_s2mm_ctl_RREADY;
wire   [31:0] m_s2mm_ctl_RDATA;
wire    m_s2mm_ctl_RLAST;
wire   [0:0] m_s2mm_ctl_RID;
wire   [0:0] m_s2mm_ctl_RUSER;
wire   [1:0] m_s2mm_ctl_RRESP;
wire    m_s2mm_ctl_BVALID;
reg    m_s2mm_ctl_BREADY;
wire   [1:0] m_s2mm_ctl_BRESP;
wire   [0:0] m_s2mm_ctl_BID;
wire   [0:0] m_s2mm_ctl_BUSER;
wire   [31:0] m_s2mm_ctl_addr_fu_421_p2;
reg   [31:0] m_s2mm_ctl_addr_reg_1331;
reg    ap_sig_ioackin_m_mm2s_ctl_ARREADY;
reg    ap_sig_ioackin_m_s2mm_ctl_ARREADY;
reg   [27:0] tmp_reg_1337;
reg    ap_sig_bdd_431;
wire   [0:0] tmp_3_fu_452_p2;
reg   [0:0] tmp_3_reg_1342;
wire   [7:0] tmp_331_fu_458_p1;
reg   [7:0] tmp_331_reg_1347;
wire   [7:0] tmp_332_fu_462_p1;
reg   [7:0] tmp_332_reg_1352;
reg   [7:0] p_Result_1_reg_1357;
reg   [7:0] p_Result_9_1_reg_1362;
reg   [7:0] p_Result_2_reg_1367;
reg   [7:0] p_Result_9_2_reg_1372;
reg   [7:0] p_Result_3_reg_1377;
reg   [7:0] p_Result_9_3_reg_1382;
reg   [7:0] p_Result_4_reg_1387;
reg   [7:0] p_Result_9_4_reg_1392;
reg   [7:0] p_Result_5_reg_1397;
reg   [7:0] p_Result_9_5_reg_1402;
reg   [7:0] p_Result_6_reg_1407;
reg   [7:0] p_Result_9_6_reg_1412;
reg   [7:0] p_Result_7_reg_1417;
reg   [7:0] p_Result_9_7_reg_1422;
reg   [7:0] p_Result_8_reg_1427;
reg   [7:0] p_Result_9_8_reg_1432;
reg   [7:0] p_Result_s_reg_1437;
reg   [7:0] p_Result_9_9_reg_1442;
reg   [7:0] p_Result_10_reg_1447;
reg   [7:0] p_Result_9_s_reg_1452;
reg   [7:0] p_Result_11_reg_1457;
reg   [7:0] p_Result_9_10_reg_1462;
reg   [7:0] p_Result_12_reg_1467;
reg   [7:0] p_Result_9_11_reg_1472;
reg   [7:0] p_Result_13_reg_1477;
reg   [7:0] p_Result_9_12_reg_1482;
reg   [7:0] p_Result_14_reg_1487;
reg   [7:0] p_Result_9_13_reg_1492;
reg   [7:0] p_Result_15_reg_1497;
reg   [7:0] p_Result_9_14_reg_1502;
wire   [0:0] tmp_11_fu_766_p2;
reg   [0:0] tmp_11_reg_1507;
wire   [0:0] tmp_14_fu_772_p2;
reg   [0:0] tmp_14_reg_1512;
reg   [28:0] tmp_39_reg_1519;
reg    ap_sig_bdd_509;
wire   [1:0] tmp_326_fu_788_p1;
reg   [1:0] tmp_326_reg_1524;
reg   [28:0] tmp_40_reg_1529;
wire   [1:0] tmp_327_fu_802_p1;
reg   [1:0] tmp_327_reg_1534;
reg   [30:0] tmp_41_reg_1539;
reg   [30:0] tmp_43_reg_1544;
reg   [18:0] tmp_42_reg_1549;
wire   [11:0] tmp_328_fu_870_p1;
reg   [11:0] tmp_328_reg_1554;
reg   [18:0] tmp_44_reg_1559;
wire   [11:0] tmp_330_fu_884_p1;
reg   [11:0] tmp_330_reg_1564;
wire   [28:0] numIterations_fu_912_p2;
reg   [28:0] numIterations_reg_1569;
reg    ap_sig_bdd_538;
reg    ap_sig_ioackin_m_mm2s_ctl_AWREADY;
reg    ap_sig_ioackin_m_mm2s_ctl_WREADY;
reg    ap_sig_ioackin_m_s2mm_ctl_AWREADY;
reg    ap_sig_ioackin_m_s2mm_ctl_WREADY;
wire   [27:0] tmp_329_fu_925_p1;
reg   [27:0] tmp_329_reg_1579;
wire   [127:0] key_local_V_0_s_fu_959_p17;
reg   [127:0] key_local_V_0_s_reg_1599;
wire   [127:0] iv_local_V_s_fu_979_p17;
wire   [127:0] tmp_1_fu_999_p1;
reg   [127:0] tmp_1_reg_1609;
wire   [127:0] iterations_V_fu_1007_p2;
reg   [127:0] iterations_V_reg_1617;
wire   [0:0] tmp_10_fu_1002_p2;
reg    ap_sig_bdd_583;
wire   [7:0] p_Repl2_3_fu_1013_p1;
reg   [7:0] p_Repl2_3_reg_1622;
wire   [7:0] grp_fu_391_p4;
reg   [7:0] p_Repl2_2_reg_1627;
wire   [7:0] grp_fu_401_p4;
reg   [7:0] p_Repl2_1_reg_1632;
wire   [7:0] grp_fu_411_p4;
reg   [7:0] p_Repl2_s_reg_1637;
wire   [0:0] tmp_13_fu_1017_p2;
reg   [0:0] tmp_13_reg_1642;
wire   [7:0] p_Repl2_7_fu_1023_p1;
reg   [7:0] p_Repl2_7_reg_1647;
reg   [7:0] p_Repl2_6_reg_1652;
reg   [7:0] p_Repl2_5_reg_1657;
reg   [7:0] p_Repl2_4_reg_1662;
wire   [7:0] p_Repl2_11_fu_1027_p1;
reg   [7:0] p_Repl2_11_reg_1667;
reg   [7:0] p_Repl2_10_reg_1672;
reg   [7:0] p_Repl2_9_reg_1677;
reg   [7:0] p_Repl2_8_reg_1682;
wire   [127:0] r_V_1_fu_1096_p3;
reg   [127:0] r_V_1_reg_1687;
wire   [127:0] iv_local_V_1_fu_1103_p3;
reg   [127:0] iv_local_V_1_reg_1692;
wire   [127:0] grp_aestest_fu_337_ap_return;
reg   [127:0] encrypted_data_V_reg_1697;
reg   [7:0] p_Repl2_23_reg_1702;
reg    ap_sig_ioackin_s_out_V_V_TREADY;
reg   [7:0] p_Repl2_20_reg_1707;
reg   [7:0] p_Repl2_21_reg_1712;
reg   [7:0] p_Repl2_22_reg_1717;
reg   [7:0] p_Repl2_27_reg_1722;
reg   [7:0] p_Repl2_24_reg_1727;
reg   [7:0] p_Repl2_25_reg_1732;
reg   [7:0] p_Repl2_26_reg_1737;
wire   [7:0] p_Repl2_31_fu_1247_p1;
reg   [7:0] p_Repl2_31_reg_1742;
reg   [7:0] p_Repl2_30_reg_1747;
reg   [7:0] p_Repl2_28_reg_1752;
reg   [7:0] p_Repl2_29_reg_1757;
reg    grp_aestest_fu_337_ap_rst;
wire    grp_aestest_fu_337_ap_start;
wire    grp_aestest_fu_337_ap_done;
wire    grp_aestest_fu_337_ap_idle;
wire    grp_aestest_fu_337_ap_ready;
reg    grp_aestest_fu_337_ap_ce;
wire   [127:0] grp_aestest_fu_337_inptext_V_read;
wire   [127:0] grp_aestest_fu_337_key_V_read;
reg   [127:0] aes_data_V_3_reg_315;
reg   [127:0] t_V_1_reg_325;
reg    grp_aestest_fu_337_ap_start_ap_start_reg = 1'b0;
reg   [5:0] ap_NS_fsm;
reg    ap_reg_ioackin_m_mm2s_ctl_ARREADY = 1'b0;
reg    ap_reg_ioackin_m_mm2s_ctl_AWREADY = 1'b0;
reg    ap_reg_ioackin_m_mm2s_ctl_WREADY = 1'b0;
wire   [31:0] tmp_5_fu_806_p4;
reg    ap_sig_bdd_2232;
wire   [31:0] tmp_7_fu_844_p3;
wire   [31:0] tmp_8_fu_888_p4;
wire   [31:0] read_length_fu_936_p3;
reg    ap_reg_ioackin_m_s2mm_ctl_ARREADY = 1'b0;
reg    ap_reg_ioackin_m_s2mm_ctl_AWREADY = 1'b0;
reg    ap_reg_ioackin_m_s2mm_ctl_WREADY = 1'b0;
wire   [31:0] tmp_6_fu_815_p4;
wire   [31:0] tmp_9_fu_852_p3;
wire   [31:0] tmp_s_fu_897_p4;
reg   [127:0] rhs_V_fu_220;
wire   [127:0] encrypted_data_V_1_fu_1110_p2;
reg   [31:0] sourceAddress_assign_fu_224;
reg   [31:0] destinationAddress_assign_fu_228;
wire   [31:0] p_Result_9_fu_1154_p5;
wire   [31:0] p_Result_16_fu_1286_p5;
wire   [31:0] p_Result_17_fu_1295_p5;
wire   [31:0] p_Result_18_fu_1304_p5;
reg    ap_reg_ioackin_s_out_V_V_TREADY = 1'b0;
wire   [3:0] tmp_325_fu_448_p1;
wire   [28:0] tmp_cast_fu_906_p1;
wire   [28:0] tmp_4_cast_fu_909_p1;
wire   [7:0] p_Repl2_15_fu_1034_p1;
wire   [127:0] p_Result_s_101_fu_1038_p17;
wire   [127:0] storemerge_v_fu_1062_p3;
wire   [127:0] r_V_fu_1069_p2;
wire   [127:0] rhs_V_Result_s_fu_1075_p3;
wire   [127:0] iv_local_V_fu_1090_p2;
wire   [7:0] p_Repl2_19_fu_1114_p4;
wire   [7:0] p_Repl2_16_fu_1124_p4;
wire   [7:0] p_Repl2_17_fu_1134_p4;
wire   [7:0] p_Repl2_18_fu_1144_p4;


aes_AXILiteS_s_axi #(
    .C_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
aes_AXILiteS_s_axi_U(
    .AWVALID( s_axi_AXILiteS_AWVALID ),
    .AWREADY( s_axi_AXILiteS_AWREADY ),
    .AWADDR( s_axi_AXILiteS_AWADDR ),
    .WVALID( s_axi_AXILiteS_WVALID ),
    .WREADY( s_axi_AXILiteS_WREADY ),
    .WDATA( s_axi_AXILiteS_WDATA ),
    .WSTRB( s_axi_AXILiteS_WSTRB ),
    .ARVALID( s_axi_AXILiteS_ARVALID ),
    .ARREADY( s_axi_AXILiteS_ARREADY ),
    .ARADDR( s_axi_AXILiteS_ARADDR ),
    .RVALID( s_axi_AXILiteS_RVALID ),
    .RREADY( s_axi_AXILiteS_RREADY ),
    .RDATA( s_axi_AXILiteS_RDATA ),
    .RRESP( s_axi_AXILiteS_RRESP ),
    .BVALID( s_axi_AXILiteS_BVALID ),
    .BREADY( s_axi_AXILiteS_BREADY ),
    .BRESP( s_axi_AXILiteS_BRESP ),
    .ACLK( ap_clk ),
    .ARESETN( ap_rst_n ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .ap_return( ap_return ),
    .sourceAddress( sourceAddress ),
    .sourceAddress_ap_vld( sourceAddress_ap_vld ),
    .key_in_V( key_in_V ),
    .key_in_V_ap_vld( key_in_V_ap_vld ),
    .iv_V( iv_V ),
    .iv_V_ap_vld( iv_V_ap_vld ),
    .destinationAddress( destinationAddress ),
    .destinationAddress_ap_vld( destinationAddress_ap_vld ),
    .numBytes( numBytes ),
    .numBytes_ap_vld( numBytes_ap_vld ),
    .mode( mode ),
    .mode_ap_vld( mode_ap_vld )
);

aes_m_mm2s_ctl_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 2 ),
    .C_ID_WIDTH( C_M_AXI_M_MM2S_CTL_ID_WIDTH ),
    .C_ADDR_WIDTH( C_M_AXI_M_MM2S_CTL_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_M_AXI_M_MM2S_CTL_DATA_WIDTH ),
    .C_AWUSER_WIDTH( C_M_AXI_M_MM2S_CTL_AWUSER_WIDTH ),
    .C_ARUSER_WIDTH( C_M_AXI_M_MM2S_CTL_ARUSER_WIDTH ),
    .C_WUSER_WIDTH( C_M_AXI_M_MM2S_CTL_WUSER_WIDTH ),
    .C_RUSER_WIDTH( C_M_AXI_M_MM2S_CTL_RUSER_WIDTH ),
    .C_BUSER_WIDTH( C_M_AXI_M_MM2S_CTL_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_M_MM2S_CTL_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_M_MM2S_CTL_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_M_MM2S_CTL_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_M_MM2S_CTL_CACHE_VALUE ))
aes_m_mm2s_ctl_m_axi_U(
    .AWVALID( m_axi_m_mm2s_ctl_AWVALID ),
    .AWREADY( m_axi_m_mm2s_ctl_AWREADY ),
    .AWADDR( m_axi_m_mm2s_ctl_AWADDR ),
    .AWID( m_axi_m_mm2s_ctl_AWID ),
    .AWLEN( m_axi_m_mm2s_ctl_AWLEN ),
    .AWSIZE( m_axi_m_mm2s_ctl_AWSIZE ),
    .AWBURST( m_axi_m_mm2s_ctl_AWBURST ),
    .AWLOCK( m_axi_m_mm2s_ctl_AWLOCK ),
    .AWCACHE( m_axi_m_mm2s_ctl_AWCACHE ),
    .AWPROT( m_axi_m_mm2s_ctl_AWPROT ),
    .AWQOS( m_axi_m_mm2s_ctl_AWQOS ),
    .AWREGION( m_axi_m_mm2s_ctl_AWREGION ),
    .AWUSER( m_axi_m_mm2s_ctl_AWUSER ),
    .WVALID( m_axi_m_mm2s_ctl_WVALID ),
    .WREADY( m_axi_m_mm2s_ctl_WREADY ),
    .WDATA( m_axi_m_mm2s_ctl_WDATA ),
    .WSTRB( m_axi_m_mm2s_ctl_WSTRB ),
    .WLAST( m_axi_m_mm2s_ctl_WLAST ),
    .WID( m_axi_m_mm2s_ctl_WID ),
    .WUSER( m_axi_m_mm2s_ctl_WUSER ),
    .ARVALID( m_axi_m_mm2s_ctl_ARVALID ),
    .ARREADY( m_axi_m_mm2s_ctl_ARREADY ),
    .ARADDR( m_axi_m_mm2s_ctl_ARADDR ),
    .ARID( m_axi_m_mm2s_ctl_ARID ),
    .ARLEN( m_axi_m_mm2s_ctl_ARLEN ),
    .ARSIZE( m_axi_m_mm2s_ctl_ARSIZE ),
    .ARBURST( m_axi_m_mm2s_ctl_ARBURST ),
    .ARLOCK( m_axi_m_mm2s_ctl_ARLOCK ),
    .ARCACHE( m_axi_m_mm2s_ctl_ARCACHE ),
    .ARPROT( m_axi_m_mm2s_ctl_ARPROT ),
    .ARQOS( m_axi_m_mm2s_ctl_ARQOS ),
    .ARREGION( m_axi_m_mm2s_ctl_ARREGION ),
    .ARUSER( m_axi_m_mm2s_ctl_ARUSER ),
    .RVALID( m_axi_m_mm2s_ctl_RVALID ),
    .RREADY( m_axi_m_mm2s_ctl_RREADY ),
    .RDATA( m_axi_m_mm2s_ctl_RDATA ),
    .RLAST( m_axi_m_mm2s_ctl_RLAST ),
    .RID( m_axi_m_mm2s_ctl_RID ),
    .RUSER( m_axi_m_mm2s_ctl_RUSER ),
    .RRESP( m_axi_m_mm2s_ctl_RRESP ),
    .BVALID( m_axi_m_mm2s_ctl_BVALID ),
    .BREADY( m_axi_m_mm2s_ctl_BREADY ),
    .BRESP( m_axi_m_mm2s_ctl_BRESP ),
    .BID( m_axi_m_mm2s_ctl_BID ),
    .BUSER( m_axi_m_mm2s_ctl_BUSER ),
    .ACLK( ap_clk ),
    .ARESETN( ap_rst_n ),
    .I_ARVALID( m_mm2s_ctl_ARVALID ),
    .I_ARREADY( m_mm2s_ctl_ARREADY ),
    .I_ARADDR( m_mm2s_ctl_ARADDR ),
    .I_ARID( m_mm2s_ctl_ARID ),
    .I_ARLEN( m_mm2s_ctl_ARLEN ),
    .I_ARSIZE( m_mm2s_ctl_ARSIZE ),
    .I_ARLOCK( m_mm2s_ctl_ARLOCK ),
    .I_ARCACHE( m_mm2s_ctl_ARCACHE ),
    .I_ARQOS( m_mm2s_ctl_ARQOS ),
    .I_ARPROT( m_mm2s_ctl_ARPROT ),
    .I_ARUSER( m_mm2s_ctl_ARUSER ),
    .I_ARBURST( m_mm2s_ctl_ARBURST ),
    .I_ARREGION( m_mm2s_ctl_ARREGION ),
    .I_RVALID( m_mm2s_ctl_RVALID ),
    .I_RREADY( m_mm2s_ctl_RREADY ),
    .I_RDATA( m_mm2s_ctl_RDATA ),
    .I_RID( m_mm2s_ctl_RID ),
    .I_RUSER( m_mm2s_ctl_RUSER ),
    .I_RRESP( m_mm2s_ctl_RRESP ),
    .I_RLAST( m_mm2s_ctl_RLAST ),
    .I_AWVALID( m_mm2s_ctl_AWVALID ),
    .I_AWREADY( m_mm2s_ctl_AWREADY ),
    .I_AWADDR( m_mm2s_ctl_AWADDR ),
    .I_AWID( m_mm2s_ctl_AWID ),
    .I_AWLEN( m_mm2s_ctl_AWLEN ),
    .I_AWSIZE( m_mm2s_ctl_AWSIZE ),
    .I_AWLOCK( m_mm2s_ctl_AWLOCK ),
    .I_AWCACHE( m_mm2s_ctl_AWCACHE ),
    .I_AWQOS( m_mm2s_ctl_AWQOS ),
    .I_AWPROT( m_mm2s_ctl_AWPROT ),
    .I_AWUSER( m_mm2s_ctl_AWUSER ),
    .I_AWBURST( m_mm2s_ctl_AWBURST ),
    .I_AWREGION( m_mm2s_ctl_AWREGION ),
    .I_WVALID( m_mm2s_ctl_WVALID ),
    .I_WREADY( m_mm2s_ctl_WREADY ),
    .I_WDATA( m_mm2s_ctl_WDATA ),
    .I_WID( m_mm2s_ctl_WID ),
    .I_WUSER( m_mm2s_ctl_WUSER ),
    .I_WLAST( m_mm2s_ctl_WLAST ),
    .I_WSTRB( m_mm2s_ctl_WSTRB ),
    .I_BVALID( m_mm2s_ctl_BVALID ),
    .I_BREADY( m_mm2s_ctl_BREADY ),
    .I_BRESP( m_mm2s_ctl_BRESP ),
    .I_BID( m_mm2s_ctl_BID ),
    .I_BUSER( m_mm2s_ctl_BUSER )
);

aes_m_s2mm_ctl_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 2 ),
    .C_ID_WIDTH( C_M_AXI_M_S2MM_CTL_ID_WIDTH ),
    .C_ADDR_WIDTH( C_M_AXI_M_S2MM_CTL_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_M_AXI_M_S2MM_CTL_DATA_WIDTH ),
    .C_AWUSER_WIDTH( C_M_AXI_M_S2MM_CTL_AWUSER_WIDTH ),
    .C_ARUSER_WIDTH( C_M_AXI_M_S2MM_CTL_ARUSER_WIDTH ),
    .C_WUSER_WIDTH( C_M_AXI_M_S2MM_CTL_WUSER_WIDTH ),
    .C_RUSER_WIDTH( C_M_AXI_M_S2MM_CTL_RUSER_WIDTH ),
    .C_BUSER_WIDTH( C_M_AXI_M_S2MM_CTL_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_M_S2MM_CTL_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_M_S2MM_CTL_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_M_S2MM_CTL_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_M_S2MM_CTL_CACHE_VALUE ))
aes_m_s2mm_ctl_m_axi_U(
    .AWVALID( m_axi_m_s2mm_ctl_AWVALID ),
    .AWREADY( m_axi_m_s2mm_ctl_AWREADY ),
    .AWADDR( m_axi_m_s2mm_ctl_AWADDR ),
    .AWID( m_axi_m_s2mm_ctl_AWID ),
    .AWLEN( m_axi_m_s2mm_ctl_AWLEN ),
    .AWSIZE( m_axi_m_s2mm_ctl_AWSIZE ),
    .AWBURST( m_axi_m_s2mm_ctl_AWBURST ),
    .AWLOCK( m_axi_m_s2mm_ctl_AWLOCK ),
    .AWCACHE( m_axi_m_s2mm_ctl_AWCACHE ),
    .AWPROT( m_axi_m_s2mm_ctl_AWPROT ),
    .AWQOS( m_axi_m_s2mm_ctl_AWQOS ),
    .AWREGION( m_axi_m_s2mm_ctl_AWREGION ),
    .AWUSER( m_axi_m_s2mm_ctl_AWUSER ),
    .WVALID( m_axi_m_s2mm_ctl_WVALID ),
    .WREADY( m_axi_m_s2mm_ctl_WREADY ),
    .WDATA( m_axi_m_s2mm_ctl_WDATA ),
    .WSTRB( m_axi_m_s2mm_ctl_WSTRB ),
    .WLAST( m_axi_m_s2mm_ctl_WLAST ),
    .WID( m_axi_m_s2mm_ctl_WID ),
    .WUSER( m_axi_m_s2mm_ctl_WUSER ),
    .ARVALID( m_axi_m_s2mm_ctl_ARVALID ),
    .ARREADY( m_axi_m_s2mm_ctl_ARREADY ),
    .ARADDR( m_axi_m_s2mm_ctl_ARADDR ),
    .ARID( m_axi_m_s2mm_ctl_ARID ),
    .ARLEN( m_axi_m_s2mm_ctl_ARLEN ),
    .ARSIZE( m_axi_m_s2mm_ctl_ARSIZE ),
    .ARBURST( m_axi_m_s2mm_ctl_ARBURST ),
    .ARLOCK( m_axi_m_s2mm_ctl_ARLOCK ),
    .ARCACHE( m_axi_m_s2mm_ctl_ARCACHE ),
    .ARPROT( m_axi_m_s2mm_ctl_ARPROT ),
    .ARQOS( m_axi_m_s2mm_ctl_ARQOS ),
    .ARREGION( m_axi_m_s2mm_ctl_ARREGION ),
    .ARUSER( m_axi_m_s2mm_ctl_ARUSER ),
    .RVALID( m_axi_m_s2mm_ctl_RVALID ),
    .RREADY( m_axi_m_s2mm_ctl_RREADY ),
    .RDATA( m_axi_m_s2mm_ctl_RDATA ),
    .RLAST( m_axi_m_s2mm_ctl_RLAST ),
    .RID( m_axi_m_s2mm_ctl_RID ),
    .RUSER( m_axi_m_s2mm_ctl_RUSER ),
    .RRESP( m_axi_m_s2mm_ctl_RRESP ),
    .BVALID( m_axi_m_s2mm_ctl_BVALID ),
    .BREADY( m_axi_m_s2mm_ctl_BREADY ),
    .BRESP( m_axi_m_s2mm_ctl_BRESP ),
    .BID( m_axi_m_s2mm_ctl_BID ),
    .BUSER( m_axi_m_s2mm_ctl_BUSER ),
    .ACLK( ap_clk ),
    .ARESETN( ap_rst_n ),
    .I_ARVALID( m_s2mm_ctl_ARVALID ),
    .I_ARREADY( m_s2mm_ctl_ARREADY ),
    .I_ARADDR( m_s2mm_ctl_ARADDR ),
    .I_ARID( m_s2mm_ctl_ARID ),
    .I_ARLEN( m_s2mm_ctl_ARLEN ),
    .I_ARSIZE( m_s2mm_ctl_ARSIZE ),
    .I_ARLOCK( m_s2mm_ctl_ARLOCK ),
    .I_ARCACHE( m_s2mm_ctl_ARCACHE ),
    .I_ARQOS( m_s2mm_ctl_ARQOS ),
    .I_ARPROT( m_s2mm_ctl_ARPROT ),
    .I_ARUSER( m_s2mm_ctl_ARUSER ),
    .I_ARBURST( m_s2mm_ctl_ARBURST ),
    .I_ARREGION( m_s2mm_ctl_ARREGION ),
    .I_RVALID( m_s2mm_ctl_RVALID ),
    .I_RREADY( m_s2mm_ctl_RREADY ),
    .I_RDATA( m_s2mm_ctl_RDATA ),
    .I_RID( m_s2mm_ctl_RID ),
    .I_RUSER( m_s2mm_ctl_RUSER ),
    .I_RRESP( m_s2mm_ctl_RRESP ),
    .I_RLAST( m_s2mm_ctl_RLAST ),
    .I_AWVALID( m_s2mm_ctl_AWVALID ),
    .I_AWREADY( m_s2mm_ctl_AWREADY ),
    .I_AWADDR( m_s2mm_ctl_AWADDR ),
    .I_AWID( m_s2mm_ctl_AWID ),
    .I_AWLEN( m_s2mm_ctl_AWLEN ),
    .I_AWSIZE( m_s2mm_ctl_AWSIZE ),
    .I_AWLOCK( m_s2mm_ctl_AWLOCK ),
    .I_AWCACHE( m_s2mm_ctl_AWCACHE ),
    .I_AWQOS( m_s2mm_ctl_AWQOS ),
    .I_AWPROT( m_s2mm_ctl_AWPROT ),
    .I_AWUSER( m_s2mm_ctl_AWUSER ),
    .I_AWBURST( m_s2mm_ctl_AWBURST ),
    .I_AWREGION( m_s2mm_ctl_AWREGION ),
    .I_WVALID( m_s2mm_ctl_WVALID ),
    .I_WREADY( m_s2mm_ctl_WREADY ),
    .I_WDATA( m_s2mm_ctl_WDATA ),
    .I_WID( m_s2mm_ctl_WID ),
    .I_WUSER( m_s2mm_ctl_WUSER ),
    .I_WLAST( m_s2mm_ctl_WLAST ),
    .I_WSTRB( m_s2mm_ctl_WSTRB ),
    .I_BVALID( m_s2mm_ctl_BVALID ),
    .I_BREADY( m_s2mm_ctl_BREADY ),
    .I_BRESP( m_s2mm_ctl_BRESP ),
    .I_BID( m_s2mm_ctl_BID ),
    .I_BUSER( m_s2mm_ctl_BUSER )
);

aestest grp_aestest_fu_337(
    .ap_clk( ap_clk ),
    .ap_rst( grp_aestest_fu_337_ap_rst ),
    .ap_start( grp_aestest_fu_337_ap_start ),
    .ap_done( grp_aestest_fu_337_ap_done ),
    .ap_idle( grp_aestest_fu_337_ap_idle ),
    .ap_ready( grp_aestest_fu_337_ap_ready ),
    .ap_ce( grp_aestest_fu_337_ap_ce ),
    .inptext_V_read( grp_aestest_fu_337_inptext_V_read ),
    .key_V_read( grp_aestest_fu_337_key_V_read ),
    .ap_return( grp_aestest_fu_337_ap_return )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_m_mm2s_ctl_ARREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_m_mm2s_ctl_ARREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~((ap_start == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY))) | ((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_431)) | ((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_538)) | ((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_2232)) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_538) & (ap_ST_st13_fsm_12 == ap_CS_fsm)))) begin
            ap_reg_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_0;
        end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == m_mm2s_ctl_ARREADY) & ~(ap_start == ap_const_logic_0)) | ((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == m_mm2s_ctl_ARREADY) & ~ap_sig_bdd_431) | (~ap_sig_bdd_538 & (ap_const_logic_1 == m_mm2s_ctl_ARREADY) & (ap_ST_st7_fsm_6 == ap_CS_fsm)) | ((ap_const_logic_1 == m_mm2s_ctl_ARREADY) & (ap_ST_st10_fsm_9 == ap_CS_fsm) & ~ap_sig_bdd_2232) | (~ap_sig_bdd_538 & (ap_const_logic_1 == m_mm2s_ctl_ARREADY) & (ap_ST_st13_fsm_12 == ap_CS_fsm)))) begin
            ap_reg_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ioackin_m_mm2s_ctl_AWREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_m_mm2s_ctl_AWREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~(ap_sig_bdd_538 | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) | (~(ap_sig_bdd_538 | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st17_fsm_16 == ap_CS_fsm)) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st6_fsm_5 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st9_fsm_8 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st12_fsm_11 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st15_fsm_14 == ap_CS_fsm)))) begin
            ap_reg_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_0;
        end else if ((((ap_const_logic_1 == m_mm2s_ctl_AWREADY) & (ap_ST_st3_fsm_2 == ap_CS_fsm)) | ((ap_const_logic_1 == m_mm2s_ctl_AWREADY) & (ap_ST_st6_fsm_5 == ap_CS_fsm)) | ((ap_const_logic_1 == m_mm2s_ctl_AWREADY) & (ap_ST_st9_fsm_8 == ap_CS_fsm)) | ((ap_const_logic_1 == m_mm2s_ctl_AWREADY) & (ap_ST_st12_fsm_11 == ap_CS_fsm)) | ((ap_const_logic_1 == m_mm2s_ctl_AWREADY) & (ap_ST_st15_fsm_14 == ap_CS_fsm)) | ((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_1 == m_mm2s_ctl_AWREADY)) | ((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_1 == m_mm2s_ctl_AWREADY)))) begin
            ap_reg_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ioackin_m_mm2s_ctl_WREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_m_mm2s_ctl_WREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~(ap_sig_bdd_538 | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) | (~(ap_sig_bdd_538 | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st17_fsm_16 == ap_CS_fsm)) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st6_fsm_5 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st9_fsm_8 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st12_fsm_11 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st15_fsm_14 == ap_CS_fsm)))) begin
            ap_reg_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_0;
        end else if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == m_mm2s_ctl_WREADY)) | ((ap_const_logic_1 == m_mm2s_ctl_WREADY) & (ap_ST_st6_fsm_5 == ap_CS_fsm)) | ((ap_const_logic_1 == m_mm2s_ctl_WREADY) & (ap_ST_st9_fsm_8 == ap_CS_fsm)) | ((ap_const_logic_1 == m_mm2s_ctl_WREADY) & (ap_ST_st12_fsm_11 == ap_CS_fsm)) | ((ap_const_logic_1 == m_mm2s_ctl_WREADY) & (ap_ST_st15_fsm_14 == ap_CS_fsm)) | ((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_1 == m_mm2s_ctl_WREADY)) | ((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_1 == m_mm2s_ctl_WREADY)))) begin
            ap_reg_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ioackin_m_s2mm_ctl_ARREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_m_s2mm_ctl_ARREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~((ap_start == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY))) | ((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_431)) | ((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_538)) | ((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_2232)) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_538) & (ap_ST_st13_fsm_12 == ap_CS_fsm)))) begin
            ap_reg_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_0;
        end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (ap_const_logic_1 == m_s2mm_ctl_ARREADY)) | ((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~ap_sig_bdd_431 & (ap_const_logic_1 == m_s2mm_ctl_ARREADY)) | (~ap_sig_bdd_538 & (ap_ST_st7_fsm_6 == ap_CS_fsm) & (ap_const_logic_1 == m_s2mm_ctl_ARREADY)) | ((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~ap_sig_bdd_2232 & (ap_const_logic_1 == m_s2mm_ctl_ARREADY)) | (~ap_sig_bdd_538 & (ap_ST_st13_fsm_12 == ap_CS_fsm) & (ap_const_logic_1 == m_s2mm_ctl_ARREADY)))) begin
            ap_reg_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ioackin_m_s2mm_ctl_AWREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_m_s2mm_ctl_AWREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~(ap_sig_bdd_538 | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) | (~(ap_sig_bdd_538 | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st17_fsm_16 == ap_CS_fsm)) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st6_fsm_5 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st9_fsm_8 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st12_fsm_11 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st15_fsm_14 == ap_CS_fsm)))) begin
            ap_reg_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_0;
        end else if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == m_s2mm_ctl_AWREADY)) | ((ap_ST_st6_fsm_5 == ap_CS_fsm) & (ap_const_logic_1 == m_s2mm_ctl_AWREADY)) | ((ap_ST_st9_fsm_8 == ap_CS_fsm) & (ap_const_logic_1 == m_s2mm_ctl_AWREADY)) | ((ap_ST_st12_fsm_11 == ap_CS_fsm) & (ap_const_logic_1 == m_s2mm_ctl_AWREADY)) | ((ap_ST_st15_fsm_14 == ap_CS_fsm) & (ap_const_logic_1 == m_s2mm_ctl_AWREADY)) | ((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_1 == m_s2mm_ctl_AWREADY)) | ((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_1 == m_s2mm_ctl_AWREADY)))) begin
            ap_reg_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ioackin_m_s2mm_ctl_WREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_m_s2mm_ctl_WREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~(ap_sig_bdd_538 | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) | (~(ap_sig_bdd_538 | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st17_fsm_16 == ap_CS_fsm)) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st6_fsm_5 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st9_fsm_8 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st12_fsm_11 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st15_fsm_14 == ap_CS_fsm)))) begin
            ap_reg_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_0;
        end else if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == m_s2mm_ctl_WREADY)) | ((ap_ST_st6_fsm_5 == ap_CS_fsm) & (ap_const_logic_1 == m_s2mm_ctl_WREADY)) | ((ap_ST_st9_fsm_8 == ap_CS_fsm) & (ap_const_logic_1 == m_s2mm_ctl_WREADY)) | ((ap_ST_st12_fsm_11 == ap_CS_fsm) & (ap_const_logic_1 == m_s2mm_ctl_WREADY)) | ((ap_ST_st15_fsm_14 == ap_CS_fsm) & (ap_const_logic_1 == m_s2mm_ctl_WREADY)) | ((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_1 == m_s2mm_ctl_WREADY)) | ((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_1 == m_s2mm_ctl_WREADY)))) begin
            ap_reg_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ioackin_s_out_V_V_TREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_s_out_V_V_TREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_s_out_V_V_TREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st42_fsm_41 == ap_CS_fsm) & ~(ap_const_logic_0 == ap_sig_ioackin_s_out_V_V_TREADY)) | (~(ap_const_logic_0 == ap_sig_ioackin_s_out_V_V_TREADY) & (ap_ST_st45_fsm_44 == ap_CS_fsm)) | (~(ap_const_logic_0 == ap_sig_ioackin_s_out_V_V_TREADY) & (ap_ST_st43_fsm_42 == ap_CS_fsm)) | (~(ap_const_logic_0 == ap_sig_ioackin_s_out_V_V_TREADY) & (ap_ST_st44_fsm_43 == ap_CS_fsm)))) begin
            ap_reg_ioackin_s_out_V_V_TREADY <= ap_const_logic_0;
        end else if ((((ap_ST_st42_fsm_41 == ap_CS_fsm) & (ap_const_logic_1 == s_out_V_V_TREADY)) | ((ap_ST_st43_fsm_42 == ap_CS_fsm) & (ap_const_logic_1 == s_out_V_V_TREADY)) | ((ap_ST_st44_fsm_43 == ap_CS_fsm) & (ap_const_logic_1 == s_out_V_V_TREADY)) | ((ap_ST_st45_fsm_44 == ap_CS_fsm) & (ap_const_logic_1 == s_out_V_V_TREADY)))) begin
            ap_reg_ioackin_s_out_V_V_TREADY <= ap_const_logic_1;
        end
    end
end

/// destinationAddress_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_destinationAddress_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        destinationAddress_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st19_fsm_18 == ap_CS_fsm) & (tmp_10_fu_1002_p2 == ap_const_lv1_0) & ~ap_sig_bdd_583)) begin
            destinationAddress_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == destinationAddress_ap_vld))) begin
            destinationAddress_ap_vld_preg <= destinationAddress_ap_vld;
        end
    end
end

/// destinationAddress_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_destinationAddress_preg
    if (ap_rst_n == 1'b0) begin
        destinationAddress_preg <= ap_const_lv32_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == destinationAddress_ap_vld))) begin
            destinationAddress_preg <= destinationAddress;
        end
    end
end

/// grp_aestest_fu_337_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_aestest_fu_337_ap_start_ap_start_reg
    if (ap_rst_n == 1'b0) begin
        grp_aestest_fu_337_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st21_fsm_20 == ap_CS_fsm) & (ap_ST_st22_fsm_21 == ap_NS_fsm))) begin
            grp_aestest_fu_337_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_aestest_fu_337_ap_ready)) begin
            grp_aestest_fu_337_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// iv_V_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_iv_V_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        iv_V_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st19_fsm_18 == ap_CS_fsm) & (tmp_10_fu_1002_p2 == ap_const_lv1_0) & ~ap_sig_bdd_583)) begin
            iv_V_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == iv_V_ap_vld))) begin
            iv_V_ap_vld_preg <= iv_V_ap_vld;
        end
    end
end

/// iv_V_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_iv_V_preg
    if (ap_rst_n == 1'b0) begin
        iv_V_preg <= ap_const_lv128_lc_1;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == iv_V_ap_vld))) begin
            iv_V_preg <= iv_V;
        end
    end
end

/// key_in_V_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_key_in_V_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        key_in_V_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st19_fsm_18 == ap_CS_fsm) & (tmp_10_fu_1002_p2 == ap_const_lv1_0) & ~ap_sig_bdd_583)) begin
            key_in_V_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == key_in_V_ap_vld))) begin
            key_in_V_ap_vld_preg <= key_in_V_ap_vld;
        end
    end
end

/// key_in_V_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_key_in_V_preg
    if (ap_rst_n == 1'b0) begin
        key_in_V_preg <= ap_const_lv128_lc_1;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == key_in_V_ap_vld))) begin
            key_in_V_preg <= key_in_V;
        end
    end
end

/// mode_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_mode_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        mode_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st19_fsm_18 == ap_CS_fsm) & (tmp_10_fu_1002_p2 == ap_const_lv1_0) & ~ap_sig_bdd_583)) begin
            mode_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == mode_ap_vld))) begin
            mode_ap_vld_preg <= mode_ap_vld;
        end
    end
end

/// mode_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_mode_preg
    if (ap_rst_n == 1'b0) begin
        mode_preg <= ap_const_lv32_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == mode_ap_vld))) begin
            mode_preg <= mode;
        end
    end
end

/// numBytes_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_numBytes_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        numBytes_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st19_fsm_18 == ap_CS_fsm) & (tmp_10_fu_1002_p2 == ap_const_lv1_0) & ~ap_sig_bdd_583)) begin
            numBytes_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == numBytes_ap_vld))) begin
            numBytes_ap_vld_preg <= numBytes_ap_vld;
        end
    end
end

/// numBytes_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_numBytes_preg
    if (ap_rst_n == 1'b0) begin
        numBytes_preg <= ap_const_lv32_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == numBytes_ap_vld))) begin
            numBytes_preg <= numBytes;
        end
    end
end

/// sourceAddress_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_sourceAddress_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        sourceAddress_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st19_fsm_18 == ap_CS_fsm) & (tmp_10_fu_1002_p2 == ap_const_lv1_0) & ~ap_sig_bdd_583)) begin
            sourceAddress_ap_vld_preg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == sourceAddress_ap_vld) & ~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)))) begin
            sourceAddress_ap_vld_preg <= sourceAddress_ap_vld;
        end
    end
end

/// sourceAddress_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_sourceAddress_preg
    if (ap_rst_n == 1'b0) begin
        sourceAddress_preg <= ap_const_lv32_0;
    end else begin
        if (((ap_const_logic_1 == sourceAddress_ap_vld) & ~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)))) begin
            sourceAddress_preg <= sourceAddress;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_const_logic_0 == ap_sig_ioackin_s_out_V_V_TREADY) & (ap_ST_st45_fsm_44 == ap_CS_fsm))) begin
        aes_data_V_3_reg_315 <= iv_local_V_1_reg_1692;
    end else if (((ap_ST_st18_fsm_17 == ap_CS_fsm) & ~ap_sig_bdd_538)) begin
        aes_data_V_3_reg_315 <= iv_local_V_s_fu_979_p17;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_const_logic_0 == ap_sig_ioackin_s_out_V_V_TREADY) & (ap_ST_st45_fsm_44 == ap_CS_fsm))) begin
        t_V_1_reg_325 <= iterations_V_reg_1617;
    end else if (((ap_ST_st18_fsm_17 == ap_CS_fsm) & ~ap_sig_bdd_538)) begin
        t_V_1_reg_325 <= ap_const_lv128_lc_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_431))) begin
        destinationAddress_assign_fu_228 <= destinationAddress_in_sig;
        p_Result_10_reg_1447 <= {{key_in_V_in_sig[ap_const_lv32_57 : ap_const_lv32_50]}};
        p_Result_11_reg_1457 <= {{key_in_V_in_sig[ap_const_lv32_5F : ap_const_lv32_58]}};
        p_Result_12_reg_1467 <= {{key_in_V_in_sig[ap_const_lv32_67 : ap_const_lv32_60]}};
        p_Result_13_reg_1477 <= {{key_in_V_in_sig[ap_const_lv32_6F : ap_const_lv32_68]}};
        p_Result_14_reg_1487 <= {{key_in_V_in_sig[ap_const_lv32_77 : ap_const_lv32_70]}};
        p_Result_15_reg_1497 <= {{key_in_V_in_sig[ap_const_lv32_7F : ap_const_lv32_78]}};
        p_Result_1_reg_1357 <= {{key_in_V_in_sig[ap_const_lv32_F : ap_const_lv32_8]}};
        p_Result_2_reg_1367 <= {{key_in_V_in_sig[ap_const_lv32_17 : ap_const_lv32_10]}};
        p_Result_3_reg_1377 <= {{key_in_V_in_sig[ap_const_lv32_1F : ap_const_lv32_18]}};
        p_Result_4_reg_1387 <= {{key_in_V_in_sig[ap_const_lv32_27 : ap_const_lv32_20]}};
        p_Result_5_reg_1397 <= {{key_in_V_in_sig[ap_const_lv32_2F : ap_const_lv32_28]}};
        p_Result_6_reg_1407 <= {{key_in_V_in_sig[ap_const_lv32_37 : ap_const_lv32_30]}};
        p_Result_7_reg_1417 <= {{key_in_V_in_sig[ap_const_lv32_3F : ap_const_lv32_38]}};
        p_Result_8_reg_1427 <= {{key_in_V_in_sig[ap_const_lv32_47 : ap_const_lv32_40]}};
        p_Result_9_10_reg_1462 <= {{iv_V_in_sig[ap_const_lv32_5F : ap_const_lv32_58]}};
        p_Result_9_11_reg_1472 <= {{iv_V_in_sig[ap_const_lv32_67 : ap_const_lv32_60]}};
        p_Result_9_12_reg_1482 <= {{iv_V_in_sig[ap_const_lv32_6F : ap_const_lv32_68]}};
        p_Result_9_13_reg_1492 <= {{iv_V_in_sig[ap_const_lv32_77 : ap_const_lv32_70]}};
        p_Result_9_14_reg_1502 <= {{iv_V_in_sig[ap_const_lv32_7F : ap_const_lv32_78]}};
        p_Result_9_1_reg_1362 <= {{iv_V_in_sig[ap_const_lv32_F : ap_const_lv32_8]}};
        p_Result_9_2_reg_1372 <= {{iv_V_in_sig[ap_const_lv32_17 : ap_const_lv32_10]}};
        p_Result_9_3_reg_1382 <= {{iv_V_in_sig[ap_const_lv32_1F : ap_const_lv32_18]}};
        p_Result_9_4_reg_1392 <= {{iv_V_in_sig[ap_const_lv32_27 : ap_const_lv32_20]}};
        p_Result_9_5_reg_1402 <= {{iv_V_in_sig[ap_const_lv32_2F : ap_const_lv32_28]}};
        p_Result_9_6_reg_1412 <= {{iv_V_in_sig[ap_const_lv32_37 : ap_const_lv32_30]}};
        p_Result_9_7_reg_1422 <= {{iv_V_in_sig[ap_const_lv32_3F : ap_const_lv32_38]}};
        p_Result_9_8_reg_1432 <= {{iv_V_in_sig[ap_const_lv32_47 : ap_const_lv32_40]}};
        p_Result_9_9_reg_1442 <= {{iv_V_in_sig[ap_const_lv32_4F : ap_const_lv32_48]}};
        p_Result_9_s_reg_1452 <= {{iv_V_in_sig[ap_const_lv32_57 : ap_const_lv32_50]}};
        p_Result_s_reg_1437 <= {{key_in_V_in_sig[ap_const_lv32_4F : ap_const_lv32_48]}};
        sourceAddress_assign_fu_224 <= sourceAddress_in_sig;
        tmp_11_reg_1507 <= tmp_11_fu_766_p2;
        tmp_14_reg_1512 <= tmp_14_fu_772_p2;
        tmp_331_reg_1347 <= tmp_331_fu_458_p1;
        tmp_332_reg_1352 <= tmp_332_fu_462_p1;
        tmp_3_reg_1342 <= tmp_3_fu_452_p2;
        tmp_reg_1337 <= {{numBytes_in_sig[ap_const_lv32_1F : ap_const_lv32_4]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st41_fsm_40 == ap_CS_fsm)) begin
        encrypted_data_V_reg_1697 <= grp_aestest_fu_337_ap_return;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st19_fsm_18 == ap_CS_fsm) & ~ap_sig_bdd_583)) begin
        iterations_V_reg_1617 <= iterations_V_fu_1007_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(s_in_V_V_TVALID == ap_const_logic_0) & (ap_ST_st22_fsm_21 == ap_CS_fsm))) begin
        iv_local_V_1_reg_1692 <= iv_local_V_1_fu_1103_p3;
        r_V_1_reg_1687 <= r_V_1_fu_1096_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st18_fsm_17 == ap_CS_fsm) & ~ap_sig_bdd_538)) begin
        key_local_V_0_s_reg_1599 <= key_local_V_0_s_fu_959_p17;
        tmp_1_reg_1609[0] <= tmp_1_fu_999_p1[0];
tmp_1_reg_1609[1] <= tmp_1_fu_999_p1[1];
tmp_1_reg_1609[2] <= tmp_1_fu_999_p1[2];
tmp_1_reg_1609[3] <= tmp_1_fu_999_p1[3];
tmp_1_reg_1609[4] <= tmp_1_fu_999_p1[4];
tmp_1_reg_1609[5] <= tmp_1_fu_999_p1[5];
tmp_1_reg_1609[6] <= tmp_1_fu_999_p1[6];
tmp_1_reg_1609[7] <= tmp_1_fu_999_p1[7];
tmp_1_reg_1609[8] <= tmp_1_fu_999_p1[8];
tmp_1_reg_1609[9] <= tmp_1_fu_999_p1[9];
tmp_1_reg_1609[10] <= tmp_1_fu_999_p1[10];
tmp_1_reg_1609[11] <= tmp_1_fu_999_p1[11];
tmp_1_reg_1609[12] <= tmp_1_fu_999_p1[12];
tmp_1_reg_1609[13] <= tmp_1_fu_999_p1[13];
tmp_1_reg_1609[14] <= tmp_1_fu_999_p1[14];
tmp_1_reg_1609[15] <= tmp_1_fu_999_p1[15];
tmp_1_reg_1609[16] <= tmp_1_fu_999_p1[16];
tmp_1_reg_1609[17] <= tmp_1_fu_999_p1[17];
tmp_1_reg_1609[18] <= tmp_1_fu_999_p1[18];
tmp_1_reg_1609[19] <= tmp_1_fu_999_p1[19];
tmp_1_reg_1609[20] <= tmp_1_fu_999_p1[20];
tmp_1_reg_1609[21] <= tmp_1_fu_999_p1[21];
tmp_1_reg_1609[22] <= tmp_1_fu_999_p1[22];
tmp_1_reg_1609[23] <= tmp_1_fu_999_p1[23];
tmp_1_reg_1609[24] <= tmp_1_fu_999_p1[24];
tmp_1_reg_1609[25] <= tmp_1_fu_999_p1[25];
tmp_1_reg_1609[26] <= tmp_1_fu_999_p1[26];
tmp_1_reg_1609[27] <= tmp_1_fu_999_p1[27];
tmp_1_reg_1609[28] <= tmp_1_fu_999_p1[28];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~(ap_sig_bdd_538 | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)))) begin
        numIterations_reg_1569 <= numIterations_fu_912_p2;
        tmp_329_reg_1579 <= tmp_329_fu_925_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(s_in_V_V_TVALID == ap_const_logic_0) & (ap_ST_st21_fsm_20 == ap_CS_fsm))) begin
        p_Repl2_10_reg_1672 <= {{s_in_V_V_TDATA[ap_const_lv32_F : ap_const_lv32_8]}};
        p_Repl2_11_reg_1667 <= p_Repl2_11_fu_1027_p1;
        p_Repl2_8_reg_1682 <= {{s_in_V_V_TDATA[ap_const_lv32_1F : ap_const_lv32_18]}};
        p_Repl2_9_reg_1677 <= {{s_in_V_V_TDATA[ap_const_lv32_17 : ap_const_lv32_10]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st19_fsm_18 == ap_CS_fsm) & ~(tmp_10_fu_1002_p2 == ap_const_lv1_0) & ~ap_sig_bdd_583)) begin
        p_Repl2_1_reg_1632 <= {{s_in_V_V_TDATA[ap_const_lv32_17 : ap_const_lv32_10]}};
        p_Repl2_2_reg_1627 <= {{s_in_V_V_TDATA[ap_const_lv32_F : ap_const_lv32_8]}};
        p_Repl2_3_reg_1622 <= p_Repl2_3_fu_1013_p1;
        p_Repl2_s_reg_1637 <= {{s_in_V_V_TDATA[ap_const_lv32_1F : ap_const_lv32_18]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st42_fsm_41 == ap_CS_fsm) & ~(ap_const_logic_0 == ap_sig_ioackin_s_out_V_V_TREADY))) begin
        p_Repl2_20_reg_1707 <= {{encrypted_data_V_1_fu_1110_p2[ap_const_lv32_4F : ap_const_lv32_48]}};
        p_Repl2_21_reg_1712 <= {{encrypted_data_V_1_fu_1110_p2[ap_const_lv32_57 : ap_const_lv32_50]}};
        p_Repl2_22_reg_1717 <= {{encrypted_data_V_1_fu_1110_p2[ap_const_lv32_5F : ap_const_lv32_58]}};
        p_Repl2_23_reg_1702 <= {{encrypted_data_V_1_fu_1110_p2[ap_const_lv32_47 : ap_const_lv32_40]}};
        p_Repl2_24_reg_1727 <= {{encrypted_data_V_1_fu_1110_p2[ap_const_lv32_2F : ap_const_lv32_28]}};
        p_Repl2_25_reg_1732 <= {{encrypted_data_V_1_fu_1110_p2[ap_const_lv32_37 : ap_const_lv32_30]}};
        p_Repl2_26_reg_1737 <= {{encrypted_data_V_1_fu_1110_p2[ap_const_lv32_3F : ap_const_lv32_38]}};
        p_Repl2_27_reg_1722 <= {{encrypted_data_V_1_fu_1110_p2[ap_const_lv32_27 : ap_const_lv32_20]}};
        p_Repl2_28_reg_1752 <= {{encrypted_data_V_1_fu_1110_p2[ap_const_lv32_17 : ap_const_lv32_10]}};
        p_Repl2_29_reg_1757 <= {{encrypted_data_V_1_fu_1110_p2[ap_const_lv32_1F : ap_const_lv32_18]}};
        p_Repl2_30_reg_1747 <= {{encrypted_data_V_1_fu_1110_p2[ap_const_lv32_F : ap_const_lv32_8]}};
        p_Repl2_31_reg_1742 <= p_Repl2_31_fu_1247_p1;
        rhs_V_fu_220 <= encrypted_data_V_1_fu_1110_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st20_fsm_19 == ap_CS_fsm) & ~(s_in_V_V_TVALID == ap_const_logic_0))) begin
        p_Repl2_4_reg_1662 <= {{s_in_V_V_TDATA[ap_const_lv32_1F : ap_const_lv32_18]}};
        p_Repl2_5_reg_1657 <= {{s_in_V_V_TDATA[ap_const_lv32_17 : ap_const_lv32_10]}};
        p_Repl2_6_reg_1652 <= {{s_in_V_V_TDATA[ap_const_lv32_F : ap_const_lv32_8]}};
        p_Repl2_7_reg_1647 <= p_Repl2_7_fu_1023_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st19_fsm_18 == ap_CS_fsm) & ~(tmp_10_fu_1002_p2 == ap_const_lv1_0) & ~ap_sig_bdd_583 & ~(tmp_11_reg_1507 == ap_const_lv1_0))) begin
        tmp_13_reg_1642 <= tmp_13_fu_1017_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & ~ap_sig_bdd_509)) begin
        tmp_326_reg_1524 <= tmp_326_fu_788_p1;
        tmp_327_reg_1534 <= tmp_327_fu_802_p1;
        tmp_39_reg_1519 <= {{m_mm2s_ctl_RDATA[ap_const_lv32_1F : ap_const_lv32_3]}};
        tmp_40_reg_1529 <= {{m_s2mm_ctl_RDATA[ap_const_lv32_1F : ap_const_lv32_3]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~ap_sig_bdd_509 & (ap_ST_st14_fsm_13 == ap_CS_fsm))) begin
        tmp_328_reg_1554 <= tmp_328_fu_870_p1;
        tmp_330_reg_1564 <= tmp_330_fu_884_p1;
        tmp_42_reg_1549 <= {{m_mm2s_ctl_RDATA[ap_const_lv32_1F : ap_const_lv32_D]}};
        tmp_44_reg_1559 <= {{m_s2mm_ctl_RDATA[ap_const_lv32_1F : ap_const_lv32_D]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~ap_sig_bdd_509 & (ap_ST_st11_fsm_10 == ap_CS_fsm))) begin
        tmp_41_reg_1539 <= {{m_mm2s_ctl_RDATA[ap_const_lv32_1F : ap_const_lv32_1]}};
        tmp_43_reg_1544 <= {{m_s2mm_ctl_RDATA[ap_const_lv32_1F : ap_const_lv32_1]}};
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or tmp_10_fu_1002_p2 or ap_sig_bdd_583)
begin
    if (((ap_ST_st19_fsm_18 == ap_CS_fsm) & (tmp_10_fu_1002_p2 == ap_const_lv1_0) & ~ap_sig_bdd_583)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or tmp_10_fu_1002_p2 or ap_sig_bdd_583)
begin
    if (((ap_ST_st19_fsm_18 == ap_CS_fsm) & (tmp_10_fu_1002_p2 == ap_const_lv1_0) & ~ap_sig_bdd_583)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_m_mm2s_ctl_ARREADY assign process. ///
always @ (m_mm2s_ctl_ARREADY or ap_reg_ioackin_m_mm2s_ctl_ARREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_ARREADY)) begin
        ap_sig_ioackin_m_mm2s_ctl_ARREADY = m_mm2s_ctl_ARREADY;
    end else begin
        ap_sig_ioackin_m_mm2s_ctl_ARREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_m_mm2s_ctl_AWREADY assign process. ///
always @ (m_mm2s_ctl_AWREADY or ap_reg_ioackin_m_mm2s_ctl_AWREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_AWREADY)) begin
        ap_sig_ioackin_m_mm2s_ctl_AWREADY = m_mm2s_ctl_AWREADY;
    end else begin
        ap_sig_ioackin_m_mm2s_ctl_AWREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_m_mm2s_ctl_WREADY assign process. ///
always @ (m_mm2s_ctl_WREADY or ap_reg_ioackin_m_mm2s_ctl_WREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_WREADY)) begin
        ap_sig_ioackin_m_mm2s_ctl_WREADY = m_mm2s_ctl_WREADY;
    end else begin
        ap_sig_ioackin_m_mm2s_ctl_WREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_m_s2mm_ctl_ARREADY assign process. ///
always @ (m_s2mm_ctl_ARREADY or ap_reg_ioackin_m_s2mm_ctl_ARREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_ARREADY)) begin
        ap_sig_ioackin_m_s2mm_ctl_ARREADY = m_s2mm_ctl_ARREADY;
    end else begin
        ap_sig_ioackin_m_s2mm_ctl_ARREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_m_s2mm_ctl_AWREADY assign process. ///
always @ (m_s2mm_ctl_AWREADY or ap_reg_ioackin_m_s2mm_ctl_AWREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_AWREADY)) begin
        ap_sig_ioackin_m_s2mm_ctl_AWREADY = m_s2mm_ctl_AWREADY;
    end else begin
        ap_sig_ioackin_m_s2mm_ctl_AWREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_m_s2mm_ctl_WREADY assign process. ///
always @ (m_s2mm_ctl_WREADY or ap_reg_ioackin_m_s2mm_ctl_WREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_WREADY)) begin
        ap_sig_ioackin_m_s2mm_ctl_WREADY = m_s2mm_ctl_WREADY;
    end else begin
        ap_sig_ioackin_m_s2mm_ctl_WREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_s_out_V_V_TREADY assign process. ///
always @ (s_out_V_V_TREADY or ap_reg_ioackin_s_out_V_V_TREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_s_out_V_V_TREADY)) begin
        ap_sig_ioackin_s_out_V_V_TREADY = s_out_V_V_TREADY;
    end else begin
        ap_sig_ioackin_s_out_V_V_TREADY = ap_const_logic_1;
    end
end

/// destinationAddress_ap_vld_in_sig assign process. ///
always @ (destinationAddress_ap_vld or destinationAddress_ap_vld_preg)
begin
    if ((ap_const_logic_1 == destinationAddress_ap_vld)) begin
        destinationAddress_ap_vld_in_sig = destinationAddress_ap_vld;
    end else begin
        destinationAddress_ap_vld_in_sig = destinationAddress_ap_vld_preg;
    end
end

/// destinationAddress_in_sig assign process. ///
always @ (destinationAddress or destinationAddress_preg or destinationAddress_ap_vld)
begin
    if ((ap_const_logic_1 == destinationAddress_ap_vld)) begin
        destinationAddress_in_sig = destinationAddress;
    end else begin
        destinationAddress_in_sig = destinationAddress_preg;
    end
end

/// grp_aestest_fu_337_ap_ce assign process. ///
always @ (ap_CS_fsm or s_in_V_V_TVALID)
begin
    if (((~(s_in_V_V_TVALID == ap_const_logic_0) & (ap_ST_st22_fsm_21 == ap_CS_fsm)) | (ap_ST_st41_fsm_40 == ap_CS_fsm) | (ap_ST_st23_fsm_22 == ap_CS_fsm) | (ap_ST_st24_fsm_23 == ap_CS_fsm) | (ap_ST_st25_fsm_24 == ap_CS_fsm) | (ap_ST_st26_fsm_25 == ap_CS_fsm) | (ap_ST_st27_fsm_26 == ap_CS_fsm) | (ap_ST_st28_fsm_27 == ap_CS_fsm) | (ap_ST_st29_fsm_28 == ap_CS_fsm) | (ap_ST_st30_fsm_29 == ap_CS_fsm) | (ap_ST_st31_fsm_30 == ap_CS_fsm) | (ap_ST_st32_fsm_31 == ap_CS_fsm) | (ap_ST_st33_fsm_32 == ap_CS_fsm) | (ap_ST_st34_fsm_33 == ap_CS_fsm) | (ap_ST_st35_fsm_34 == ap_CS_fsm) | (ap_ST_st36_fsm_35 == ap_CS_fsm) | (ap_ST_st37_fsm_36 == ap_CS_fsm) | (ap_ST_st38_fsm_37 == ap_CS_fsm) | (ap_ST_st39_fsm_38 == ap_CS_fsm) | (ap_ST_st40_fsm_39 == ap_CS_fsm))) begin
        grp_aestest_fu_337_ap_ce = ap_const_logic_1;
    end else begin
        grp_aestest_fu_337_ap_ce = ap_const_logic_0;
    end
end

/// iv_V_ap_vld_in_sig assign process. ///
always @ (iv_V_ap_vld or iv_V_ap_vld_preg)
begin
    if ((ap_const_logic_1 == iv_V_ap_vld)) begin
        iv_V_ap_vld_in_sig = iv_V_ap_vld;
    end else begin
        iv_V_ap_vld_in_sig = iv_V_ap_vld_preg;
    end
end

/// iv_V_in_sig assign process. ///
always @ (iv_V or iv_V_preg or iv_V_ap_vld)
begin
    if ((ap_const_logic_1 == iv_V_ap_vld)) begin
        iv_V_in_sig = iv_V;
    end else begin
        iv_V_in_sig = iv_V_preg;
    end
end

/// key_in_V_ap_vld_in_sig assign process. ///
always @ (key_in_V_ap_vld or key_in_V_ap_vld_preg)
begin
    if ((ap_const_logic_1 == key_in_V_ap_vld)) begin
        key_in_V_ap_vld_in_sig = key_in_V_ap_vld;
    end else begin
        key_in_V_ap_vld_in_sig = key_in_V_ap_vld_preg;
    end
end

/// key_in_V_in_sig assign process. ///
always @ (key_in_V or key_in_V_preg or key_in_V_ap_vld)
begin
    if ((ap_const_logic_1 == key_in_V_ap_vld)) begin
        key_in_V_in_sig = key_in_V;
    end else begin
        key_in_V_in_sig = key_in_V_preg;
    end
end

/// m_mm2s_ctl_ARVALID assign process. ///
always @ (ap_start or ap_CS_fsm or ap_sig_bdd_431 or ap_sig_bdd_538 or ap_reg_ioackin_m_mm2s_ctl_ARREADY or ap_sig_bdd_2232)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_ARREADY)) | ((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_ARREADY) & ~ap_sig_bdd_431) | (~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_ARREADY) & (ap_ST_st7_fsm_6 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_ARREADY) & (ap_ST_st10_fsm_9 == ap_CS_fsm) & ~ap_sig_bdd_2232) | (~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_ARREADY) & (ap_ST_st13_fsm_12 == ap_CS_fsm)))) begin
        m_mm2s_ctl_ARVALID = ap_const_logic_1;
    end else begin
        m_mm2s_ctl_ARVALID = ap_const_logic_0;
    end
end

/// m_mm2s_ctl_AWADDR assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_538 or ap_reg_ioackin_m_mm2s_ctl_AWREADY)
begin
    if (((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_AWREADY))) begin
        m_mm2s_ctl_AWADDR = ap_const_lv64_A;
    end else if (((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_AWREADY))) begin
        m_mm2s_ctl_AWADDR = ap_const_lv64_6;
    end else if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_AWREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_AWREADY) & (ap_ST_st6_fsm_5 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_AWREADY) & (ap_ST_st9_fsm_8 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_AWREADY) & (ap_ST_st12_fsm_11 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_AWREADY) & (ap_ST_st15_fsm_14 == ap_CS_fsm)))) begin
        m_mm2s_ctl_AWADDR = ap_const_lv32_0;
    end else begin
        m_mm2s_ctl_AWADDR = 'bx;
    end
end

/// m_mm2s_ctl_AWVALID assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_538 or ap_reg_ioackin_m_mm2s_ctl_AWREADY)
begin
    if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_AWREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_AWREADY) & (ap_ST_st6_fsm_5 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_AWREADY) & (ap_ST_st9_fsm_8 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_AWREADY) & (ap_ST_st12_fsm_11 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_AWREADY) & (ap_ST_st15_fsm_14 == ap_CS_fsm)) | ((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_AWREADY)) | ((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_AWREADY)))) begin
        m_mm2s_ctl_AWVALID = ap_const_logic_1;
    end else begin
        m_mm2s_ctl_AWVALID = ap_const_logic_0;
    end
end

/// m_mm2s_ctl_BREADY assign process. ///
always @ (ap_CS_fsm or ap_sig_ioackin_m_mm2s_ctl_ARREADY or ap_sig_ioackin_m_s2mm_ctl_ARREADY or ap_sig_bdd_431 or ap_sig_bdd_538 or ap_sig_ioackin_m_mm2s_ctl_AWREADY or ap_sig_ioackin_m_mm2s_ctl_WREADY or ap_sig_ioackin_m_s2mm_ctl_AWREADY or ap_sig_ioackin_m_s2mm_ctl_WREADY or ap_sig_bdd_2232)
begin
    if ((((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_431)) | ((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~(ap_sig_bdd_538 | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) | (~(ap_sig_bdd_538 | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st17_fsm_16 == ap_CS_fsm)) | ((ap_ST_st18_fsm_17 == ap_CS_fsm) & ~ap_sig_bdd_538) | ((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_538)) | ((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_2232)) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_538) & (ap_ST_st13_fsm_12 == ap_CS_fsm)))) begin
        m_mm2s_ctl_BREADY = ap_const_logic_1;
    end else begin
        m_mm2s_ctl_BREADY = ap_const_logic_0;
    end
end

/// m_mm2s_ctl_RREADY assign process. ///
always @ (ap_CS_fsm or ap_sig_ioackin_m_mm2s_ctl_ARREADY or ap_sig_ioackin_m_s2mm_ctl_ARREADY or ap_sig_bdd_431 or ap_sig_bdd_509 or ap_sig_bdd_2232)
begin
    if ((((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_431)) | ((ap_ST_st5_fsm_4 == ap_CS_fsm) & ~ap_sig_bdd_509) | (~ap_sig_bdd_509 & (ap_ST_st11_fsm_10 == ap_CS_fsm)) | (~ap_sig_bdd_509 & (ap_ST_st14_fsm_13 == ap_CS_fsm)) | ((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_2232)))) begin
        m_mm2s_ctl_RREADY = ap_const_logic_1;
    end else begin
        m_mm2s_ctl_RREADY = ap_const_logic_0;
    end
end

/// m_mm2s_ctl_WDATA assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_538 or ap_reg_ioackin_m_mm2s_ctl_WREADY or tmp_5_fu_806_p4 or tmp_7_fu_844_p3 or tmp_8_fu_888_p4 or read_length_fu_936_p3 or sourceAddress_assign_fu_224)
begin
    if (((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_WREADY))) begin
        m_mm2s_ctl_WDATA = read_length_fu_936_p3;
    end else if (((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_WREADY))) begin
        m_mm2s_ctl_WDATA = sourceAddress_assign_fu_224;
    end else if (((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_WREADY) & (ap_ST_st15_fsm_14 == ap_CS_fsm))) begin
        m_mm2s_ctl_WDATA = tmp_8_fu_888_p4;
    end else if (((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_WREADY) & (ap_ST_st12_fsm_11 == ap_CS_fsm))) begin
        m_mm2s_ctl_WDATA = tmp_7_fu_844_p3;
    end else if (((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_WREADY) & (ap_ST_st6_fsm_5 == ap_CS_fsm))) begin
        m_mm2s_ctl_WDATA = tmp_5_fu_806_p4;
    end else if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_WREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_WREADY) & (ap_ST_st9_fsm_8 == ap_CS_fsm)))) begin
        m_mm2s_ctl_WDATA = ap_const_lv32_0;
    end else begin
        m_mm2s_ctl_WDATA = 'bx;
    end
end

/// m_mm2s_ctl_WVALID assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_538 or ap_reg_ioackin_m_mm2s_ctl_WREADY)
begin
    if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_WREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_WREADY) & (ap_ST_st6_fsm_5 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_WREADY) & (ap_ST_st9_fsm_8 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_WREADY) & (ap_ST_st12_fsm_11 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_WREADY) & (ap_ST_st15_fsm_14 == ap_CS_fsm)) | ((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_WREADY)) | ((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_mm2s_ctl_WREADY)))) begin
        m_mm2s_ctl_WVALID = ap_const_logic_1;
    end else begin
        m_mm2s_ctl_WVALID = ap_const_logic_0;
    end
end

/// m_s2mm_ctl_ARADDR assign process. ///
always @ (ap_start or ap_CS_fsm or m_s2mm_ctl_addr_reg_1331 or ap_sig_bdd_431 or ap_sig_bdd_538 or ap_sig_bdd_2232 or ap_reg_ioackin_m_s2mm_ctl_ARREADY)
begin
    if ((((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~ap_sig_bdd_431 & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_ARREADY)) | (~ap_sig_bdd_538 & (ap_ST_st7_fsm_6 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_ARREADY)) | ((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~ap_sig_bdd_2232 & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_ARREADY)) | (~ap_sig_bdd_538 & (ap_ST_st13_fsm_12 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_ARREADY)))) begin
        m_s2mm_ctl_ARADDR = m_s2mm_ctl_addr_reg_1331;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_ARREADY))) begin
        m_s2mm_ctl_ARADDR = ap_const_lv64_C;
    end else begin
        m_s2mm_ctl_ARADDR = 'bx;
    end
end

/// m_s2mm_ctl_ARVALID assign process. ///
always @ (ap_start or ap_CS_fsm or ap_sig_bdd_431 or ap_sig_bdd_538 or ap_sig_bdd_2232 or ap_reg_ioackin_m_s2mm_ctl_ARREADY)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_ARREADY)) | ((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~ap_sig_bdd_431 & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_ARREADY)) | (~ap_sig_bdd_538 & (ap_ST_st7_fsm_6 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_ARREADY)) | ((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~ap_sig_bdd_2232 & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_ARREADY)) | (~ap_sig_bdd_538 & (ap_ST_st13_fsm_12 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_ARREADY)))) begin
        m_s2mm_ctl_ARVALID = ap_const_logic_1;
    end else begin
        m_s2mm_ctl_ARVALID = ap_const_logic_0;
    end
end

/// m_s2mm_ctl_AWADDR assign process. ///
always @ (ap_CS_fsm or m_s2mm_ctl_addr_reg_1331 or ap_sig_bdd_538 or ap_reg_ioackin_m_s2mm_ctl_AWREADY)
begin
    if (((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_AWREADY))) begin
        m_s2mm_ctl_AWADDR = ap_const_lv64_16;
    end else if (((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_AWREADY))) begin
        m_s2mm_ctl_AWADDR = ap_const_lv64_12;
    end else if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_AWREADY)) | ((ap_ST_st6_fsm_5 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_AWREADY)) | ((ap_ST_st9_fsm_8 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_AWREADY)) | ((ap_ST_st12_fsm_11 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_AWREADY)) | ((ap_ST_st15_fsm_14 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_AWREADY)))) begin
        m_s2mm_ctl_AWADDR = m_s2mm_ctl_addr_reg_1331;
    end else begin
        m_s2mm_ctl_AWADDR = 'bx;
    end
end

/// m_s2mm_ctl_AWVALID assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_538 or ap_reg_ioackin_m_s2mm_ctl_AWREADY)
begin
    if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_AWREADY)) | ((ap_ST_st6_fsm_5 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_AWREADY)) | ((ap_ST_st9_fsm_8 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_AWREADY)) | ((ap_ST_st12_fsm_11 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_AWREADY)) | ((ap_ST_st15_fsm_14 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_AWREADY)) | ((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_AWREADY)) | ((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_AWREADY)))) begin
        m_s2mm_ctl_AWVALID = ap_const_logic_1;
    end else begin
        m_s2mm_ctl_AWVALID = ap_const_logic_0;
    end
end

/// m_s2mm_ctl_BREADY assign process. ///
always @ (ap_CS_fsm or ap_sig_ioackin_m_mm2s_ctl_ARREADY or ap_sig_ioackin_m_s2mm_ctl_ARREADY or ap_sig_bdd_431 or ap_sig_bdd_538 or ap_sig_ioackin_m_mm2s_ctl_AWREADY or ap_sig_ioackin_m_mm2s_ctl_WREADY or ap_sig_ioackin_m_s2mm_ctl_AWREADY or ap_sig_ioackin_m_s2mm_ctl_WREADY or ap_sig_bdd_2232)
begin
    if ((((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_431)) | ((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~(ap_sig_bdd_538 | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) | (~(ap_sig_bdd_538 | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY)) & (ap_ST_st17_fsm_16 == ap_CS_fsm)) | ((ap_ST_st18_fsm_17 == ap_CS_fsm) & ~ap_sig_bdd_538) | ((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_538)) | ((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_2232)) | (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_538) & (ap_ST_st13_fsm_12 == ap_CS_fsm)))) begin
        m_s2mm_ctl_BREADY = ap_const_logic_1;
    end else begin
        m_s2mm_ctl_BREADY = ap_const_logic_0;
    end
end

/// m_s2mm_ctl_RREADY assign process. ///
always @ (ap_CS_fsm or ap_sig_ioackin_m_mm2s_ctl_ARREADY or ap_sig_ioackin_m_s2mm_ctl_ARREADY or ap_sig_bdd_431 or ap_sig_bdd_509 or ap_sig_bdd_2232)
begin
    if ((((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_431)) | ((ap_ST_st5_fsm_4 == ap_CS_fsm) & ~ap_sig_bdd_509) | (~ap_sig_bdd_509 & (ap_ST_st11_fsm_10 == ap_CS_fsm)) | (~ap_sig_bdd_509 & (ap_ST_st14_fsm_13 == ap_CS_fsm)) | ((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_2232)))) begin
        m_s2mm_ctl_RREADY = ap_const_logic_1;
    end else begin
        m_s2mm_ctl_RREADY = ap_const_logic_0;
    end
end

/// m_s2mm_ctl_WDATA assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_538 or read_length_fu_936_p3 or ap_reg_ioackin_m_s2mm_ctl_WREADY or tmp_6_fu_815_p4 or tmp_9_fu_852_p3 or tmp_s_fu_897_p4 or destinationAddress_assign_fu_228)
begin
    if (((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_WREADY))) begin
        m_s2mm_ctl_WDATA = read_length_fu_936_p3;
    end else if (((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_WREADY))) begin
        m_s2mm_ctl_WDATA = destinationAddress_assign_fu_228;
    end else if (((ap_ST_st15_fsm_14 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_WREADY))) begin
        m_s2mm_ctl_WDATA = tmp_s_fu_897_p4;
    end else if (((ap_ST_st12_fsm_11 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_WREADY))) begin
        m_s2mm_ctl_WDATA = tmp_9_fu_852_p3;
    end else if (((ap_ST_st6_fsm_5 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_WREADY))) begin
        m_s2mm_ctl_WDATA = tmp_6_fu_815_p4;
    end else if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_WREADY)) | ((ap_ST_st9_fsm_8 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_WREADY)))) begin
        m_s2mm_ctl_WDATA = ap_const_lv32_0;
    end else begin
        m_s2mm_ctl_WDATA = 'bx;
    end
end

/// m_s2mm_ctl_WVALID assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_538 or ap_reg_ioackin_m_s2mm_ctl_WREADY)
begin
    if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_WREADY)) | ((ap_ST_st6_fsm_5 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_WREADY)) | ((ap_ST_st9_fsm_8 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_WREADY)) | ((ap_ST_st12_fsm_11 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_WREADY)) | ((ap_ST_st15_fsm_14 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_WREADY)) | ((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_WREADY)) | ((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~ap_sig_bdd_538 & (ap_const_logic_0 == ap_reg_ioackin_m_s2mm_ctl_WREADY)))) begin
        m_s2mm_ctl_WVALID = ap_const_logic_1;
    end else begin
        m_s2mm_ctl_WVALID = ap_const_logic_0;
    end
end

/// mode_ap_vld_in_sig assign process. ///
always @ (mode_ap_vld or mode_ap_vld_preg)
begin
    if ((ap_const_logic_1 == mode_ap_vld)) begin
        mode_ap_vld_in_sig = mode_ap_vld;
    end else begin
        mode_ap_vld_in_sig = mode_ap_vld_preg;
    end
end

/// mode_in_sig assign process. ///
always @ (mode or mode_preg or mode_ap_vld)
begin
    if ((ap_const_logic_1 == mode_ap_vld)) begin
        mode_in_sig = mode;
    end else begin
        mode_in_sig = mode_preg;
    end
end

/// numBytes_ap_vld_in_sig assign process. ///
always @ (numBytes_ap_vld or numBytes_ap_vld_preg)
begin
    if ((ap_const_logic_1 == numBytes_ap_vld)) begin
        numBytes_ap_vld_in_sig = numBytes_ap_vld;
    end else begin
        numBytes_ap_vld_in_sig = numBytes_ap_vld_preg;
    end
end

/// numBytes_in_sig assign process. ///
always @ (numBytes or numBytes_preg or numBytes_ap_vld)
begin
    if ((ap_const_logic_1 == numBytes_ap_vld)) begin
        numBytes_in_sig = numBytes;
    end else begin
        numBytes_in_sig = numBytes_preg;
    end
end

/// s_in_V_V_TREADY assign process. ///
always @ (ap_CS_fsm or s_in_V_V_TVALID or tmp_10_fu_1002_p2 or ap_sig_bdd_583)
begin
    if ((((ap_ST_st19_fsm_18 == ap_CS_fsm) & ~(tmp_10_fu_1002_p2 == ap_const_lv1_0) & ~ap_sig_bdd_583) | ((ap_ST_st20_fsm_19 == ap_CS_fsm) & ~(s_in_V_V_TVALID == ap_const_logic_0)) | (~(s_in_V_V_TVALID == ap_const_logic_0) & (ap_ST_st21_fsm_20 == ap_CS_fsm)) | (~(s_in_V_V_TVALID == ap_const_logic_0) & (ap_ST_st22_fsm_21 == ap_CS_fsm)))) begin
        s_in_V_V_TREADY = ap_const_logic_1;
    end else begin
        s_in_V_V_TREADY = ap_const_logic_0;
    end
end

/// s_out_V_V_TDATA assign process. ///
always @ (ap_CS_fsm or ap_sig_ioackin_s_out_V_V_TREADY or p_Result_9_fu_1154_p5 or p_Result_16_fu_1286_p5 or p_Result_17_fu_1295_p5 or p_Result_18_fu_1304_p5)
begin
    if (~(ap_const_logic_0 == ap_sig_ioackin_s_out_V_V_TREADY)) begin
        if ((ap_ST_st45_fsm_44 == ap_CS_fsm)) begin
            s_out_V_V_TDATA = p_Result_18_fu_1304_p5;
        end else if ((ap_ST_st44_fsm_43 == ap_CS_fsm)) begin
            s_out_V_V_TDATA = p_Result_17_fu_1295_p5;
        end else if ((ap_ST_st43_fsm_42 == ap_CS_fsm)) begin
            s_out_V_V_TDATA = p_Result_16_fu_1286_p5;
        end else if ((ap_ST_st42_fsm_41 == ap_CS_fsm)) begin
            s_out_V_V_TDATA = p_Result_9_fu_1154_p5;
        end else begin
            s_out_V_V_TDATA = 'bx;
        end
    end else begin
        s_out_V_V_TDATA = 'bx;
    end
end

/// s_out_V_V_TVALID assign process. ///
always @ (ap_CS_fsm or ap_reg_ioackin_s_out_V_V_TREADY)
begin
    if ((((ap_ST_st42_fsm_41 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_s_out_V_V_TREADY)) | ((ap_ST_st43_fsm_42 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_s_out_V_V_TREADY)) | ((ap_ST_st44_fsm_43 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_s_out_V_V_TREADY)) | ((ap_ST_st45_fsm_44 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_s_out_V_V_TREADY)))) begin
        s_out_V_V_TVALID = ap_const_logic_1;
    end else begin
        s_out_V_V_TVALID = ap_const_logic_0;
    end
end

/// sourceAddress_ap_vld_in_sig assign process. ///
always @ (sourceAddress_ap_vld or sourceAddress_ap_vld_preg)
begin
    if ((ap_const_logic_1 == sourceAddress_ap_vld)) begin
        sourceAddress_ap_vld_in_sig = sourceAddress_ap_vld;
    end else begin
        sourceAddress_ap_vld_in_sig = sourceAddress_ap_vld_preg;
    end
end

/// sourceAddress_in_sig assign process. ///
always @ (sourceAddress or sourceAddress_preg or sourceAddress_ap_vld)
begin
    if ((ap_const_logic_1 == sourceAddress_ap_vld)) begin
        sourceAddress_in_sig = sourceAddress;
    end else begin
        sourceAddress_in_sig = sourceAddress_preg;
    end
end
always @ (ap_start or ap_CS_fsm or s_in_V_V_TVALID or ap_sig_ioackin_m_mm2s_ctl_ARREADY or ap_sig_ioackin_m_s2mm_ctl_ARREADY or ap_sig_bdd_431 or ap_sig_bdd_509 or ap_sig_bdd_538 or ap_sig_ioackin_m_mm2s_ctl_AWREADY or ap_sig_ioackin_m_mm2s_ctl_WREADY or ap_sig_ioackin_m_s2mm_ctl_AWREADY or ap_sig_ioackin_m_s2mm_ctl_WREADY or tmp_10_fu_1002_p2 or ap_sig_bdd_583 or ap_sig_ioackin_s_out_V_V_TREADY or ap_sig_bdd_2232)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~((ap_start == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        ap_ST_st3_fsm_2 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st4_fsm_3 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_431)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        ap_ST_st5_fsm_4 : 
            if (~ap_sig_bdd_509) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        ap_ST_st6_fsm_5 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        ap_ST_st7_fsm_6 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_538)) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        ap_ST_st8_fsm_7 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
        ap_ST_st9_fsm_8 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end
        ap_ST_st10_fsm_9 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_2232)) begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end
        ap_ST_st11_fsm_10 : 
            if (~ap_sig_bdd_509) begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        ap_ST_st12_fsm_11 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) begin
                ap_NS_fsm = ap_ST_st13_fsm_12;
            end else begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end
        ap_ST_st13_fsm_12 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_ARREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_ARREADY) | ap_sig_bdd_538)) begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end else begin
                ap_NS_fsm = ap_ST_st13_fsm_12;
            end
        ap_ST_st14_fsm_13 : 
            if (~ap_sig_bdd_509) begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end else begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end
        ap_ST_st15_fsm_14 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end else begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end
        ap_ST_st16_fsm_15 : 
            if (~(ap_sig_bdd_538 | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end else begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end
        ap_ST_st17_fsm_16 : 
            if (~(ap_sig_bdd_538 | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_mm2s_ctl_WREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_s2mm_ctl_WREADY))) begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end else begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end
        ap_ST_st18_fsm_17 : 
            if (~ap_sig_bdd_538) begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end else begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end
        ap_ST_st19_fsm_18 : 
            if (((tmp_10_fu_1002_p2 == ap_const_lv1_0) & ~ap_sig_bdd_583)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if ((~(tmp_10_fu_1002_p2 == ap_const_lv1_0) & ~ap_sig_bdd_583)) begin
                ap_NS_fsm = ap_ST_st20_fsm_19;
            end else begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end
        ap_ST_st20_fsm_19 : 
            if (~(s_in_V_V_TVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st21_fsm_20;
            end else begin
                ap_NS_fsm = ap_ST_st20_fsm_19;
            end
        ap_ST_st21_fsm_20 : 
            if (~(s_in_V_V_TVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st22_fsm_21;
            end else begin
                ap_NS_fsm = ap_ST_st21_fsm_20;
            end
        ap_ST_st22_fsm_21 : 
            if (~(s_in_V_V_TVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st23_fsm_22;
            end else begin
                ap_NS_fsm = ap_ST_st22_fsm_21;
            end
        ap_ST_st23_fsm_22 : 
            ap_NS_fsm = ap_ST_st24_fsm_23;
        ap_ST_st24_fsm_23 : 
            ap_NS_fsm = ap_ST_st25_fsm_24;
        ap_ST_st25_fsm_24 : 
            ap_NS_fsm = ap_ST_st26_fsm_25;
        ap_ST_st26_fsm_25 : 
            ap_NS_fsm = ap_ST_st27_fsm_26;
        ap_ST_st27_fsm_26 : 
            ap_NS_fsm = ap_ST_st28_fsm_27;
        ap_ST_st28_fsm_27 : 
            ap_NS_fsm = ap_ST_st29_fsm_28;
        ap_ST_st29_fsm_28 : 
            ap_NS_fsm = ap_ST_st30_fsm_29;
        ap_ST_st30_fsm_29 : 
            ap_NS_fsm = ap_ST_st31_fsm_30;
        ap_ST_st31_fsm_30 : 
            ap_NS_fsm = ap_ST_st32_fsm_31;
        ap_ST_st32_fsm_31 : 
            ap_NS_fsm = ap_ST_st33_fsm_32;
        ap_ST_st33_fsm_32 : 
            ap_NS_fsm = ap_ST_st34_fsm_33;
        ap_ST_st34_fsm_33 : 
            ap_NS_fsm = ap_ST_st35_fsm_34;
        ap_ST_st35_fsm_34 : 
            ap_NS_fsm = ap_ST_st36_fsm_35;
        ap_ST_st36_fsm_35 : 
            ap_NS_fsm = ap_ST_st37_fsm_36;
        ap_ST_st37_fsm_36 : 
            ap_NS_fsm = ap_ST_st38_fsm_37;
        ap_ST_st38_fsm_37 : 
            ap_NS_fsm = ap_ST_st39_fsm_38;
        ap_ST_st39_fsm_38 : 
            ap_NS_fsm = ap_ST_st40_fsm_39;
        ap_ST_st40_fsm_39 : 
            ap_NS_fsm = ap_ST_st41_fsm_40;
        ap_ST_st41_fsm_40 : 
            ap_NS_fsm = ap_ST_st42_fsm_41;
        ap_ST_st42_fsm_41 : 
            if (~(ap_const_logic_0 == ap_sig_ioackin_s_out_V_V_TREADY)) begin
                ap_NS_fsm = ap_ST_st43_fsm_42;
            end else begin
                ap_NS_fsm = ap_ST_st42_fsm_41;
            end
        ap_ST_st43_fsm_42 : 
            if (~(ap_const_logic_0 == ap_sig_ioackin_s_out_V_V_TREADY)) begin
                ap_NS_fsm = ap_ST_st44_fsm_43;
            end else begin
                ap_NS_fsm = ap_ST_st43_fsm_42;
            end
        ap_ST_st44_fsm_43 : 
            if (~(ap_const_logic_0 == ap_sig_ioackin_s_out_V_V_TREADY)) begin
                ap_NS_fsm = ap_ST_st45_fsm_44;
            end else begin
                ap_NS_fsm = ap_ST_st44_fsm_43;
            end
        ap_ST_st45_fsm_44 : 
            if (~(ap_const_logic_0 == ap_sig_ioackin_s_out_V_V_TREADY)) begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end else begin
                ap_NS_fsm = ap_ST_st45_fsm_44;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign ap_return = ap_const_lv1_1;

/// ap_sig_bdd_2232 assign process. ///
always @ (m_mm2s_ctl_RVALID or m_mm2s_ctl_BVALID or m_s2mm_ctl_RVALID or m_s2mm_ctl_BVALID)
begin
    ap_sig_bdd_2232 = ((m_mm2s_ctl_RVALID == ap_const_logic_0) | (m_mm2s_ctl_BVALID == ap_const_logic_0) | (m_s2mm_ctl_RVALID == ap_const_logic_0) | (m_s2mm_ctl_BVALID == ap_const_logic_0));
end

/// ap_sig_bdd_431 assign process. ///
always @ (sourceAddress_ap_vld_in_sig or key_in_V_ap_vld_in_sig or iv_V_ap_vld_in_sig or destinationAddress_ap_vld_in_sig or numBytes_ap_vld_in_sig or mode_ap_vld_in_sig or m_mm2s_ctl_RVALID or m_mm2s_ctl_BVALID or m_s2mm_ctl_RVALID or m_s2mm_ctl_BVALID)
begin
    ap_sig_bdd_431 = ((mode_ap_vld_in_sig == ap_const_logic_0) | (numBytes_ap_vld_in_sig == ap_const_logic_0) | (destinationAddress_ap_vld_in_sig == ap_const_logic_0) | (sourceAddress_ap_vld_in_sig == ap_const_logic_0) | (m_mm2s_ctl_RVALID == ap_const_logic_0) | (m_mm2s_ctl_BVALID == ap_const_logic_0) | (m_s2mm_ctl_RVALID == ap_const_logic_0) | (m_s2mm_ctl_BVALID == ap_const_logic_0) | (key_in_V_ap_vld_in_sig == ap_const_logic_0) | (iv_V_ap_vld_in_sig == ap_const_logic_0));
end

/// ap_sig_bdd_509 assign process. ///
always @ (m_mm2s_ctl_RVALID or m_s2mm_ctl_RVALID)
begin
    ap_sig_bdd_509 = ((m_mm2s_ctl_RVALID == ap_const_logic_0) | (m_s2mm_ctl_RVALID == ap_const_logic_0));
end

/// ap_sig_bdd_538 assign process. ///
always @ (m_mm2s_ctl_BVALID or m_s2mm_ctl_BVALID)
begin
    ap_sig_bdd_538 = ((m_mm2s_ctl_BVALID == ap_const_logic_0) | (m_s2mm_ctl_BVALID == ap_const_logic_0));
end

/// ap_sig_bdd_583 assign process. ///
always @ (s_in_V_V_TVALID or tmp_10_fu_1002_p2)
begin
    ap_sig_bdd_583 = ((s_in_V_V_TVALID == ap_const_logic_0) & ~(tmp_10_fu_1002_p2 == ap_const_lv1_0));
end
assign encrypted_data_V_1_fu_1110_p2 = (encrypted_data_V_reg_1697 ^ r_V_1_reg_1687);

/// grp_aestest_fu_337_ap_rst assign process. ///
always @ (ap_rst_n)
begin
    grp_aestest_fu_337_ap_rst = ~ap_rst_n;
end
assign grp_aestest_fu_337_ap_start = grp_aestest_fu_337_ap_start_ap_start_reg;
assign grp_aestest_fu_337_inptext_V_read = ((tmp_11_reg_1507)? r_V_fu_1069_p2: rhs_V_Result_s_fu_1075_p3);
assign grp_aestest_fu_337_key_V_read = key_local_V_0_s_reg_1599;
assign grp_fu_391_p4 = {{s_in_V_V_TDATA[ap_const_lv32_F : ap_const_lv32_8]}};
assign grp_fu_401_p4 = {{s_in_V_V_TDATA[ap_const_lv32_17 : ap_const_lv32_10]}};
assign grp_fu_411_p4 = {{s_in_V_V_TDATA[ap_const_lv32_1F : ap_const_lv32_18]}};
assign iterations_V_fu_1007_p2 = (t_V_1_reg_325 + ap_const_lv128_lc_2);
assign iv_local_V_1_fu_1103_p3 = ((tmp_14_reg_1512)? iv_local_V_fu_1090_p2: aes_data_V_3_reg_315);
assign iv_local_V_fu_1090_p2 = (aes_data_V_3_reg_315 + ap_const_lv128_lc_2);
assign iv_local_V_s_fu_979_p17 = {{{{{{{{{{{{{{{{tmp_332_reg_1352}, {p_Result_9_1_reg_1362}}, {p_Result_9_2_reg_1372}}, {p_Result_9_3_reg_1382}}, {p_Result_9_4_reg_1392}}, {p_Result_9_5_reg_1402}}, {p_Result_9_6_reg_1412}}, {p_Result_9_7_reg_1422}}, {p_Result_9_8_reg_1432}}, {p_Result_9_9_reg_1442}}, {p_Result_9_s_reg_1452}}, {p_Result_9_10_reg_1462}}, {p_Result_9_11_reg_1472}}, {p_Result_9_12_reg_1482}}, {p_Result_9_13_reg_1492}}, {p_Result_9_14_reg_1502}};
assign key_local_V_0_s_fu_959_p17 = {{{{{{{{{{{{{{{{tmp_331_reg_1347}, {p_Result_1_reg_1357}}, {p_Result_2_reg_1367}}, {p_Result_3_reg_1377}}, {p_Result_4_reg_1387}}, {p_Result_5_reg_1397}}, {p_Result_6_reg_1407}}, {p_Result_7_reg_1417}}, {p_Result_8_reg_1427}}, {p_Result_s_reg_1437}}, {p_Result_10_reg_1447}}, {p_Result_11_reg_1457}}, {p_Result_12_reg_1467}}, {p_Result_13_reg_1477}}, {p_Result_14_reg_1487}}, {p_Result_15_reg_1497}};
assign m_mm2s_ctl_ARADDR = ap_const_lv32_0;
assign m_mm2s_ctl_ARBURST = ap_const_lv2_0;
assign m_mm2s_ctl_ARCACHE = ap_const_lv4_0;
assign m_mm2s_ctl_ARID = ap_const_lv1_0;
assign m_mm2s_ctl_ARLEN = ap_const_lv32_1;
assign m_mm2s_ctl_ARLOCK = ap_const_lv2_0;
assign m_mm2s_ctl_ARPROT = ap_const_lv3_0;
assign m_mm2s_ctl_ARQOS = ap_const_lv4_0;
assign m_mm2s_ctl_ARREGION = ap_const_lv4_0;
assign m_mm2s_ctl_ARSIZE = ap_const_lv3_0;
assign m_mm2s_ctl_ARUSER = ap_const_lv1_0;
assign m_mm2s_ctl_AWBURST = ap_const_lv2_0;
assign m_mm2s_ctl_AWCACHE = ap_const_lv4_0;
assign m_mm2s_ctl_AWID = ap_const_lv1_0;
assign m_mm2s_ctl_AWLEN = ap_const_lv32_1;
assign m_mm2s_ctl_AWLOCK = ap_const_lv2_0;
assign m_mm2s_ctl_AWPROT = ap_const_lv3_0;
assign m_mm2s_ctl_AWQOS = ap_const_lv4_0;
assign m_mm2s_ctl_AWREGION = ap_const_lv4_0;
assign m_mm2s_ctl_AWSIZE = ap_const_lv3_0;
assign m_mm2s_ctl_AWUSER = ap_const_lv1_0;
assign m_mm2s_ctl_WID = ap_const_lv1_0;
assign m_mm2s_ctl_WLAST = ap_const_logic_0;
assign m_mm2s_ctl_WSTRB = ap_const_lv4_F;
assign m_mm2s_ctl_WUSER = ap_const_lv1_0;
assign m_s2mm_ctl_ARBURST = ap_const_lv2_0;
assign m_s2mm_ctl_ARCACHE = ap_const_lv4_0;
assign m_s2mm_ctl_ARID = ap_const_lv1_0;
assign m_s2mm_ctl_ARLEN = ap_const_lv32_1;
assign m_s2mm_ctl_ARLOCK = ap_const_lv2_0;
assign m_s2mm_ctl_ARPROT = ap_const_lv3_0;
assign m_s2mm_ctl_ARQOS = ap_const_lv4_0;
assign m_s2mm_ctl_ARREGION = ap_const_lv4_0;
assign m_s2mm_ctl_ARSIZE = ap_const_lv3_0;
assign m_s2mm_ctl_ARUSER = ap_const_lv1_0;
assign m_s2mm_ctl_AWBURST = ap_const_lv2_0;
assign m_s2mm_ctl_AWCACHE = ap_const_lv4_0;
assign m_s2mm_ctl_AWID = ap_const_lv1_0;
assign m_s2mm_ctl_AWLEN = ap_const_lv32_1;
assign m_s2mm_ctl_AWLOCK = ap_const_lv2_0;
assign m_s2mm_ctl_AWPROT = ap_const_lv3_0;
assign m_s2mm_ctl_AWQOS = ap_const_lv4_0;
assign m_s2mm_ctl_AWREGION = ap_const_lv4_0;
assign m_s2mm_ctl_AWSIZE = ap_const_lv3_0;
assign m_s2mm_ctl_AWUSER = ap_const_lv1_0;
assign m_s2mm_ctl_WID = ap_const_lv1_0;
assign m_s2mm_ctl_WLAST = ap_const_logic_0;
assign m_s2mm_ctl_WSTRB = ap_const_lv4_F;
assign m_s2mm_ctl_WUSER = ap_const_lv1_0;
assign m_s2mm_ctl_addr_fu_421_p2 = ap_const_lv64_C;
assign numIterations_fu_912_p2 = (tmp_cast_fu_906_p1 + tmp_4_cast_fu_909_p1);
assign p_Repl2_11_fu_1027_p1 = s_in_V_V_TDATA[7:0];
assign p_Repl2_15_fu_1034_p1 = s_in_V_V_TDATA[7:0];
assign p_Repl2_16_fu_1124_p4 = {{encrypted_data_V_1_fu_1110_p2[ap_const_lv32_6F : ap_const_lv32_68]}};
assign p_Repl2_17_fu_1134_p4 = {{encrypted_data_V_1_fu_1110_p2[ap_const_lv32_77 : ap_const_lv32_70]}};
assign p_Repl2_18_fu_1144_p4 = {{encrypted_data_V_1_fu_1110_p2[ap_const_lv32_7F : ap_const_lv32_78]}};
assign p_Repl2_19_fu_1114_p4 = {{encrypted_data_V_1_fu_1110_p2[ap_const_lv32_67 : ap_const_lv32_60]}};
assign p_Repl2_31_fu_1247_p1 = encrypted_data_V_1_fu_1110_p2[7:0];
assign p_Repl2_3_fu_1013_p1 = s_in_V_V_TDATA[7:0];
assign p_Repl2_7_fu_1023_p1 = s_in_V_V_TDATA[7:0];
assign p_Result_16_fu_1286_p5 = {{{{p_Repl2_23_reg_1702}, {p_Repl2_20_reg_1707}}, {p_Repl2_21_reg_1712}}, {p_Repl2_22_reg_1717}};
assign p_Result_17_fu_1295_p5 = {{{{p_Repl2_27_reg_1722}, {p_Repl2_24_reg_1727}}, {p_Repl2_25_reg_1732}}, {p_Repl2_26_reg_1737}};
assign p_Result_18_fu_1304_p5 = {{{{p_Repl2_31_reg_1742}, {p_Repl2_30_reg_1747}}, {p_Repl2_28_reg_1752}}, {p_Repl2_29_reg_1757}};
assign p_Result_9_fu_1154_p5 = {{{{p_Repl2_19_fu_1114_p4}, {p_Repl2_16_fu_1124_p4}}, {p_Repl2_17_fu_1134_p4}}, {p_Repl2_18_fu_1144_p4}};
assign p_Result_s_101_fu_1038_p17 = {{{{{{{{{{{{{{{{p_Repl2_3_reg_1622}, {p_Repl2_2_reg_1627}}, {p_Repl2_1_reg_1632}}, {p_Repl2_s_reg_1637}}, {p_Repl2_7_reg_1647}}, {p_Repl2_6_reg_1652}}, {p_Repl2_5_reg_1657}}, {p_Repl2_4_reg_1662}}, {p_Repl2_11_reg_1667}}, {p_Repl2_10_reg_1672}}, {p_Repl2_9_reg_1677}}, {p_Repl2_8_reg_1682}}, {p_Repl2_15_fu_1034_p1}}, {grp_fu_391_p4}}, {grp_fu_401_p4}}, {grp_fu_411_p4}};
assign r_V_1_fu_1096_p3 = ((tmp_14_reg_1512)? p_Result_s_101_fu_1038_p17: ap_const_lv128_lc_1);
assign r_V_fu_1069_p2 = (p_Result_s_101_fu_1038_p17 ^ storemerge_v_fu_1062_p3);
assign read_length_fu_936_p3 = {{tmp_329_reg_1579}, {ap_const_lv4_0}};
assign rhs_V_Result_s_fu_1075_p3 = ((tmp_14_reg_1512)? aes_data_V_3_reg_315: p_Result_s_101_fu_1038_p17);
assign storemerge_v_fu_1062_p3 = ((tmp_13_reg_1642)? aes_data_V_3_reg_315: rhs_V_fu_220);
assign tmp_10_fu_1002_p2 = (t_V_1_reg_325 < tmp_1_reg_1609? 1'b1: 1'b0);
assign tmp_11_fu_766_p2 = (mode_in_sig == ap_const_lv32_1? 1'b1: 1'b0);
assign tmp_13_fu_1017_p2 = (t_V_1_reg_325 == ap_const_lv128_lc_1? 1'b1: 1'b0);
assign tmp_14_fu_772_p2 = (mode_in_sig == ap_const_lv32_2? 1'b1: 1'b0);
assign tmp_1_fu_999_p1 = $unsigned(numIterations_reg_1569);
assign tmp_325_fu_448_p1 = numBytes_in_sig[3:0];
assign tmp_326_fu_788_p1 = m_mm2s_ctl_RDATA[1:0];
assign tmp_327_fu_802_p1 = m_s2mm_ctl_RDATA[1:0];
assign tmp_328_fu_870_p1 = m_mm2s_ctl_RDATA[11:0];
assign tmp_329_fu_925_p1 = numIterations_fu_912_p2[27:0];
assign tmp_330_fu_884_p1 = m_s2mm_ctl_RDATA[11:0];
assign tmp_331_fu_458_p1 = key_in_V_in_sig[7:0];
assign tmp_332_fu_462_p1 = iv_V_in_sig[7:0];
assign tmp_3_fu_452_p2 = (tmp_325_fu_448_p1 != ap_const_lv4_0? 1'b1: 1'b0);
assign tmp_4_cast_fu_909_p1 = $unsigned(tmp_3_reg_1342);
assign tmp_5_fu_806_p4 = {{{tmp_39_reg_1519}, {ap_const_lv1_1}}, {tmp_326_reg_1524}};
assign tmp_6_fu_815_p4 = {{{tmp_40_reg_1529}, {ap_const_lv1_1}}, {tmp_327_reg_1534}};
assign tmp_7_fu_844_p3 = {{tmp_41_reg_1539}, {ap_const_lv1_1}};
assign tmp_8_fu_888_p4 = {{{tmp_42_reg_1549}, {ap_const_lv1_1}}, {tmp_328_reg_1554}};
assign tmp_9_fu_852_p3 = {{tmp_43_reg_1544}, {ap_const_lv1_1}};
assign tmp_cast_fu_906_p1 = $unsigned(tmp_reg_1337);
assign tmp_s_fu_897_p4 = {{{tmp_44_reg_1559}, {ap_const_lv1_1}}, {tmp_330_reg_1564}};
always @ (posedge ap_clk)
begin
    m_s2mm_ctl_addr_reg_1331[31:0] <= 32'b00000000000000000000000000001100;
    tmp_1_reg_1609[127:29] <= 99'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
end



endmodule //aes

