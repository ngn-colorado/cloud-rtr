// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _aes_HH_
#define _aes_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "aestest.h"
#include "aes_AXILiteS_s_axi.h"
#include "aes_ddr_V_m_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 7,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32,
         unsigned int C_M_AXI_DDR_V_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_DDR_V_ID_WIDTH = 1,
         unsigned int C_M_AXI_DDR_V_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_DDR_V_DATA_WIDTH = 128,
         unsigned int C_M_AXI_DDR_V_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_DDR_V_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_DDR_V_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_DDR_V_BUSER_WIDTH = 1>
struct aes : public sc_module {
    // Port declarations 65
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_ddr_V_AWVALID;
    sc_in< sc_logic > m_axi_ddr_V_AWREADY;
    sc_out< sc_uint<C_M_AXI_DDR_V_ADDR_WIDTH> > m_axi_ddr_V_AWADDR;
    sc_out< sc_uint<C_M_AXI_DDR_V_ID_WIDTH> > m_axi_ddr_V_AWID;
    sc_out< sc_lv<8> > m_axi_ddr_V_AWLEN;
    sc_out< sc_lv<3> > m_axi_ddr_V_AWSIZE;
    sc_out< sc_lv<2> > m_axi_ddr_V_AWBURST;
    sc_out< sc_lv<2> > m_axi_ddr_V_AWLOCK;
    sc_out< sc_lv<4> > m_axi_ddr_V_AWCACHE;
    sc_out< sc_lv<3> > m_axi_ddr_V_AWPROT;
    sc_out< sc_lv<4> > m_axi_ddr_V_AWQOS;
    sc_out< sc_lv<4> > m_axi_ddr_V_AWREGION;
    sc_out< sc_uint<C_M_AXI_DDR_V_AWUSER_WIDTH> > m_axi_ddr_V_AWUSER;
    sc_out< sc_logic > m_axi_ddr_V_WVALID;
    sc_in< sc_logic > m_axi_ddr_V_WREADY;
    sc_out< sc_uint<C_M_AXI_DDR_V_DATA_WIDTH> > m_axi_ddr_V_WDATA;
    sc_out< sc_uint<C_M_AXI_DDR_V_DATA_WIDTH/8> > m_axi_ddr_V_WSTRB;
    sc_out< sc_logic > m_axi_ddr_V_WLAST;
    sc_out< sc_uint<C_M_AXI_DDR_V_ID_WIDTH> > m_axi_ddr_V_WID;
    sc_out< sc_uint<C_M_AXI_DDR_V_WUSER_WIDTH> > m_axi_ddr_V_WUSER;
    sc_out< sc_logic > m_axi_ddr_V_ARVALID;
    sc_in< sc_logic > m_axi_ddr_V_ARREADY;
    sc_out< sc_uint<C_M_AXI_DDR_V_ADDR_WIDTH> > m_axi_ddr_V_ARADDR;
    sc_out< sc_uint<C_M_AXI_DDR_V_ID_WIDTH> > m_axi_ddr_V_ARID;
    sc_out< sc_lv<8> > m_axi_ddr_V_ARLEN;
    sc_out< sc_lv<3> > m_axi_ddr_V_ARSIZE;
    sc_out< sc_lv<2> > m_axi_ddr_V_ARBURST;
    sc_out< sc_lv<2> > m_axi_ddr_V_ARLOCK;
    sc_out< sc_lv<4> > m_axi_ddr_V_ARCACHE;
    sc_out< sc_lv<3> > m_axi_ddr_V_ARPROT;
    sc_out< sc_lv<4> > m_axi_ddr_V_ARQOS;
    sc_out< sc_lv<4> > m_axi_ddr_V_ARREGION;
    sc_out< sc_uint<C_M_AXI_DDR_V_ARUSER_WIDTH> > m_axi_ddr_V_ARUSER;
    sc_in< sc_logic > m_axi_ddr_V_RVALID;
    sc_out< sc_logic > m_axi_ddr_V_RREADY;
    sc_in< sc_uint<C_M_AXI_DDR_V_DATA_WIDTH> > m_axi_ddr_V_RDATA;
    sc_in< sc_logic > m_axi_ddr_V_RLAST;
    sc_in< sc_uint<C_M_AXI_DDR_V_ID_WIDTH> > m_axi_ddr_V_RID;
    sc_in< sc_uint<C_M_AXI_DDR_V_RUSER_WIDTH> > m_axi_ddr_V_RUSER;
    sc_in< sc_lv<2> > m_axi_ddr_V_RRESP;
    sc_in< sc_logic > m_axi_ddr_V_BVALID;
    sc_out< sc_logic > m_axi_ddr_V_BREADY;
    sc_in< sc_lv<2> > m_axi_ddr_V_BRESP;
    sc_in< sc_uint<C_M_AXI_DDR_V_ID_WIDTH> > m_axi_ddr_V_BID;
    sc_in< sc_uint<C_M_AXI_DDR_V_BUSER_WIDTH> > m_axi_ddr_V_BUSER;
    sc_out< sc_logic > interrupt;


    // Module declarations
    aes(sc_module_name name);
    SC_HAS_PROCESS(aes);

    ~aes();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    aes_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* aes_AXILiteS_s_axi_U;
    aes_ddr_V_m_axi<128,32,2,C_M_AXI_DDR_V_ID_WIDTH,C_M_AXI_DDR_V_ADDR_WIDTH,C_M_AXI_DDR_V_DATA_WIDTH,C_M_AXI_DDR_V_AWUSER_WIDTH,C_M_AXI_DDR_V_ARUSER_WIDTH,C_M_AXI_DDR_V_WUSER_WIDTH,C_M_AXI_DDR_V_RUSER_WIDTH,C_M_AXI_DDR_V_BUSER_WIDTH,C_M_AXI_DDR_V_TARGET_ADDR,C_M_AXI_DDR_V_USER_VALUE,C_M_AXI_DDR_V_PROT_VALUE,C_M_AXI_DDR_V_CACHE_VALUE>* aes_ddr_V_m_axi_U;
    aestest* grp_aestest_fu_167;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > sourceAddress;
    sc_signal< sc_lv<32> > sourceAddress_in_sig;
    sc_signal< sc_lv<32> > sourceAddress_preg;
    sc_signal< sc_logic > sourceAddress_ap_vld;
    sc_signal< sc_logic > sourceAddress_ap_vld_in_sig;
    sc_signal< sc_logic > sourceAddress_ap_vld_preg;
    sc_signal< sc_lv<128> > key_in_V;
    sc_signal< sc_lv<128> > key_in_V_in_sig;
    sc_signal< sc_lv<128> > key_in_V_preg;
    sc_signal< sc_logic > key_in_V_ap_vld;
    sc_signal< sc_logic > key_in_V_ap_vld_in_sig;
    sc_signal< sc_logic > key_in_V_ap_vld_preg;
    sc_signal< sc_lv<32> > destinationAddress;
    sc_signal< sc_lv<32> > destinationAddress_in_sig;
    sc_signal< sc_lv<32> > destinationAddress_preg;
    sc_signal< sc_logic > destinationAddress_ap_vld;
    sc_signal< sc_logic > destinationAddress_ap_vld_in_sig;
    sc_signal< sc_logic > destinationAddress_ap_vld_preg;
    sc_signal< sc_lv<32> > length_r;
    sc_signal< sc_lv<32> > length_r_in_sig;
    sc_signal< sc_lv<32> > length_r_preg;
    sc_signal< sc_logic > length_r_ap_vld;
    sc_signal< sc_logic > length_r_ap_vld_in_sig;
    sc_signal< sc_logic > length_r_ap_vld_preg;
    sc_signal< sc_lv<1> > ap_return;
    sc_signal< sc_logic > ddr_V_AWVALID;
    sc_signal< sc_logic > ddr_V_AWREADY;
    sc_signal< sc_lv<32> > ddr_V_AWADDR;
    sc_signal< sc_lv<1> > ddr_V_AWID;
    sc_signal< sc_lv<32> > ddr_V_AWLEN;
    sc_signal< sc_lv<3> > ddr_V_AWSIZE;
    sc_signal< sc_lv<2> > ddr_V_AWBURST;
    sc_signal< sc_lv<2> > ddr_V_AWLOCK;
    sc_signal< sc_lv<4> > ddr_V_AWCACHE;
    sc_signal< sc_lv<3> > ddr_V_AWPROT;
    sc_signal< sc_lv<4> > ddr_V_AWQOS;
    sc_signal< sc_lv<4> > ddr_V_AWREGION;
    sc_signal< sc_lv<1> > ddr_V_AWUSER;
    sc_signal< sc_logic > ddr_V_WVALID;
    sc_signal< sc_logic > ddr_V_WREADY;
    sc_signal< sc_lv<128> > ddr_V_WDATA;
    sc_signal< sc_lv<16> > ddr_V_WSTRB;
    sc_signal< sc_logic > ddr_V_WLAST;
    sc_signal< sc_lv<1> > ddr_V_WID;
    sc_signal< sc_lv<1> > ddr_V_WUSER;
    sc_signal< sc_logic > ddr_V_ARVALID;
    sc_signal< sc_logic > ddr_V_ARREADY;
    sc_signal< sc_lv<32> > ddr_V_ARADDR;
    sc_signal< sc_lv<1> > ddr_V_ARID;
    sc_signal< sc_lv<32> > ddr_V_ARLEN;
    sc_signal< sc_lv<3> > ddr_V_ARSIZE;
    sc_signal< sc_lv<2> > ddr_V_ARBURST;
    sc_signal< sc_lv<2> > ddr_V_ARLOCK;
    sc_signal< sc_lv<4> > ddr_V_ARCACHE;
    sc_signal< sc_lv<3> > ddr_V_ARPROT;
    sc_signal< sc_lv<4> > ddr_V_ARQOS;
    sc_signal< sc_lv<4> > ddr_V_ARREGION;
    sc_signal< sc_lv<1> > ddr_V_ARUSER;
    sc_signal< sc_logic > ddr_V_RVALID;
    sc_signal< sc_logic > ddr_V_RREADY;
    sc_signal< sc_lv<128> > ddr_V_RDATA;
    sc_signal< sc_logic > ddr_V_RLAST;
    sc_signal< sc_lv<1> > ddr_V_RID;
    sc_signal< sc_lv<1> > ddr_V_RUSER;
    sc_signal< sc_lv<2> > ddr_V_RRESP;
    sc_signal< sc_logic > ddr_V_BVALID;
    sc_signal< sc_logic > ddr_V_BREADY;
    sc_signal< sc_lv<2> > ddr_V_BRESP;
    sc_signal< sc_lv<1> > ddr_V_BID;
    sc_signal< sc_lv<1> > ddr_V_BUSER;
    sc_signal< bool > ap_sig_bdd_250;
    sc_signal< sc_lv<32> > sourceAddressLocal_2_fu_236_p1;
    sc_signal< sc_lv<32> > destinationAddressLocal_2_fu_253_p1;
    sc_signal< sc_lv<32> > tmp_fu_257_p2;
    sc_signal< sc_lv<32> > tmp_reg_333;
    sc_signal< sc_lv<1> > exitcond_fu_262_p2;
    sc_signal< sc_logic > ap_sig_ioackin_ddr_V_ARREADY;
    sc_signal< sc_lv<32> > sourceAddressLocal_1_fu_278_p2;
    sc_signal< sc_lv<32> > sourceAddressLocal_1_reg_347;
    sc_signal< sc_lv<128> > data_V_reg_352;
    sc_signal< sc_lv<128> > grp_aestest_fu_167_ap_return;
    sc_signal< sc_lv<128> > encrypted_data_V_reg_357;
    sc_signal< sc_logic > ap_sig_ioackin_ddr_V_AWREADY;
    sc_signal< sc_logic > ap_sig_ioackin_ddr_V_WREADY;
    sc_signal< sc_lv<32> > destinationAddressLocal_1_fu_295_p2;
    sc_signal< sc_lv<32> > destinationAddressLocal_1_reg_367;
    sc_signal< sc_logic > grp_aestest_fu_167_ap_rst;
    sc_signal< sc_logic > grp_aestest_fu_167_ap_start;
    sc_signal< sc_logic > grp_aestest_fu_167_ap_done;
    sc_signal< sc_logic > grp_aestest_fu_167_ap_idle;
    sc_signal< sc_logic > grp_aestest_fu_167_ap_ready;
    sc_signal< sc_logic > grp_aestest_fu_167_ap_ce;
    sc_signal< sc_lv<128> > grp_aestest_fu_167_inptext_V_read;
    sc_signal< sc_lv<128> > grp_aestest_fu_167_key_V_read;
    sc_signal< sc_lv<32> > sourceAddressLocal1_reg_147;
    sc_signal< sc_lv<32> > destinationAddressLocal1_reg_156;
    sc_signal< sc_logic > grp_aestest_fu_167_ap_start_ap_start_reg;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_lv<64> > tmp_1_fu_267_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_284_p1;
    sc_signal< sc_logic > ap_reg_ioackin_ddr_V_ARREADY;
    sc_signal< sc_logic > ap_reg_ioackin_ddr_V_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_ddr_V_WREADY;
    sc_signal< sc_lv<32> > sourceAddress_assign_fu_100;
    sc_signal< sc_lv<32> > destinationAddress_assign_fu_104;
    sc_signal< sc_lv<28> > sourceAddressLocal_fu_226_p4;
    sc_signal< sc_lv<28> > destinationAddressLocal_fu_243_p4;
    sc_signal< bool > ap_sig_bdd_1781;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_st1_fsm_0;
    static const sc_lv<5> ap_ST_st2_fsm_1;
    static const sc_lv<5> ap_ST_st3_fsm_2;
    static const sc_lv<5> ap_ST_st4_fsm_3;
    static const sc_lv<5> ap_ST_st5_fsm_4;
    static const sc_lv<5> ap_ST_st6_fsm_5;
    static const sc_lv<5> ap_ST_st7_fsm_6;
    static const sc_lv<5> ap_ST_st8_fsm_7;
    static const sc_lv<5> ap_ST_st9_fsm_8;
    static const sc_lv<5> ap_ST_st10_fsm_9;
    static const sc_lv<5> ap_ST_st11_fsm_10;
    static const sc_lv<5> ap_ST_st12_fsm_11;
    static const sc_lv<5> ap_ST_st13_fsm_12;
    static const sc_lv<5> ap_ST_st14_fsm_13;
    static const sc_lv<5> ap_ST_st15_fsm_14;
    static const sc_lv<5> ap_ST_st16_fsm_15;
    static const sc_lv<5> ap_ST_st17_fsm_16;
    static const sc_lv<5> ap_ST_st18_fsm_17;
    static const sc_lv<5> ap_ST_st19_fsm_18;
    static const sc_lv<5> ap_ST_st20_fsm_19;
    static const sc_lv<5> ap_ST_st21_fsm_20;
    static const sc_lv<5> ap_ST_st22_fsm_21;
    static const sc_lv<5> ap_ST_st23_fsm_22;
    static const sc_lv<5> ap_ST_st24_fsm_23;
    static const sc_lv<5> ap_ST_st25_fsm_24;
    static const sc_lv<5> ap_ST_st26_fsm_25;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<128> ap_const_lv128_lc_1;
    static const int C_DATA_WIDTH;
    static const int C_M_AXI_DDR_V_TARGET_ADDR;
    static const int C_M_AXI_DDR_V_USER_VALUE;
    static const int C_M_AXI_DDR_V_PROT_VALUE;
    static const int C_M_AXI_DDR_V_CACHE_VALUE;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<16> ap_const_lv16_FFFF;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<1> ap_const_lv1_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_sig_bdd_1781();
    void thread_ap_sig_bdd_250();
    void thread_ap_sig_ioackin_ddr_V_ARREADY();
    void thread_ap_sig_ioackin_ddr_V_AWREADY();
    void thread_ap_sig_ioackin_ddr_V_WREADY();
    void thread_ddr_V_ARADDR();
    void thread_ddr_V_ARBURST();
    void thread_ddr_V_ARCACHE();
    void thread_ddr_V_ARID();
    void thread_ddr_V_ARLEN();
    void thread_ddr_V_ARLOCK();
    void thread_ddr_V_ARPROT();
    void thread_ddr_V_ARQOS();
    void thread_ddr_V_ARREGION();
    void thread_ddr_V_ARSIZE();
    void thread_ddr_V_ARUSER();
    void thread_ddr_V_ARVALID();
    void thread_ddr_V_AWADDR();
    void thread_ddr_V_AWBURST();
    void thread_ddr_V_AWCACHE();
    void thread_ddr_V_AWID();
    void thread_ddr_V_AWLEN();
    void thread_ddr_V_AWLOCK();
    void thread_ddr_V_AWPROT();
    void thread_ddr_V_AWQOS();
    void thread_ddr_V_AWREGION();
    void thread_ddr_V_AWSIZE();
    void thread_ddr_V_AWUSER();
    void thread_ddr_V_AWVALID();
    void thread_ddr_V_BREADY();
    void thread_ddr_V_RREADY();
    void thread_ddr_V_WDATA();
    void thread_ddr_V_WID();
    void thread_ddr_V_WLAST();
    void thread_ddr_V_WSTRB();
    void thread_ddr_V_WUSER();
    void thread_ddr_V_WVALID();
    void thread_destinationAddressLocal_1_fu_295_p2();
    void thread_destinationAddressLocal_2_fu_253_p1();
    void thread_destinationAddressLocal_fu_243_p4();
    void thread_destinationAddress_ap_vld_in_sig();
    void thread_destinationAddress_in_sig();
    void thread_exitcond_fu_262_p2();
    void thread_grp_aestest_fu_167_ap_ce();
    void thread_grp_aestest_fu_167_ap_rst();
    void thread_grp_aestest_fu_167_ap_start();
    void thread_grp_aestest_fu_167_inptext_V_read();
    void thread_grp_aestest_fu_167_key_V_read();
    void thread_key_in_V_ap_vld_in_sig();
    void thread_key_in_V_in_sig();
    void thread_length_r_ap_vld_in_sig();
    void thread_length_r_in_sig();
    void thread_sourceAddressLocal_1_fu_278_p2();
    void thread_sourceAddressLocal_2_fu_236_p1();
    void thread_sourceAddressLocal_fu_226_p4();
    void thread_sourceAddress_ap_vld_in_sig();
    void thread_sourceAddress_in_sig();
    void thread_tmp_1_fu_267_p1();
    void thread_tmp_2_fu_284_p1();
    void thread_tmp_fu_257_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
