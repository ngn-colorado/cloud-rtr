// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

// Port list: {  1 1  }


#ifndef _qam_runner_cos_lut_H_
#define _qam_runner_cos_lut_H_



#include <systemc>
#include <iostream>
#include <fstream>
#include "AESL_pkg.h"

template<unsigned int READ_PORT_COUNT = 1,
         unsigned int WRITE_PORT_COUNT = 1,
         unsigned int DATA_WIDTH = 8,
         unsigned int ADDRESS_WIDTH = 8,
         unsigned int WORD_COUNT = 256>
struct qam_runner_cos_lut_core : public sc_core::sc_module
{
public:
    sc_core::sc_in< sc_dt::sc_lv< WRITE_PORT_COUNT*DATA_WIDTH > > d;
    sc_core::sc_out< sc_dt::sc_lv< READ_PORT_COUNT*DATA_WIDTH > > q;
    sc_core::sc_in < sc_dt::sc_lv< READ_PORT_COUNT*ADDRESS_WIDTH > > ra;
    sc_core::sc_in < sc_dt::sc_lv< READ_PORT_COUNT > > ce;
    sc_core::sc_in < sc_dt::sc_lv< WRITE_PORT_COUNT*ADDRESS_WIDTH > > wa;
    sc_core::sc_in < sc_dt::sc_lv< WRITE_PORT_COUNT > > we;
    sc_core::sc_in <sc_dt::sc_logic>  reset;
    sc_core::sc_in_clk  clk;

    SC_HAS_PROCESS(qam_runner_cos_lut_core);
    qam_runner_cos_lut_core(sc_core::sc_module_name) {
        mem = new sc_dt::sc_lv< DATA_WIDTH> [WORD_COUNT];

        SC_METHOD(proc_di);
        sensitive << d;

        SC_METHOD(proc_wai);
        sensitive << wa;

        SC_METHOD(proc_mem);
        sensitive << clk.pos();

        SC_METHOD(proc_rai);
        sensitive << ra;

        SC_METHOD(proc_rai_reg);
        sensitive << clk.pos();

        SC_METHOD(proc_qi);
        sensitive << clk.pos();
        for (unsigned i = 0; i < READ_PORT_COUNT; i++) {
            sensitive << rai_reg[i];
        }

        SC_METHOD(proc_q);
        sensitive << qi;

        for (unsigned i = 0; i < 7 ; i = i + 1) {
            mem[i] = "111111111111111";
        }
        mem[7] = "111111111111110";
        mem[8] = "111111111111110";
        mem[9] = "111111111111101";
        mem[10] = "111111111111100";
        mem[11] = "111111111111011";
        mem[12] = "111111111111010";
        mem[13] = "111111111111001";
        mem[14] = "111111111111000";
        mem[15] = "111111111110111";
        mem[16] = "111111111110110";
        mem[17] = "111111111110101";
        mem[18] = "111111111110100";
        mem[19] = "111111111110010";
        mem[20] = "111111111110001";
        mem[21] = "111111111101111";
        mem[22] = "111111111101101";
        mem[23] = "111111111101100";
        mem[24] = "111111111101010";
        mem[25] = "111111111101000";
        mem[26] = "111111111100110";
        mem[27] = "111111111100100";
        mem[28] = "111111111100010";
        mem[29] = "111111111100000";
        mem[30] = "111111111011101";
        mem[31] = "111111111011011";
        mem[32] = "111111111011001";
        mem[33] = "111111111010110";
        mem[34] = "111111111010011";
        mem[35] = "111111111010001";
        mem[36] = "111111111001110";
        mem[37] = "111111111001011";
        mem[38] = "111111111001000";
        mem[39] = "111111111000101";
        mem[40] = "111111111000010";
        mem[41] = "111111110111111";
        mem[42] = "111111110111100";
        mem[43] = "111111110111001";
        mem[44] = "111111110110101";
        mem[45] = "111111110110010";
        mem[46] = "111111110101110";
        mem[47] = "111111110101011";
        mem[48] = "111111110100111";
        mem[49] = "111111110100011";
        mem[50] = "111111110100000";
        mem[51] = "111111110011100";
        mem[52] = "111111110011000";
        mem[53] = "111111110010100";
        mem[54] = "111111110010000";
        mem[55] = "111111110001011";
        mem[56] = "111111110000111";
        mem[57] = "111111110000011";
        mem[58] = "111111101111110";
        mem[59] = "111111101111010";
        mem[60] = "111111101110101";
        mem[61] = "111111101110001";
        mem[62] = "111111101101100";
        mem[63] = "111111101100111";
        mem[64] = "111111101100010";
        mem[65] = "111111101011101";
        mem[66] = "111111101011000";
        mem[67] = "111111101010011";
        mem[68] = "111111101001110";
        mem[69] = "111111101001001";
        mem[70] = "111111101000011";
        mem[71] = "111111100111110";
        mem[72] = "111111100111000";
        mem[73] = "111111100110011";
        mem[74] = "111111100101101";
        mem[75] = "111111100100111";
        mem[76] = "111111100100010";
        mem[77] = "111111100011100";
        mem[78] = "111111100010110";
        mem[79] = "111111100010000";
        mem[80] = "111111100001010";
        mem[81] = "111111100000011";
        mem[82] = "111111011111101";
        mem[83] = "111111011110111";
        mem[84] = "111111011110000";
        mem[85] = "111111011101010";
        mem[86] = "111111011100011";
        mem[87] = "111111011011101";
        mem[88] = "111111011010110";
        mem[89] = "111111011001111";
        mem[90] = "111111011001000";
        mem[91] = "111111011000001";
        mem[92] = "111111010111010";
        mem[93] = "111111010110011";
        mem[94] = "111111010101100";
        mem[95] = "111111010100101";
        mem[96] = "111111010011101";
        mem[97] = "111111010010110";
        mem[98] = "111111010001110";
        mem[99] = "111111010000111";
        mem[100] = "111111001111111";
        mem[101] = "111111001111000";
        mem[102] = "111111001110000";
        mem[103] = "111111001101000";
        mem[104] = "111111001100000";
        mem[105] = "111111001011000";
        mem[106] = "111111001010000";
        mem[107] = "111111001001000";
        mem[108] = "111111000111111";
        mem[109] = "111111000110111";
        mem[110] = "111111000101111";
        mem[111] = "111111000100110";
        mem[112] = "111111000011110";
        mem[113] = "111111000010101";
        mem[114] = "111111000001100";
        mem[115] = "111111000000011";
        mem[116] = "111110111111011";
        mem[117] = "111110111110010";
        mem[118] = "111110111101001";
        mem[119] = "111110111100000";
        mem[120] = "111110111010110";
        mem[121] = "111110111001101";
        mem[122] = "111110111000100";
        mem[123] = "111110110111010";
        mem[124] = "111110110110001";
        mem[125] = "111110110100111";
        mem[126] = "111110110011110";
        mem[127] = "111110110010100";
        mem[128] = "111110110001010";
        mem[129] = "111110110000001";
        mem[130] = "111110101110111";
        mem[131] = "111110101101101";
        mem[132] = "111110101100011";
        mem[133] = "111110101011000";
        mem[134] = "111110101001110";
        mem[135] = "111110101000100";
        mem[136] = "111110100111001";
        mem[137] = "111110100101111";
        mem[138] = "111110100100101";
        mem[139] = "111110100011010";
        mem[140] = "111110100001111";
        mem[141] = "111110100000101";
        mem[142] = "111110011111010";
        mem[143] = "111110011101111";
        mem[144] = "111110011100100";
        mem[145] = "111110011011001";
        mem[146] = "111110011001110";
        mem[147] = "111110011000010";
        mem[148] = "111110010110111";
        mem[149] = "111110010101100";
        mem[150] = "111110010100000";
        mem[151] = "111110010010101";
        mem[152] = "111110010001001";
        mem[153] = "111110001111110";
        mem[154] = "111110001110010";
        mem[155] = "111110001100110";
        mem[156] = "111110001011010";
        mem[157] = "111110001001110";
        mem[158] = "111110001000010";
        mem[159] = "111110000110110";
        mem[160] = "111110000101010";
        mem[161] = "111110000011110";
        mem[162] = "111110000010001";
        mem[163] = "111110000000101";
        mem[164] = "111101111111001";
        mem[165] = "111101111101100";
        mem[166] = "111101111011111";
        mem[167] = "111101111010011";
        mem[168] = "111101111000110";
        mem[169] = "111101110111001";
        mem[170] = "111101110101100";
        mem[171] = "111101110011111";
        mem[172] = "111101110010010";
        mem[173] = "111101110000101";
        mem[174] = "111101101111000";
        mem[175] = "111101101101010";
        mem[176] = "111101101011101";
        mem[177] = "111101101010000";
        mem[178] = "111101101000010";
        mem[179] = "111101100110100";
        mem[180] = "111101100100111";
        mem[181] = "111101100011001";
        mem[182] = "111101100001011";
        mem[183] = "111101011111101";
        mem[184] = "111101011101111";
        mem[185] = "111101011100001";
        mem[186] = "111101011010011";
        mem[187] = "111101011000101";
        mem[188] = "111101010110111";
        mem[189] = "111101010101000";
        mem[190] = "111101010011010";
        mem[191] = "111101010001100";
        mem[192] = "111101001111101";
        mem[193] = "111101001101110";
        mem[194] = "111101001100000";
        mem[195] = "111101001010001";
        mem[196] = "111101001000010";
        mem[197] = "111101000110011";
        mem[198] = "111101000100100";
        mem[199] = "111101000010101";
        mem[200] = "111101000000110";
        mem[201] = "111100111110111";
        mem[202] = "111100111100111";
        mem[203] = "111100111011000";
        mem[204] = "111100111001001";
        mem[205] = "111100110111001";
        mem[206] = "111100110101010";
        mem[207] = "111100110011010";
        mem[208] = "111100110001010";
        mem[209] = "111100101111010";
        mem[210] = "111100101101010";
        mem[211] = "111100101011011";
        mem[212] = "111100101001010";
        mem[213] = "111100100111010";
        mem[214] = "111100100101010";
        mem[215] = "111100100011010";
        mem[216] = "111100100001010";
        mem[217] = "111100011111001";
        mem[218] = "111100011101001";
        mem[219] = "111100011011000";
        mem[220] = "111100011001000";
        mem[221] = "111100010110111";
        mem[222] = "111100010100110";
        mem[223] = "111100010010101";
        mem[224] = "111100010000101";
        mem[225] = "111100001110100";
        mem[226] = "111100001100011";
        mem[227] = "111100001010001";
        mem[228] = "111100001000000";
        mem[229] = "111100000101111";
        mem[230] = "111100000011110";
        mem[231] = "111100000001100";
        mem[232] = "111011111111011";
        mem[233] = "111011111101001";
        mem[234] = "111011111011000";
        mem[235] = "111011111000110";
        mem[236] = "111011110110100";
        mem[237] = "111011110100010";
        mem[238] = "111011110010000";
        mem[239] = "111011101111110";
        mem[240] = "111011101101100";
        mem[241] = "111011101011010";
        mem[242] = "111011101001000";
        mem[243] = "111011100110110";
        mem[244] = "111011100100011";
        mem[245] = "111011100010001";
        mem[246] = "111011011111110";
        mem[247] = "111011011101100";
        mem[248] = "111011011011001";
        mem[249] = "111011011000111";
        mem[250] = "111011010110100";
        mem[251] = "111011010100001";
        mem[252] = "111011010001110";
        mem[253] = "111011001111011";
        mem[254] = "111011001101000";
        mem[255] = "111011001010101";
        mem[256] = "111011001000010";
        mem[257] = "111011000101110";
        mem[258] = "111011000011011";
        mem[259] = "111011000001000";
        mem[260] = "111010111110100";
        mem[261] = "111010111100001";
        mem[262] = "111010111001101";
        mem[263] = "111010110111001";
        mem[264] = "111010110100110";
        mem[265] = "111010110010010";
        mem[266] = "111010101111110";
        mem[267] = "111010101101010";
        mem[268] = "111010101010110";
        mem[269] = "111010101000010";
        mem[270] = "111010100101101";
        mem[271] = "111010100011001";
        mem[272] = "111010100000101";
        mem[273] = "111010011110000";
        mem[274] = "111010011011100";
        mem[275] = "111010011000111";
        mem[276] = "111010010110011";
        mem[277] = "111010010011110";
        mem[278] = "111010010001001";
        mem[279] = "111010001110101";
        mem[280] = "111010001100000";
        mem[281] = "111010001001011";
        mem[282] = "111010000110110";
        mem[283] = "111010000100001";
        mem[284] = "111010000001011";
        mem[285] = "111001111110110";
        mem[286] = "111001111100001";
        mem[287] = "111001111001011";
        mem[288] = "111001110110110";
        mem[289] = "111001110100000";
        mem[290] = "111001110001011";
        mem[291] = "111001101110101";
        mem[292] = "111001101011111";
        mem[293] = "111001101001010";
        mem[294] = "111001100110100";
        mem[295] = "111001100011110";
        mem[296] = "111001100001000";
        mem[297] = "111001011110010";
        mem[298] = "111001011011100";
        mem[299] = "111001011000101";
        mem[300] = "111001010101111";
        mem[301] = "111001010011001";
        mem[302] = "111001010000010";
        mem[303] = "111001001101100";
        mem[304] = "111001001010101";
        mem[305] = "111001000111111";
        mem[306] = "111001000101000";
        mem[307] = "111001000010001";
        mem[308] = "111000111111010";
        mem[309] = "111000111100011";
        mem[310] = "111000111001100";
        mem[311] = "111000110110101";
        mem[312] = "111000110011110";
        mem[313] = "111000110000111";
        mem[314] = "111000101110000";
        mem[315] = "111000101011000";
        mem[316] = "111000101000001";
        mem[317] = "111000100101010";
        mem[318] = "111000100010010";
        mem[319] = "111000011111010";
        mem[320] = "111000011100011";
        mem[321] = "111000011001011";
        mem[322] = "111000010110011";
        mem[323] = "111000010011011";
        mem[324] = "111000010000011";
        mem[325] = "111000001101011";
        mem[326] = "111000001010011";
        mem[327] = "111000000111011";
        mem[328] = "111000000100011";
        mem[329] = "111000000001011";
        mem[330] = "110111111110010";
        mem[331] = "110111111011010";
        mem[332] = "110111111000010";
        mem[333] = "110111110101001";
        mem[334] = "110111110010000";
        mem[335] = "110111101111000";
        mem[336] = "110111101011111";
        mem[337] = "110111101000110";
        mem[338] = "110111100101101";
        mem[339] = "110111100010100";
        mem[340] = "110111011111011";
        mem[341] = "110111011100010";
        mem[342] = "110111011001001";
        mem[343] = "110111010110000";
        mem[344] = "110111010010111";
        mem[345] = "110111001111101";
        mem[346] = "110111001100100";
        mem[347] = "110111001001010";
        mem[348] = "110111000110001";
        mem[349] = "110111000010111";
        mem[350] = "110110111111110";
        mem[351] = "110110111100100";
        mem[352] = "110110111001010";
        mem[353] = "110110110110000";
        mem[354] = "110110110010110";
        mem[355] = "110110101111100";
        mem[356] = "110110101100010";
        mem[357] = "110110101001000";
        mem[358] = "110110100101110";
        mem[359] = "110110100010100";
        mem[360] = "110110011111001";
        mem[361] = "110110011011111";
        mem[362] = "110110011000100";
        mem[363] = "110110010101010";
        mem[364] = "110110010001111";
        mem[365] = "110110001110101";
        mem[366] = "110110001011010";
        mem[367] = "110110000111111";
        mem[368] = "110110000100100";
        mem[369] = "110110000001001";
        mem[370] = "110101111101110";
        mem[371] = "110101111010011";
        mem[372] = "110101110111000";
        mem[373] = "110101110011101";
        mem[374] = "110101110000010";
        mem[375] = "110101101100110";
        mem[376] = "110101101001011";
        mem[377] = "110101100101111";
        mem[378] = "110101100010100";
        mem[379] = "110101011111000";
        mem[380] = "110101011011101";
        mem[381] = "110101011000001";
        mem[382] = "110101010100101";
        mem[383] = "110101010001001";
        mem[384] = "110101001101110";
        mem[385] = "110101001010010";
        mem[386] = "110101000110110";
        mem[387] = "110101000011010";
        mem[388] = "110100111111101";
        mem[389] = "110100111100001";
        mem[390] = "110100111000101";
        mem[391] = "110100110101001";
        mem[392] = "110100110001100";
        mem[393] = "110100101110000";
        mem[394] = "110100101010011";
        mem[395] = "110100100110111";
        mem[396] = "110100100011010";
        mem[397] = "110100011111101";
        mem[398] = "110100011100000";
        mem[399] = "110100011000100";
        mem[400] = "110100010100111";
        mem[401] = "110100010001010";
        mem[402] = "110100001101101";
        mem[403] = "110100001001111";
        mem[404] = "110100000110010";
        mem[405] = "110100000010101";
        mem[406] = "110011111111000";
        mem[407] = "110011111011010";
        mem[408] = "110011110111101";
        mem[409] = "110011110100000";
        mem[410] = "110011110000010";
        mem[411] = "110011101100100";
        mem[412] = "110011101000111";
        mem[413] = "110011100101001";
        mem[414] = "110011100001011";
        mem[415] = "110011011101101";
        mem[416] = "110011011010000";
        mem[417] = "110011010110010";
        mem[418] = "110011010010011";
        mem[419] = "110011001110101";
        mem[420] = "110011001010111";
        mem[421] = "110011000111001";
        mem[422] = "110011000011011";
        mem[423] = "110010111111100";
        mem[424] = "110010111011110";
        mem[425] = "110010111000000";
        mem[426] = "110010110100001";
        mem[427] = "110010110000010";
        mem[428] = "110010101100100";
        mem[429] = "110010101000101";
        mem[430] = "110010100100110";
        mem[431] = "110010100000111";
        mem[432] = "110010011101001";
        mem[433] = "110010011001010";
        mem[434] = "110010010101011";
        mem[435] = "110010010001011";
        mem[436] = "110010001101100";
        mem[437] = "110010001001101";
        mem[438] = "110010000101110";
        mem[439] = "110010000001111";
        mem[440] = "110001111101111";
        mem[441] = "110001111010000";
        mem[442] = "110001110110000";
        mem[443] = "110001110010001";
        mem[444] = "110001101110001";
        mem[445] = "110001101010001";
        mem[446] = "110001100110010";
        mem[447] = "110001100010010";
        mem[448] = "110001011110010";
        mem[449] = "110001011010010";
        mem[450] = "110001010110010";
        mem[451] = "110001010010010";
        mem[452] = "110001001110010";
        mem[453] = "110001001010010";
        mem[454] = "110001000110010";
        mem[455] = "110001000010001";
        mem[456] = "110000111110001";
        mem[457] = "110000111010001";
        mem[458] = "110000110110000";
        mem[459] = "110000110010000";
        mem[460] = "110000101101111";
        mem[461] = "110000101001110";
        mem[462] = "110000100101110";
        mem[463] = "110000100001101";
        mem[464] = "110000011101100";
        mem[465] = "110000011001011";
        mem[466] = "110000010101010";
        mem[467] = "110000010001001";
        mem[468] = "110000001101000";
        mem[469] = "110000001000111";
        mem[470] = "110000000100110";
        mem[471] = "110000000000101";
        mem[472] = "101111111100100";
        mem[473] = "101111111000010";
        mem[474] = "101111110100001";
        mem[475] = "101111110000000";
        mem[476] = "101111101011110";
        mem[477] = "101111100111101";
        mem[478] = "101111100011011";
        mem[479] = "101111011111001";
        mem[480] = "101111011010111";
        mem[481] = "101111010110110";
        mem[482] = "101111010010100";
        mem[483] = "101111001110010";
        mem[484] = "101111001010000";
        mem[485] = "101111000101110";
        mem[486] = "101111000001100";
        mem[487] = "101110111101010";
        mem[488] = "101110111001000";
        mem[489] = "101110110100101";
        mem[490] = "101110110000011";
        mem[491] = "101110101100001";
        mem[492] = "101110100111110";
        mem[493] = "101110100011100";
        mem[494] = "101110011111001";
        mem[495] = "101110011010111";
        mem[496] = "101110010110100";
        mem[497] = "101110010010001";
        mem[498] = "101110001101111";
        mem[499] = "101110001001100";
        mem[500] = "101110000101001";
        mem[501] = "101110000000110";
        mem[502] = "101101111100011";
        mem[503] = "101101111000000";
        mem[504] = "101101110011101";
        mem[505] = "101101101111010";
        mem[506] = "101101101010111";
        mem[507] = "101101100110011";
        mem[508] = "101101100010000";
        mem[509] = "101101011101101";
        mem[510] = "101101011001001";
        mem[511] = "101101010100110";
        mem[512] = "101101010000010";
        mem[513] = "101101001011111";
        mem[514] = "101101000111011";
        mem[515] = "101101000011000";
        mem[516] = "101100111110100";
        mem[517] = "101100111010000";
        mem[518] = "101100110101100";
        mem[519] = "101100110001000";
        mem[520] = "101100101100100";
        mem[521] = "101100101000000";
        mem[522] = "101100100011100";
        mem[523] = "101100011111000";
        mem[524] = "101100011010100";
        mem[525] = "101100010110000";
        mem[526] = "101100010001100";
        mem[527] = "101100001100111";
        mem[528] = "101100001000011";
        mem[529] = "101100000011110";
        mem[530] = "101011111111010";
        mem[531] = "101011111010101";
        mem[532] = "101011110110001";
        mem[533] = "101011110001100";
        mem[534] = "101011101100111";
        mem[535] = "101011101000011";
        mem[536] = "101011100011110";
        mem[537] = "101011011111001";
        mem[538] = "101011011010100";
        mem[539] = "101011010101111";
        mem[540] = "101011010001010";
        mem[541] = "101011001100101";
        mem[542] = "101011001000000";
        mem[543] = "101011000011011";
        mem[544] = "101010111110110";
        mem[545] = "101010111010000";
        mem[546] = "101010110101011";
        mem[547] = "101010110000110";
        mem[548] = "101010101100000";
        mem[549] = "101010100111011";
        mem[550] = "101010100010101";
        mem[551] = "101010011110000";
        mem[552] = "101010011001010";
        mem[553] = "101010010100100";
        mem[554] = "101010001111111";
        mem[555] = "101010001011001";
        mem[556] = "101010000110011";
        mem[557] = "101010000001101";
        mem[558] = "101001111100111";
        mem[559] = "101001111000001";
        mem[560] = "101001110011011";
        mem[561] = "101001101110101";
        mem[562] = "101001101001111";
        mem[563] = "101001100101001";
        mem[564] = "101001100000011";
        mem[565] = "101001011011100";
        mem[566] = "101001010110110";
        mem[567] = "101001010010000";
        mem[568] = "101001001101001";
        mem[569] = "101001001000011";
        mem[570] = "101001000011100";
        mem[571] = "101000111110101";
        mem[572] = "101000111001111";
        mem[573] = "101000110101000";
        mem[574] = "101000110000001";
        mem[575] = "101000101011011";
        mem[576] = "101000100110100";
        mem[577] = "101000100001101";
        mem[578] = "101000011100110";
        mem[579] = "101000010111111";
        mem[580] = "101000010011000";
        mem[581] = "101000001110001";
        mem[582] = "101000001001010";
        mem[583] = "101000000100011";
        mem[584] = "100111111111011";
        mem[585] = "100111111010100";
        mem[586] = "100111110101101";
        mem[587] = "100111110000101";
        mem[588] = "100111101011110";
        mem[589] = "100111100110111";
        mem[590] = "100111100001111";
        mem[591] = "100111011101000";
        mem[592] = "100111011000000";
        mem[593] = "100111010011000";
        mem[594] = "100111001110001";
        mem[595] = "100111001001001";
        mem[596] = "100111000100001";
        mem[597] = "100110111111001";
        mem[598] = "100110111010001";
        mem[599] = "100110110101001";
        mem[600] = "100110110000001";
        mem[601] = "100110101011001";
        mem[602] = "100110100110001";
        mem[603] = "100110100001001";
        mem[604] = "100110011100001";
        mem[605] = "100110010111001";
        mem[606] = "100110010010001";
        mem[607] = "100110001101000";
        mem[608] = "100110001000000";
        mem[609] = "100110000010111";
        mem[610] = "100101111101111";
        mem[611] = "100101111000111";
        mem[612] = "100101110011110";
        mem[613] = "100101101110101";
        mem[614] = "100101101001101";
        mem[615] = "100101100100100";
        mem[616] = "100101011111011";
        mem[617] = "100101011010011";
        mem[618] = "100101010101010";
        mem[619] = "100101010000001";
        mem[620] = "100101001011000";
        mem[621] = "100101000101111";
        mem[622] = "100101000000110";
        mem[623] = "100100111011101";
        mem[624] = "100100110110100";
        mem[625] = "100100110001011";
        mem[626] = "100100101100010";
        mem[627] = "100100100111001";
        mem[628] = "100100100001111";
        mem[629] = "100100011100110";
        mem[630] = "100100010111101";
        mem[631] = "100100010010011";
        mem[632] = "100100001101010";
        mem[633] = "100100001000000";
        mem[634] = "100100000010111";
        mem[635] = "100011111101101";
        mem[636] = "100011111000100";
        mem[637] = "100011110011010";
        mem[638] = "100011101110000";
        mem[639] = "100011101000111";
        mem[640] = "100011100011101";
        mem[641] = "100011011110011";
        mem[642] = "100011011001001";
        mem[643] = "100011010011111";
        mem[644] = "100011001110101";
        mem[645] = "100011001001011";
        mem[646] = "100011000100001";
        mem[647] = "100010111110111";
        mem[648] = "100010111001101";
        mem[649] = "100010110100011";
        mem[650] = "100010101111001";
        mem[651] = "100010101001111";
        mem[652] = "100010100100100";
        mem[653] = "100010011111010";
        mem[654] = "100010011010000";
        mem[655] = "100010010100101";
        mem[656] = "100010001111011";
        mem[657] = "100010001010000";
        mem[658] = "100010000100110";
        mem[659] = "100001111111011";
        mem[660] = "100001111010001";
        mem[661] = "100001110100110";
        mem[662] = "100001101111011";
        mem[663] = "100001101010001";
        mem[664] = "100001100100110";
        mem[665] = "100001011111011";
        mem[666] = "100001011010000";
        mem[667] = "100001010100101";
        mem[668] = "100001001111010";
        mem[669] = "100001001001111";
        mem[670] = "100001000100100";
        mem[671] = "100000111111001";
        mem[672] = "100000111001110";
        mem[673] = "100000110100011";
        mem[674] = "100000101111000";
        mem[675] = "100000101001101";
        mem[676] = "100000100100001";
        mem[677] = "100000011110110";
        mem[678] = "100000011001011";
        mem[679] = "100000010011111";
        mem[680] = "100000001110100";
        mem[681] = "100000001001000";
        mem[682] = "100000000011101";
        mem[683] = "011111111110001";
        mem[684] = "011111111000110";
        mem[685] = "011111110011010";
        mem[686] = "011111101101111";
        mem[687] = "011111101000011";
        mem[688] = "011111100010111";
        mem[689] = "011111011101100";
        mem[690] = "011111011000000";
        mem[691] = "011111010010100";
        mem[692] = "011111001101000";
        mem[693] = "011111000111100";
        mem[694] = "011111000010000";
        mem[695] = "011110111100100";
        mem[696] = "011110110111000";
        mem[697] = "011110110001100";
        mem[698] = "011110101100000";
        mem[699] = "011110100110100";
        mem[700] = "011110100001000";
        mem[701] = "011110011011100";
        mem[702] = "011110010101111";
        mem[703] = "011110010000011";
        mem[704] = "011110001010111";
        mem[705] = "011110000101010";
        mem[706] = "011101111111110";
        mem[707] = "011101111010010";
        mem[708] = "011101110100101";
        mem[709] = "011101101111001";
        mem[710] = "011101101001100";
        mem[711] = "011101100100000";
        mem[712] = "011101011110011";
        mem[713] = "011101011000110";
        mem[714] = "011101010011010";
        mem[715] = "011101001101101";
        mem[716] = "011101001000000";
        mem[717] = "011101000010011";
        mem[718] = "011100111100111";
        mem[719] = "011100110111010";
        mem[720] = "011100110001101";
        mem[721] = "011100101100000";
        mem[722] = "011100100110011";
        mem[723] = "011100100000110";
        mem[724] = "011100011011001";
        mem[725] = "011100010101100";
        mem[726] = "011100001111111";
        mem[727] = "011100001010010";
        mem[728] = "011100000100101";
        mem[729] = "011011111110111";
        mem[730] = "011011111001010";
        mem[731] = "011011110011101";
        mem[732] = "011011101110000";
        mem[733] = "011011101000010";
        mem[734] = "011011100010101";
        mem[735] = "011011011101000";
        mem[736] = "011011010111010";
        mem[737] = "011011010001101";
        mem[738] = "011011001011111";
        mem[739] = "011011000110010";
        mem[740] = "011011000000100";
        mem[741] = "011010111010111";
        mem[742] = "011010110101001";
        mem[743] = "011010101111011";
        mem[744] = "011010101001110";
        mem[745] = "011010100100000";
        mem[746] = "011010011110010";
        mem[747] = "011010011000100";
        mem[748] = "011010010010111";
        mem[749] = "011010001101001";
        mem[750] = "011010000111011";
        mem[751] = "011010000001101";
        mem[752] = "011001111011111";
        mem[753] = "011001110110001";
        mem[754] = "011001110000011";
        mem[755] = "011001101010101";
        mem[756] = "011001100100111";
        mem[757] = "011001011111001";
        mem[758] = "011001011001011";
        mem[759] = "011001010011101";
        mem[760] = "011001001101110";
        mem[761] = "011001001000000";
        mem[762] = "011001000010010";
        mem[763] = "011000111100100";
        mem[764] = "011000110110101";
        mem[765] = "011000110000111";
        mem[766] = "011000101011001";
        mem[767] = "011000100101010";
        mem[768] = "011000011111100";
        mem[769] = "011000011001101";
        mem[770] = "011000010011111";
        mem[771] = "011000001110000";
        mem[772] = "011000001000010";
        mem[773] = "011000000010011";
        mem[774] = "010111111100101";
        mem[775] = "010111110110110";
        mem[776] = "010111110000111";
        mem[777] = "010111101011001";
        mem[778] = "010111100101010";
        mem[779] = "010111011111011";
        mem[780] = "010111011001100";
        mem[781] = "010111010011110";
        mem[782] = "010111001101111";
        mem[783] = "010111001000000";
        mem[784] = "010111000010001";
        mem[785] = "010110111100010";
        mem[786] = "010110110110011";
        mem[787] = "010110110000100";
        mem[788] = "010110101010101";
        mem[789] = "010110100100110";
        mem[790] = "010110011110111";
        mem[791] = "010110011001000";
        mem[792] = "010110010011001";
        mem[793] = "010110001101010";
        mem[794] = "010110000111011";
        mem[795] = "010110000001100";
        mem[796] = "010101111011100";
        mem[797] = "010101110101101";
        mem[798] = "010101101111110";
        mem[799] = "010101101001111";
        mem[800] = "010101100011111";
        mem[801] = "010101011110000";
        mem[802] = "010101011000001";
        mem[803] = "010101010010001";
        mem[804] = "010101001100010";
        mem[805] = "010101000110010";
        mem[806] = "010101000000011";
        mem[807] = "010100111010011";
        mem[808] = "010100110100100";
        mem[809] = "010100101110100";
        mem[810] = "010100101000101";
        mem[811] = "010100100010101";
        mem[812] = "010100011100101";
        mem[813] = "010100010110110";
        mem[814] = "010100010000110";
        mem[815] = "010100001010110";
        mem[816] = "010100000100111";
        mem[817] = "010011111110111";
        mem[818] = "010011111000111";
        mem[819] = "010011110010111";
        mem[820] = "010011101101000";
        mem[821] = "010011100111000";
        mem[822] = "010011100001000";
        mem[823] = "010011011011000";
        mem[824] = "010011010101000";
        mem[825] = "010011001111000";
        mem[826] = "010011001001000";
        mem[827] = "010011000011000";
        mem[828] = "010010111101000";
        mem[829] = "010010110111000";
        mem[830] = "010010110001000";
        mem[831] = "010010101011000";
        mem[832] = "010010100101000";
        mem[833] = "010010011111000";
        mem[834] = "010010011001000";
        mem[835] = "010010010011000";
        mem[836] = "010010001100111";
        mem[837] = "010010000110111";
        mem[838] = "010010000000111";
        mem[839] = "010001111010111";
        mem[840] = "010001110100111";
        mem[841] = "010001101110110";
        mem[842] = "010001101000110";
        mem[843] = "010001100010110";
        mem[844] = "010001011100101";
        mem[845] = "010001010110101";
        mem[846] = "010001010000100";
        mem[847] = "010001001010100";
        mem[848] = "010001000100100";
        mem[849] = "010000111110011";
        mem[850] = "010000111000011";
        mem[851] = "010000110010010";
        mem[852] = "010000101100010";
        mem[853] = "010000100110001";
        mem[854] = "010000100000001";
        mem[855] = "010000011010000";
        mem[856] = "010000010011111";
        mem[857] = "010000001101111";
        mem[858] = "010000000111110";
        mem[859] = "010000000001110";
        mem[860] = "001111111011101";
        mem[861] = "001111110101100";
        mem[862] = "001111101111011";
        mem[863] = "001111101001011";
        mem[864] = "001111100011010";
        mem[865] = "001111011101001";
        mem[866] = "001111010111000";
        mem[867] = "001111010001000";
        mem[868] = "001111001010111";
        mem[869] = "001111000100110";
        mem[870] = "001110111110101";
        mem[871] = "001110111000100";
        mem[872] = "001110110010011";
        mem[873] = "001110101100010";
        mem[874] = "001110100110001";
        mem[875] = "001110100000001";
        mem[876] = "001110011010000";
        mem[877] = "001110010011111";
        mem[878] = "001110001101110";
        mem[879] = "001110000111101";
        mem[880] = "001110000001100";
        mem[881] = "001101111011010";
        mem[882] = "001101110101001";
        mem[883] = "001101101111000";
        mem[884] = "001101101000111";
        mem[885] = "001101100010110";
        mem[886] = "001101011100101";
        mem[887] = "001101010110100";
        mem[888] = "001101010000011";
        mem[889] = "001101001010001";
        mem[890] = "001101000100000";
        mem[891] = "001100111101111";
        mem[892] = "001100110111110";
        mem[893] = "001100110001101";
        mem[894] = "001100101011011";
        mem[895] = "001100100101010";
        mem[896] = "001100011111001";
        mem[897] = "001100011000111";
        mem[898] = "001100010010110";
        mem[899] = "001100001100101";
        mem[900] = "001100000110011";
        mem[901] = "001100000000010";
        mem[902] = "001011111010001";
        mem[903] = "001011110011111";
        mem[904] = "001011101101110";
        mem[905] = "001011100111100";
        mem[906] = "001011100001011";
        mem[907] = "001011011011010";
        mem[908] = "001011010101000";
        mem[909] = "001011001110111";
        mem[910] = "001011001000101";
        mem[911] = "001011000010100";
        mem[912] = "001010111100010";
        mem[913] = "001010110110001";
        mem[914] = "001010101111111";
        mem[915] = "001010101001101";
        mem[916] = "001010100011100";
        mem[917] = "001010011101010";
        mem[918] = "001010010111001";
        mem[919] = "001010010000111";
        mem[920] = "001010001010101";
        mem[921] = "001010000100100";
        mem[922] = "001001111110010";
        mem[923] = "001001111000001";
        mem[924] = "001001110001111";
        mem[925] = "001001101011101";
        mem[926] = "001001100101011";
        mem[927] = "001001011111010";
        mem[928] = "001001011001000";
        mem[929] = "001001010010110";
        mem[930] = "001001001100101";
        mem[931] = "001001000110011";
        mem[932] = "001001000000001";
        mem[933] = "001000111001111";
        mem[934] = "001000110011110";
        mem[935] = "001000101101100";
        mem[936] = "001000100111010";
        mem[937] = "001000100001000";
        mem[938] = "001000011010110";
        mem[939] = "001000010100100";
        mem[940] = "001000001110011";
        mem[941] = "001000001000001";
        mem[942] = "001000000001111";
        mem[943] = "000111111011101";
        mem[944] = "000111110101011";
        mem[945] = "000111101111001";
        mem[946] = "000111101000111";
        mem[947] = "000111100010101";
        mem[948] = "000111011100100";
        mem[949] = "000111010110010";
        mem[950] = "000111010000000";
        mem[951] = "000111001001110";
        mem[952] = "000111000011100";
        mem[953] = "000110111101010";
        mem[954] = "000110110111000";
        mem[955] = "000110110000110";
        mem[956] = "000110101010100";
        mem[957] = "000110100100010";
        mem[958] = "000110011110000";
        mem[959] = "000110010111110";
        mem[960] = "000110010001100";
        mem[961] = "000110001011010";
        mem[962] = "000110000101000";
        mem[963] = "000101111110110";
        mem[964] = "000101111000100";
        mem[965] = "000101110010010";
        mem[966] = "000101101100000";
        mem[967] = "000101100101101";
        mem[968] = "000101011111011";
        mem[969] = "000101011001001";
        mem[970] = "000101010010111";
        mem[971] = "000101001100101";
        mem[972] = "000101000110011";
        mem[973] = "000101000000001";
        mem[974] = "000100111001111";
        mem[975] = "000100110011101";
        mem[976] = "000100101101011";
        mem[977] = "000100100111000";
        mem[978] = "000100100000110";
        mem[979] = "000100011010100";
        mem[980] = "000100010100010";
        mem[981] = "000100001110000";
        mem[982] = "000100000111110";
        mem[983] = "000100000001100";
        mem[984] = "000011111011001";
        mem[985] = "000011110100111";
        mem[986] = "000011101110101";
        mem[987] = "000011101000011";
        mem[988] = "000011100010001";
        mem[989] = "000011011011110";
        mem[990] = "000011010101100";
        mem[991] = "000011001111010";
        mem[992] = "000011001001000";
        mem[993] = "000011000010110";
        mem[994] = "000010111100011";
        mem[995] = "000010110110001";
        mem[996] = "000010101111111";
        mem[997] = "000010101001101";
        mem[998] = "000010100011011";
        mem[999] = "000010011101000";
        mem[1000] = "000010010110110";
        mem[1001] = "000010010000100";
        mem[1002] = "000010001010010";
        mem[1003] = "000010000011111";
        mem[1004] = "000001111101101";
        mem[1005] = "000001110111011";
        mem[1006] = "000001110001001";
        mem[1007] = "000001101010110";
        mem[1008] = "000001100100100";
        mem[1009] = "000001011110010";
        mem[1010] = "000001011000000";
        mem[1011] = "000001010001101";
        mem[1012] = "000001001011011";
        mem[1013] = "000001000101001";
        mem[1014] = "000000111110111";
        mem[1015] = "000000111000100";
        mem[1016] = "000000110010010";
        mem[1017] = "000000101100000";
        mem[1018] = "000000100101110";
        mem[1019] = "000000011111011";
        mem[1020] = "000000011001001";
        mem[1021] = "000000010010111";
        mem[1022] = "000000001100101";
        mem[1023] = "000000000110010";
    }


    void proc_di()
    {
        sc_dt::sc_lv<DATA_WIDTH> dt;
        for (unsigned i = 0; i < WRITE_PORT_COUNT; i++) {
            for (unsigned j = 0; j < DATA_WIDTH; j++) {
                dt.set_bit(j, d.read()[i * DATA_WIDTH + j].value());
            }
            di[i].write(dt);
        }
    }

    void proc_wai()
    {
        sc_dt::sc_lv<ADDRESS_WIDTH> wat;
        for (unsigned i = 0; i < WRITE_PORT_COUNT; i++) {
            for (unsigned j = 0; j < ADDRESS_WIDTH; j++) {
                wat.set_bit(j, wa.read()[i * ADDRESS_WIDTH + j].value());
            }
            wai[i].write(wat);
        }
    }


    void proc_mem()
    {
        for (unsigned j = 0; j < WRITE_PORT_COUNT; j++) {
          if (we.read().get_bit(j) == 1) {
            unsigned i = wai[j].read().to_uint();
            if (!wai[j].read().is_01() || i >= WORD_COUNT) {
               cerr << "In memory model " << name() << ", during a write cycle\n";
               if (!wai[j].read().is_01()) 
                 cerr << "ERROR: address is not stable =" << wai[j].read() << endl;
               else
                 cerr << "ERROR: Address " << i << " for port '" << j << "' is outside the legal range [0.."
                      << (WORD_COUNT - 1) << "]." << endl;
               SC_REPORT_FATAL(1000, 0);
            }
            assert(wai[j].read().is_01());
            assert(i < WORD_COUNT);
            mem[i] = di[j];
          }
        }
    }


    void proc_rai()
    {
        sc_dt::sc_lv<ADDRESS_WIDTH> rat;
        for (unsigned i = 0; i < READ_PORT_COUNT; i++) {
            for (unsigned j = 0; j < ADDRESS_WIDTH; j++) {
                rat.set_bit(j, ra.read()[i * ADDRESS_WIDTH + j].value());
            }
            rai[i].write(rat);
        }
    }

    void proc_rai_reg()
    {
        for (unsigned i = 0; i < READ_PORT_COUNT; i++) {
            if ( ce.read().get_bit(i) == 1) {
                rai_reg[i] = rai[i];
            }
        }
    }

    void proc_qi()
    {
        sc_dt::sc_lv<DATA_WIDTH> qt;
        sc_dt::sc_lv<READ_PORT_COUNT*DATA_WIDTH> qit;
        for (unsigned i = 0; i < READ_PORT_COUNT; i++) {
            if (!(rai_reg[i].read().is_01())) 
                qt = sc_dt::sc_lv<DATA_WIDTH>();
            else 
            {
                unsigned addr = rai_reg[i].read().to_uint();
                if (addr >= WORD_COUNT) {
                    qt = sc_dt::sc_lv<DATA_WIDTH>();
                }
                else {
                    qt = mem[addr];
                }
            }
            for (unsigned j = 0; j < DATA_WIDTH; j++) {
                qit.set_bit(i*DATA_WIDTH+j, qt[j].value());
            }
        }
        qi.write(qit);
    }


    void proc_q()
    {
        q.write(qi.read());
    }

    ~qam_runner_cos_lut_core() {
        delete [] mem;
    }

public:
    sc_dt::sc_lv< DATA_WIDTH>*  mem;
    sc_core::sc_signal<sc_dt::sc_lv<ADDRESS_WIDTH> > wai[ WRITE_PORT_COUNT ];
    sc_core::sc_signal<sc_dt::sc_lv<ADDRESS_WIDTH> > rai[READ_PORT_COUNT];
    sc_core::sc_signal<sc_dt::sc_lv<ADDRESS_WIDTH> > rai_reg[READ_PORT_COUNT];
    sc_core::sc_signal<sc_dt::sc_lv<DATA_WIDTH> > di[WRITE_PORT_COUNT];
    sc_core::sc_signal<sc_dt::sc_lv<READ_PORT_COUNT*DATA_WIDTH> > qi;
};

  


SC_MODULE( qam_runner_cos_lut )
{
    static const unsigned int DataWidth = 15;
    static const unsigned int AddressRange = 1024;
    static const unsigned int AddressWidth = 10;


    sc_core::sc_in<sc_dt::sc_lv<AddressWidth> > address0;
    sc_core::sc_in<sc_dt::sc_logic> ce0;
    sc_core::sc_out<sc_dt::sc_lv<DataWidth> > q0;

    sc_core::sc_in<sc_dt::sc_lv<AddressWidth> > address1;
    sc_core::sc_in<sc_dt::sc_logic> ce1;
    sc_core::sc_out<sc_dt::sc_lv<DataWidth> > q1;

    sc_core::sc_in<sc_dt::sc_logic> reset;
    sc_core::sc_in_clk clk;


    SC_CTOR( qam_runner_cos_lut ) {
        meminst = new qam_runner_cos_lut_core <2, 1, DataWidth, AddressWidth, AddressRange>("core_inst");

        meminst->d(mem_d);
        meminst->q(mem_q);
        meminst->ra(mem_ra);
        meminst->ce(mem_ce);
        meminst->wa(mem_wa);
        meminst->we(mem_we);
        meminst->reset(reset);
        meminst->clk(clk);

        SC_METHOD(proc_mem_q);
        sensitive << mem_q;

        SC_METHOD(proc_mem_ra);
        sensitive << address0 << address1;

        SC_METHOD(proc_mem_ce);
        sensitive << ce0 << ce1;

        mem_wa.write(0);
        mem_we.write(0);
        mem_d.write(0);
    }

    ~qam_runner_cos_lut() {
        delete meminst;
    }

    void proc_mem_q();
    void proc_mem_ra();
    void proc_mem_ce();

public:
    sc_core::sc_signal<sc_dt::sc_lv<2 * DataWidth> > mem_q;
    sc_core::sc_signal<sc_dt::sc_lv<1> > mem_we;
    sc_core::sc_signal<sc_dt::sc_lv<1 * DataWidth> > mem_d;
    sc_core::sc_signal<sc_dt::sc_lv<1 * AddressWidth> > mem_wa;
    sc_core::sc_signal<sc_dt::sc_lv<2 * AddressWidth> > mem_ra;
    sc_core::sc_signal<sc_dt::sc_lv<2> > mem_ce;

    qam_runner_cos_lut_core <2, 1, DataWidth, AddressWidth, AddressRange>* meminst;
};

#endif //_qam_runner_cos_lut_H_
