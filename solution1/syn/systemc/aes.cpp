// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "aes.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> aes::ap_ST_st1_fsm_0 = "00000";
const sc_lv<5> aes::ap_ST_st2_fsm_1 = "1";
const sc_lv<5> aes::ap_ST_st3_fsm_2 = "10";
const sc_lv<5> aes::ap_ST_st4_fsm_3 = "11";
const sc_lv<5> aes::ap_ST_st5_fsm_4 = "100";
const sc_lv<5> aes::ap_ST_st6_fsm_5 = "101";
const sc_lv<5> aes::ap_ST_st7_fsm_6 = "110";
const sc_lv<5> aes::ap_ST_st8_fsm_7 = "111";
const sc_lv<5> aes::ap_ST_st9_fsm_8 = "1000";
const sc_lv<5> aes::ap_ST_st10_fsm_9 = "1001";
const sc_lv<5> aes::ap_ST_st11_fsm_10 = "1010";
const sc_lv<5> aes::ap_ST_st12_fsm_11 = "1011";
const sc_lv<5> aes::ap_ST_st13_fsm_12 = "1100";
const sc_lv<5> aes::ap_ST_st14_fsm_13 = "1101";
const sc_lv<5> aes::ap_ST_st15_fsm_14 = "1110";
const sc_lv<5> aes::ap_ST_st16_fsm_15 = "1111";
const sc_lv<5> aes::ap_ST_st17_fsm_16 = "10000";
const sc_lv<5> aes::ap_ST_st18_fsm_17 = "10001";
const sc_lv<5> aes::ap_ST_st19_fsm_18 = "10010";
const sc_lv<5> aes::ap_ST_st20_fsm_19 = "10011";
const sc_lv<5> aes::ap_ST_st21_fsm_20 = "10100";
const sc_lv<5> aes::ap_ST_st22_fsm_21 = "10101";
const sc_lv<5> aes::ap_ST_st23_fsm_22 = "10110";
const sc_lv<5> aes::ap_ST_st24_fsm_23 = "10111";
const sc_lv<5> aes::ap_ST_st25_fsm_24 = "11000";
const sc_lv<5> aes::ap_ST_st26_fsm_25 = "11001";
const sc_lv<32> aes::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<128> aes::ap_const_lv128_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const int aes::C_DATA_WIDTH = "100000";
const int aes::C_M_AXI_DDR_V_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int aes::C_M_AXI_DDR_V_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int aes::C_M_AXI_DDR_V_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int aes::C_M_AXI_DDR_V_CACHE_VALUE = "11";
const sc_lv<1> aes::ap_const_lv1_0 = "0";
const sc_lv<32> aes::ap_const_lv32_1 = "1";
const sc_lv<3> aes::ap_const_lv3_0 = "000";
const sc_lv<2> aes::ap_const_lv2_0 = "00";
const sc_lv<4> aes::ap_const_lv4_0 = "0000";
const sc_lv<16> aes::ap_const_lv16_FFFF = "1111111111111111";
const sc_lv<32> aes::ap_const_lv32_4 = "100";
const sc_lv<32> aes::ap_const_lv32_1F = "11111";
const sc_lv<1> aes::ap_const_lv1_1 = "1";

aes::aes(sc_module_name name) : sc_module(name), mVcdFile(0) {
    aes_AXILiteS_s_axi_U = new aes_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("aes_AXILiteS_s_axi_U");
    aes_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    aes_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    aes_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    aes_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    aes_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    aes_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    aes_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    aes_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    aes_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    aes_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    aes_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    aes_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    aes_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    aes_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    aes_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    aes_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    aes_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    aes_AXILiteS_s_axi_U->ACLK(ap_clk);
    aes_AXILiteS_s_axi_U->ARESETN(ap_rst_n);
    aes_AXILiteS_s_axi_U->ap_start(ap_start);
    aes_AXILiteS_s_axi_U->interrupt(interrupt);
    aes_AXILiteS_s_axi_U->ap_ready(ap_ready);
    aes_AXILiteS_s_axi_U->ap_done(ap_done);
    aes_AXILiteS_s_axi_U->ap_idle(ap_idle);
    aes_AXILiteS_s_axi_U->ap_return(ap_return);
    aes_AXILiteS_s_axi_U->sourceAddress(sourceAddress);
    aes_AXILiteS_s_axi_U->sourceAddress_ap_vld(sourceAddress_ap_vld);
    aes_AXILiteS_s_axi_U->key_in_V(key_in_V);
    aes_AXILiteS_s_axi_U->key_in_V_ap_vld(key_in_V_ap_vld);
    aes_AXILiteS_s_axi_U->destinationAddress(destinationAddress);
    aes_AXILiteS_s_axi_U->destinationAddress_ap_vld(destinationAddress_ap_vld);
    aes_AXILiteS_s_axi_U->length_r(length_r);
    aes_AXILiteS_s_axi_U->length_r_ap_vld(length_r_ap_vld);
    aes_ddr_V_m_axi_U = new aes_ddr_V_m_axi<128,32,2,C_M_AXI_DDR_V_ID_WIDTH,C_M_AXI_DDR_V_ADDR_WIDTH,C_M_AXI_DDR_V_DATA_WIDTH,C_M_AXI_DDR_V_AWUSER_WIDTH,C_M_AXI_DDR_V_ARUSER_WIDTH,C_M_AXI_DDR_V_WUSER_WIDTH,C_M_AXI_DDR_V_RUSER_WIDTH,C_M_AXI_DDR_V_BUSER_WIDTH,C_M_AXI_DDR_V_TARGET_ADDR,C_M_AXI_DDR_V_USER_VALUE,C_M_AXI_DDR_V_PROT_VALUE,C_M_AXI_DDR_V_CACHE_VALUE>("aes_ddr_V_m_axi_U");
    aes_ddr_V_m_axi_U->AWVALID(m_axi_ddr_V_AWVALID);
    aes_ddr_V_m_axi_U->AWREADY(m_axi_ddr_V_AWREADY);
    aes_ddr_V_m_axi_U->AWADDR(m_axi_ddr_V_AWADDR);
    aes_ddr_V_m_axi_U->AWID(m_axi_ddr_V_AWID);
    aes_ddr_V_m_axi_U->AWLEN(m_axi_ddr_V_AWLEN);
    aes_ddr_V_m_axi_U->AWSIZE(m_axi_ddr_V_AWSIZE);
    aes_ddr_V_m_axi_U->AWBURST(m_axi_ddr_V_AWBURST);
    aes_ddr_V_m_axi_U->AWLOCK(m_axi_ddr_V_AWLOCK);
    aes_ddr_V_m_axi_U->AWCACHE(m_axi_ddr_V_AWCACHE);
    aes_ddr_V_m_axi_U->AWPROT(m_axi_ddr_V_AWPROT);
    aes_ddr_V_m_axi_U->AWQOS(m_axi_ddr_V_AWQOS);
    aes_ddr_V_m_axi_U->AWREGION(m_axi_ddr_V_AWREGION);
    aes_ddr_V_m_axi_U->AWUSER(m_axi_ddr_V_AWUSER);
    aes_ddr_V_m_axi_U->WVALID(m_axi_ddr_V_WVALID);
    aes_ddr_V_m_axi_U->WREADY(m_axi_ddr_V_WREADY);
    aes_ddr_V_m_axi_U->WDATA(m_axi_ddr_V_WDATA);
    aes_ddr_V_m_axi_U->WSTRB(m_axi_ddr_V_WSTRB);
    aes_ddr_V_m_axi_U->WLAST(m_axi_ddr_V_WLAST);
    aes_ddr_V_m_axi_U->WID(m_axi_ddr_V_WID);
    aes_ddr_V_m_axi_U->WUSER(m_axi_ddr_V_WUSER);
    aes_ddr_V_m_axi_U->ARVALID(m_axi_ddr_V_ARVALID);
    aes_ddr_V_m_axi_U->ARREADY(m_axi_ddr_V_ARREADY);
    aes_ddr_V_m_axi_U->ARADDR(m_axi_ddr_V_ARADDR);
    aes_ddr_V_m_axi_U->ARID(m_axi_ddr_V_ARID);
    aes_ddr_V_m_axi_U->ARLEN(m_axi_ddr_V_ARLEN);
    aes_ddr_V_m_axi_U->ARSIZE(m_axi_ddr_V_ARSIZE);
    aes_ddr_V_m_axi_U->ARBURST(m_axi_ddr_V_ARBURST);
    aes_ddr_V_m_axi_U->ARLOCK(m_axi_ddr_V_ARLOCK);
    aes_ddr_V_m_axi_U->ARCACHE(m_axi_ddr_V_ARCACHE);
    aes_ddr_V_m_axi_U->ARPROT(m_axi_ddr_V_ARPROT);
    aes_ddr_V_m_axi_U->ARQOS(m_axi_ddr_V_ARQOS);
    aes_ddr_V_m_axi_U->ARREGION(m_axi_ddr_V_ARREGION);
    aes_ddr_V_m_axi_U->ARUSER(m_axi_ddr_V_ARUSER);
    aes_ddr_V_m_axi_U->RVALID(m_axi_ddr_V_RVALID);
    aes_ddr_V_m_axi_U->RREADY(m_axi_ddr_V_RREADY);
    aes_ddr_V_m_axi_U->RDATA(m_axi_ddr_V_RDATA);
    aes_ddr_V_m_axi_U->RLAST(m_axi_ddr_V_RLAST);
    aes_ddr_V_m_axi_U->RID(m_axi_ddr_V_RID);
    aes_ddr_V_m_axi_U->RUSER(m_axi_ddr_V_RUSER);
    aes_ddr_V_m_axi_U->RRESP(m_axi_ddr_V_RRESP);
    aes_ddr_V_m_axi_U->BVALID(m_axi_ddr_V_BVALID);
    aes_ddr_V_m_axi_U->BREADY(m_axi_ddr_V_BREADY);
    aes_ddr_V_m_axi_U->BRESP(m_axi_ddr_V_BRESP);
    aes_ddr_V_m_axi_U->BID(m_axi_ddr_V_BID);
    aes_ddr_V_m_axi_U->BUSER(m_axi_ddr_V_BUSER);
    aes_ddr_V_m_axi_U->ACLK(ap_clk);
    aes_ddr_V_m_axi_U->ARESETN(ap_rst_n);
    aes_ddr_V_m_axi_U->I_ARVALID(ddr_V_ARVALID);
    aes_ddr_V_m_axi_U->I_ARREADY(ddr_V_ARREADY);
    aes_ddr_V_m_axi_U->I_ARADDR(ddr_V_ARADDR);
    aes_ddr_V_m_axi_U->I_ARID(ddr_V_ARID);
    aes_ddr_V_m_axi_U->I_ARLEN(ddr_V_ARLEN);
    aes_ddr_V_m_axi_U->I_ARSIZE(ddr_V_ARSIZE);
    aes_ddr_V_m_axi_U->I_ARLOCK(ddr_V_ARLOCK);
    aes_ddr_V_m_axi_U->I_ARCACHE(ddr_V_ARCACHE);
    aes_ddr_V_m_axi_U->I_ARQOS(ddr_V_ARQOS);
    aes_ddr_V_m_axi_U->I_ARPROT(ddr_V_ARPROT);
    aes_ddr_V_m_axi_U->I_ARUSER(ddr_V_ARUSER);
    aes_ddr_V_m_axi_U->I_ARBURST(ddr_V_ARBURST);
    aes_ddr_V_m_axi_U->I_ARREGION(ddr_V_ARREGION);
    aes_ddr_V_m_axi_U->I_RVALID(ddr_V_RVALID);
    aes_ddr_V_m_axi_U->I_RREADY(ddr_V_RREADY);
    aes_ddr_V_m_axi_U->I_RDATA(ddr_V_RDATA);
    aes_ddr_V_m_axi_U->I_RID(ddr_V_RID);
    aes_ddr_V_m_axi_U->I_RUSER(ddr_V_RUSER);
    aes_ddr_V_m_axi_U->I_RRESP(ddr_V_RRESP);
    aes_ddr_V_m_axi_U->I_RLAST(ddr_V_RLAST);
    aes_ddr_V_m_axi_U->I_AWVALID(ddr_V_AWVALID);
    aes_ddr_V_m_axi_U->I_AWREADY(ddr_V_AWREADY);
    aes_ddr_V_m_axi_U->I_AWADDR(ddr_V_AWADDR);
    aes_ddr_V_m_axi_U->I_AWID(ddr_V_AWID);
    aes_ddr_V_m_axi_U->I_AWLEN(ddr_V_AWLEN);
    aes_ddr_V_m_axi_U->I_AWSIZE(ddr_V_AWSIZE);
    aes_ddr_V_m_axi_U->I_AWLOCK(ddr_V_AWLOCK);
    aes_ddr_V_m_axi_U->I_AWCACHE(ddr_V_AWCACHE);
    aes_ddr_V_m_axi_U->I_AWQOS(ddr_V_AWQOS);
    aes_ddr_V_m_axi_U->I_AWPROT(ddr_V_AWPROT);
    aes_ddr_V_m_axi_U->I_AWUSER(ddr_V_AWUSER);
    aes_ddr_V_m_axi_U->I_AWBURST(ddr_V_AWBURST);
    aes_ddr_V_m_axi_U->I_AWREGION(ddr_V_AWREGION);
    aes_ddr_V_m_axi_U->I_WVALID(ddr_V_WVALID);
    aes_ddr_V_m_axi_U->I_WREADY(ddr_V_WREADY);
    aes_ddr_V_m_axi_U->I_WDATA(ddr_V_WDATA);
    aes_ddr_V_m_axi_U->I_WID(ddr_V_WID);
    aes_ddr_V_m_axi_U->I_WUSER(ddr_V_WUSER);
    aes_ddr_V_m_axi_U->I_WLAST(ddr_V_WLAST);
    aes_ddr_V_m_axi_U->I_WSTRB(ddr_V_WSTRB);
    aes_ddr_V_m_axi_U->I_BVALID(ddr_V_BVALID);
    aes_ddr_V_m_axi_U->I_BREADY(ddr_V_BREADY);
    aes_ddr_V_m_axi_U->I_BRESP(ddr_V_BRESP);
    aes_ddr_V_m_axi_U->I_BID(ddr_V_BID);
    aes_ddr_V_m_axi_U->I_BUSER(ddr_V_BUSER);
    grp_aestest_fu_167 = new aestest("grp_aestest_fu_167");
    grp_aestest_fu_167->ap_clk(ap_clk);
    grp_aestest_fu_167->ap_rst(grp_aestest_fu_167_ap_rst);
    grp_aestest_fu_167->ap_start(grp_aestest_fu_167_ap_start);
    grp_aestest_fu_167->ap_done(grp_aestest_fu_167_ap_done);
    grp_aestest_fu_167->ap_idle(grp_aestest_fu_167_ap_idle);
    grp_aestest_fu_167->ap_ready(grp_aestest_fu_167_ap_ready);
    grp_aestest_fu_167->ap_ce(grp_aestest_fu_167_ap_ce);
    grp_aestest_fu_167->inptext_V_read(grp_aestest_fu_167_inptext_V_read);
    grp_aestest_fu_167->key_V_read(grp_aestest_fu_167_key_V_read);
    grp_aestest_fu_167->ap_return(grp_aestest_fu_167_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_262_p2 );
    sensitive << ( ap_sig_ioackin_ddr_V_ARREADY );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_262_p2 );
    sensitive << ( ap_sig_ioackin_ddr_V_ARREADY );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_262_p2 );
    sensitive << ( ap_sig_ioackin_ddr_V_ARREADY );

    SC_METHOD(thread_ap_sig_bdd_1781);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_262_p2 );

    SC_METHOD(thread_ap_sig_bdd_250);
    sensitive << ( ap_start );
    sensitive << ( sourceAddress_ap_vld_in_sig );
    sensitive << ( key_in_V_ap_vld_in_sig );
    sensitive << ( destinationAddress_ap_vld_in_sig );
    sensitive << ( length_r_ap_vld_in_sig );

    SC_METHOD(thread_ap_sig_ioackin_ddr_V_ARREADY);
    sensitive << ( ddr_V_ARREADY );
    sensitive << ( ap_reg_ioackin_ddr_V_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_ddr_V_AWREADY);
    sensitive << ( ddr_V_AWREADY );
    sensitive << ( ap_reg_ioackin_ddr_V_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_ddr_V_WREADY);
    sensitive << ( ddr_V_WREADY );
    sensitive << ( ap_reg_ioackin_ddr_V_WREADY );

    SC_METHOD(thread_ddr_V_ARADDR);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_262_p2 );
    sensitive << ( tmp_1_fu_267_p1 );
    sensitive << ( ap_reg_ioackin_ddr_V_ARREADY );

    SC_METHOD(thread_ddr_V_ARBURST);

    SC_METHOD(thread_ddr_V_ARCACHE);

    SC_METHOD(thread_ddr_V_ARID);

    SC_METHOD(thread_ddr_V_ARLEN);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_262_p2 );
    sensitive << ( ap_reg_ioackin_ddr_V_ARREADY );

    SC_METHOD(thread_ddr_V_ARLOCK);

    SC_METHOD(thread_ddr_V_ARPROT);

    SC_METHOD(thread_ddr_V_ARQOS);

    SC_METHOD(thread_ddr_V_ARREGION);

    SC_METHOD(thread_ddr_V_ARSIZE);

    SC_METHOD(thread_ddr_V_ARUSER);

    SC_METHOD(thread_ddr_V_ARVALID);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_262_p2 );
    sensitive << ( ap_reg_ioackin_ddr_V_ARREADY );

    SC_METHOD(thread_ddr_V_AWADDR);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_284_p1 );
    sensitive << ( ap_reg_ioackin_ddr_V_AWREADY );

    SC_METHOD(thread_ddr_V_AWBURST);

    SC_METHOD(thread_ddr_V_AWCACHE);

    SC_METHOD(thread_ddr_V_AWID);

    SC_METHOD(thread_ddr_V_AWLEN);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ioackin_ddr_V_AWREADY );

    SC_METHOD(thread_ddr_V_AWLOCK);

    SC_METHOD(thread_ddr_V_AWPROT);

    SC_METHOD(thread_ddr_V_AWQOS);

    SC_METHOD(thread_ddr_V_AWREGION);

    SC_METHOD(thread_ddr_V_AWSIZE);

    SC_METHOD(thread_ddr_V_AWUSER);

    SC_METHOD(thread_ddr_V_AWVALID);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ioackin_ddr_V_AWREADY );

    SC_METHOD(thread_ddr_V_BREADY);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ddr_V_BVALID );

    SC_METHOD(thread_ddr_V_RREADY);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ddr_V_RVALID );

    SC_METHOD(thread_ddr_V_WDATA);
    sensitive << ( ap_CS_fsm );
    sensitive << ( encrypted_data_V_reg_357 );
    sensitive << ( ap_reg_ioackin_ddr_V_WREADY );

    SC_METHOD(thread_ddr_V_WID);

    SC_METHOD(thread_ddr_V_WLAST);

    SC_METHOD(thread_ddr_V_WSTRB);

    SC_METHOD(thread_ddr_V_WUSER);

    SC_METHOD(thread_ddr_V_WVALID);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ioackin_ddr_V_WREADY );

    SC_METHOD(thread_destinationAddressLocal_1_fu_295_p2);
    sensitive << ( destinationAddressLocal1_reg_156 );

    SC_METHOD(thread_destinationAddressLocal_2_fu_253_p1);
    sensitive << ( destinationAddressLocal_fu_243_p4 );

    SC_METHOD(thread_destinationAddressLocal_fu_243_p4);
    sensitive << ( destinationAddress_assign_fu_104 );

    SC_METHOD(thread_destinationAddress_ap_vld_in_sig);
    sensitive << ( destinationAddress_ap_vld );
    sensitive << ( destinationAddress_ap_vld_preg );

    SC_METHOD(thread_destinationAddress_in_sig);
    sensitive << ( destinationAddress );
    sensitive << ( destinationAddress_preg );
    sensitive << ( destinationAddress_ap_vld );

    SC_METHOD(thread_exitcond_fu_262_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_reg_333 );
    sensitive << ( exitcond_fu_262_p2 );
    sensitive << ( ap_sig_ioackin_ddr_V_ARREADY );
    sensitive << ( sourceAddressLocal1_reg_147 );

    SC_METHOD(thread_grp_aestest_fu_167_ap_ce);

    SC_METHOD(thread_grp_aestest_fu_167_ap_rst);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_aestest_fu_167_ap_start);
    sensitive << ( grp_aestest_fu_167_ap_start_ap_start_reg );

    SC_METHOD(thread_grp_aestest_fu_167_inptext_V_read);
    sensitive << ( ap_CS_fsm );
    sensitive << ( data_V_reg_352 );

    SC_METHOD(thread_grp_aestest_fu_167_key_V_read);
    sensitive << ( ap_CS_fsm );
    sensitive << ( key_in_V_in_sig );

    SC_METHOD(thread_key_in_V_ap_vld_in_sig);
    sensitive << ( key_in_V_ap_vld );
    sensitive << ( key_in_V_ap_vld_preg );

    SC_METHOD(thread_key_in_V_in_sig);
    sensitive << ( key_in_V );
    sensitive << ( key_in_V_preg );
    sensitive << ( key_in_V_ap_vld );

    SC_METHOD(thread_length_r_ap_vld_in_sig);
    sensitive << ( length_r_ap_vld );
    sensitive << ( length_r_ap_vld_preg );

    SC_METHOD(thread_length_r_in_sig);
    sensitive << ( length_r );
    sensitive << ( length_r_preg );
    sensitive << ( length_r_ap_vld );

    SC_METHOD(thread_sourceAddressLocal_1_fu_278_p2);
    sensitive << ( sourceAddressLocal1_reg_147 );

    SC_METHOD(thread_sourceAddressLocal_2_fu_236_p1);
    sensitive << ( sourceAddressLocal_fu_226_p4 );

    SC_METHOD(thread_sourceAddressLocal_fu_226_p4);
    sensitive << ( sourceAddress_assign_fu_100 );

    SC_METHOD(thread_sourceAddress_ap_vld_in_sig);
    sensitive << ( sourceAddress_ap_vld );
    sensitive << ( sourceAddress_ap_vld_preg );

    SC_METHOD(thread_sourceAddress_in_sig);
    sensitive << ( sourceAddress );
    sensitive << ( sourceAddress_preg );
    sensitive << ( sourceAddress_ap_vld );

    SC_METHOD(thread_tmp_1_fu_267_p1);
    sensitive << ( sourceAddressLocal1_reg_147 );

    SC_METHOD(thread_tmp_2_fu_284_p1);
    sensitive << ( destinationAddressLocal1_reg_156 );

    SC_METHOD(thread_tmp_fu_257_p2);
    sensitive << ( length_r_in_sig );
    sensitive << ( sourceAddressLocal_2_fu_236_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ddr_V_RVALID );
    sensitive << ( ddr_V_BVALID );
    sensitive << ( ap_sig_bdd_250 );
    sensitive << ( exitcond_fu_262_p2 );
    sensitive << ( ap_sig_ioackin_ddr_V_ARREADY );
    sensitive << ( ap_sig_ioackin_ddr_V_AWREADY );
    sensitive << ( ap_sig_ioackin_ddr_V_WREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000";
    sourceAddress_preg = "00000000000000000000000000000000";
    sourceAddress_ap_vld_preg = SC_LOGIC_0;
    key_in_V_preg = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    key_in_V_ap_vld_preg = SC_LOGIC_0;
    destinationAddress_preg = "00000000000000000000000000000000";
    destinationAddress_ap_vld_preg = SC_LOGIC_0;
    length_r_preg = "00000000000000000000000000000000";
    length_r_ap_vld_preg = SC_LOGIC_0;
    grp_aestest_fu_167_ap_start_ap_start_reg = SC_LOGIC_0;
    ap_reg_ioackin_ddr_V_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_ddr_V_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_ddr_V_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_ddr_V_AWVALID, "(port)m_axi_ddr_V_AWVALID");
    sc_trace(mVcdFile, m_axi_ddr_V_AWREADY, "(port)m_axi_ddr_V_AWREADY");
    sc_trace(mVcdFile, m_axi_ddr_V_AWADDR, "(port)m_axi_ddr_V_AWADDR");
    sc_trace(mVcdFile, m_axi_ddr_V_AWID, "(port)m_axi_ddr_V_AWID");
    sc_trace(mVcdFile, m_axi_ddr_V_AWLEN, "(port)m_axi_ddr_V_AWLEN");
    sc_trace(mVcdFile, m_axi_ddr_V_AWSIZE, "(port)m_axi_ddr_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_ddr_V_AWBURST, "(port)m_axi_ddr_V_AWBURST");
    sc_trace(mVcdFile, m_axi_ddr_V_AWLOCK, "(port)m_axi_ddr_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_ddr_V_AWCACHE, "(port)m_axi_ddr_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_ddr_V_AWPROT, "(port)m_axi_ddr_V_AWPROT");
    sc_trace(mVcdFile, m_axi_ddr_V_AWQOS, "(port)m_axi_ddr_V_AWQOS");
    sc_trace(mVcdFile, m_axi_ddr_V_AWREGION, "(port)m_axi_ddr_V_AWREGION");
    sc_trace(mVcdFile, m_axi_ddr_V_AWUSER, "(port)m_axi_ddr_V_AWUSER");
    sc_trace(mVcdFile, m_axi_ddr_V_WVALID, "(port)m_axi_ddr_V_WVALID");
    sc_trace(mVcdFile, m_axi_ddr_V_WREADY, "(port)m_axi_ddr_V_WREADY");
    sc_trace(mVcdFile, m_axi_ddr_V_WDATA, "(port)m_axi_ddr_V_WDATA");
    sc_trace(mVcdFile, m_axi_ddr_V_WSTRB, "(port)m_axi_ddr_V_WSTRB");
    sc_trace(mVcdFile, m_axi_ddr_V_WLAST, "(port)m_axi_ddr_V_WLAST");
    sc_trace(mVcdFile, m_axi_ddr_V_WID, "(port)m_axi_ddr_V_WID");
    sc_trace(mVcdFile, m_axi_ddr_V_WUSER, "(port)m_axi_ddr_V_WUSER");
    sc_trace(mVcdFile, m_axi_ddr_V_ARVALID, "(port)m_axi_ddr_V_ARVALID");
    sc_trace(mVcdFile, m_axi_ddr_V_ARREADY, "(port)m_axi_ddr_V_ARREADY");
    sc_trace(mVcdFile, m_axi_ddr_V_ARADDR, "(port)m_axi_ddr_V_ARADDR");
    sc_trace(mVcdFile, m_axi_ddr_V_ARID, "(port)m_axi_ddr_V_ARID");
    sc_trace(mVcdFile, m_axi_ddr_V_ARLEN, "(port)m_axi_ddr_V_ARLEN");
    sc_trace(mVcdFile, m_axi_ddr_V_ARSIZE, "(port)m_axi_ddr_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_ddr_V_ARBURST, "(port)m_axi_ddr_V_ARBURST");
    sc_trace(mVcdFile, m_axi_ddr_V_ARLOCK, "(port)m_axi_ddr_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_ddr_V_ARCACHE, "(port)m_axi_ddr_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_ddr_V_ARPROT, "(port)m_axi_ddr_V_ARPROT");
    sc_trace(mVcdFile, m_axi_ddr_V_ARQOS, "(port)m_axi_ddr_V_ARQOS");
    sc_trace(mVcdFile, m_axi_ddr_V_ARREGION, "(port)m_axi_ddr_V_ARREGION");
    sc_trace(mVcdFile, m_axi_ddr_V_ARUSER, "(port)m_axi_ddr_V_ARUSER");
    sc_trace(mVcdFile, m_axi_ddr_V_RVALID, "(port)m_axi_ddr_V_RVALID");
    sc_trace(mVcdFile, m_axi_ddr_V_RREADY, "(port)m_axi_ddr_V_RREADY");
    sc_trace(mVcdFile, m_axi_ddr_V_RDATA, "(port)m_axi_ddr_V_RDATA");
    sc_trace(mVcdFile, m_axi_ddr_V_RLAST, "(port)m_axi_ddr_V_RLAST");
    sc_trace(mVcdFile, m_axi_ddr_V_RID, "(port)m_axi_ddr_V_RID");
    sc_trace(mVcdFile, m_axi_ddr_V_RUSER, "(port)m_axi_ddr_V_RUSER");
    sc_trace(mVcdFile, m_axi_ddr_V_RRESP, "(port)m_axi_ddr_V_RRESP");
    sc_trace(mVcdFile, m_axi_ddr_V_BVALID, "(port)m_axi_ddr_V_BVALID");
    sc_trace(mVcdFile, m_axi_ddr_V_BREADY, "(port)m_axi_ddr_V_BREADY");
    sc_trace(mVcdFile, m_axi_ddr_V_BRESP, "(port)m_axi_ddr_V_BRESP");
    sc_trace(mVcdFile, m_axi_ddr_V_BID, "(port)m_axi_ddr_V_BID");
    sc_trace(mVcdFile, m_axi_ddr_V_BUSER, "(port)m_axi_ddr_V_BUSER");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, sourceAddress, "sourceAddress");
    sc_trace(mVcdFile, sourceAddress_in_sig, "sourceAddress_in_sig");
    sc_trace(mVcdFile, sourceAddress_preg, "sourceAddress_preg");
    sc_trace(mVcdFile, sourceAddress_ap_vld, "sourceAddress_ap_vld");
    sc_trace(mVcdFile, sourceAddress_ap_vld_in_sig, "sourceAddress_ap_vld_in_sig");
    sc_trace(mVcdFile, sourceAddress_ap_vld_preg, "sourceAddress_ap_vld_preg");
    sc_trace(mVcdFile, key_in_V, "key_in_V");
    sc_trace(mVcdFile, key_in_V_in_sig, "key_in_V_in_sig");
    sc_trace(mVcdFile, key_in_V_preg, "key_in_V_preg");
    sc_trace(mVcdFile, key_in_V_ap_vld, "key_in_V_ap_vld");
    sc_trace(mVcdFile, key_in_V_ap_vld_in_sig, "key_in_V_ap_vld_in_sig");
    sc_trace(mVcdFile, key_in_V_ap_vld_preg, "key_in_V_ap_vld_preg");
    sc_trace(mVcdFile, destinationAddress, "destinationAddress");
    sc_trace(mVcdFile, destinationAddress_in_sig, "destinationAddress_in_sig");
    sc_trace(mVcdFile, destinationAddress_preg, "destinationAddress_preg");
    sc_trace(mVcdFile, destinationAddress_ap_vld, "destinationAddress_ap_vld");
    sc_trace(mVcdFile, destinationAddress_ap_vld_in_sig, "destinationAddress_ap_vld_in_sig");
    sc_trace(mVcdFile, destinationAddress_ap_vld_preg, "destinationAddress_ap_vld_preg");
    sc_trace(mVcdFile, length_r, "length_r");
    sc_trace(mVcdFile, length_r_in_sig, "length_r_in_sig");
    sc_trace(mVcdFile, length_r_preg, "length_r_preg");
    sc_trace(mVcdFile, length_r_ap_vld, "length_r_ap_vld");
    sc_trace(mVcdFile, length_r_ap_vld_in_sig, "length_r_ap_vld_in_sig");
    sc_trace(mVcdFile, length_r_ap_vld_preg, "length_r_ap_vld_preg");
    sc_trace(mVcdFile, ap_return, "ap_return");
    sc_trace(mVcdFile, ddr_V_AWVALID, "ddr_V_AWVALID");
    sc_trace(mVcdFile, ddr_V_AWREADY, "ddr_V_AWREADY");
    sc_trace(mVcdFile, ddr_V_AWADDR, "ddr_V_AWADDR");
    sc_trace(mVcdFile, ddr_V_AWID, "ddr_V_AWID");
    sc_trace(mVcdFile, ddr_V_AWLEN, "ddr_V_AWLEN");
    sc_trace(mVcdFile, ddr_V_AWSIZE, "ddr_V_AWSIZE");
    sc_trace(mVcdFile, ddr_V_AWBURST, "ddr_V_AWBURST");
    sc_trace(mVcdFile, ddr_V_AWLOCK, "ddr_V_AWLOCK");
    sc_trace(mVcdFile, ddr_V_AWCACHE, "ddr_V_AWCACHE");
    sc_trace(mVcdFile, ddr_V_AWPROT, "ddr_V_AWPROT");
    sc_trace(mVcdFile, ddr_V_AWQOS, "ddr_V_AWQOS");
    sc_trace(mVcdFile, ddr_V_AWREGION, "ddr_V_AWREGION");
    sc_trace(mVcdFile, ddr_V_AWUSER, "ddr_V_AWUSER");
    sc_trace(mVcdFile, ddr_V_WVALID, "ddr_V_WVALID");
    sc_trace(mVcdFile, ddr_V_WREADY, "ddr_V_WREADY");
    sc_trace(mVcdFile, ddr_V_WDATA, "ddr_V_WDATA");
    sc_trace(mVcdFile, ddr_V_WSTRB, "ddr_V_WSTRB");
    sc_trace(mVcdFile, ddr_V_WLAST, "ddr_V_WLAST");
    sc_trace(mVcdFile, ddr_V_WID, "ddr_V_WID");
    sc_trace(mVcdFile, ddr_V_WUSER, "ddr_V_WUSER");
    sc_trace(mVcdFile, ddr_V_ARVALID, "ddr_V_ARVALID");
    sc_trace(mVcdFile, ddr_V_ARREADY, "ddr_V_ARREADY");
    sc_trace(mVcdFile, ddr_V_ARADDR, "ddr_V_ARADDR");
    sc_trace(mVcdFile, ddr_V_ARID, "ddr_V_ARID");
    sc_trace(mVcdFile, ddr_V_ARLEN, "ddr_V_ARLEN");
    sc_trace(mVcdFile, ddr_V_ARSIZE, "ddr_V_ARSIZE");
    sc_trace(mVcdFile, ddr_V_ARBURST, "ddr_V_ARBURST");
    sc_trace(mVcdFile, ddr_V_ARLOCK, "ddr_V_ARLOCK");
    sc_trace(mVcdFile, ddr_V_ARCACHE, "ddr_V_ARCACHE");
    sc_trace(mVcdFile, ddr_V_ARPROT, "ddr_V_ARPROT");
    sc_trace(mVcdFile, ddr_V_ARQOS, "ddr_V_ARQOS");
    sc_trace(mVcdFile, ddr_V_ARREGION, "ddr_V_ARREGION");
    sc_trace(mVcdFile, ddr_V_ARUSER, "ddr_V_ARUSER");
    sc_trace(mVcdFile, ddr_V_RVALID, "ddr_V_RVALID");
    sc_trace(mVcdFile, ddr_V_RREADY, "ddr_V_RREADY");
    sc_trace(mVcdFile, ddr_V_RDATA, "ddr_V_RDATA");
    sc_trace(mVcdFile, ddr_V_RLAST, "ddr_V_RLAST");
    sc_trace(mVcdFile, ddr_V_RID, "ddr_V_RID");
    sc_trace(mVcdFile, ddr_V_RUSER, "ddr_V_RUSER");
    sc_trace(mVcdFile, ddr_V_RRESP, "ddr_V_RRESP");
    sc_trace(mVcdFile, ddr_V_BVALID, "ddr_V_BVALID");
    sc_trace(mVcdFile, ddr_V_BREADY, "ddr_V_BREADY");
    sc_trace(mVcdFile, ddr_V_BRESP, "ddr_V_BRESP");
    sc_trace(mVcdFile, ddr_V_BID, "ddr_V_BID");
    sc_trace(mVcdFile, ddr_V_BUSER, "ddr_V_BUSER");
    sc_trace(mVcdFile, ap_sig_bdd_250, "ap_sig_bdd_250");
    sc_trace(mVcdFile, sourceAddressLocal_2_fu_236_p1, "sourceAddressLocal_2_fu_236_p1");
    sc_trace(mVcdFile, destinationAddressLocal_2_fu_253_p1, "destinationAddressLocal_2_fu_253_p1");
    sc_trace(mVcdFile, tmp_fu_257_p2, "tmp_fu_257_p2");
    sc_trace(mVcdFile, tmp_reg_333, "tmp_reg_333");
    sc_trace(mVcdFile, exitcond_fu_262_p2, "exitcond_fu_262_p2");
    sc_trace(mVcdFile, ap_sig_ioackin_ddr_V_ARREADY, "ap_sig_ioackin_ddr_V_ARREADY");
    sc_trace(mVcdFile, sourceAddressLocal_1_fu_278_p2, "sourceAddressLocal_1_fu_278_p2");
    sc_trace(mVcdFile, sourceAddressLocal_1_reg_347, "sourceAddressLocal_1_reg_347");
    sc_trace(mVcdFile, data_V_reg_352, "data_V_reg_352");
    sc_trace(mVcdFile, grp_aestest_fu_167_ap_return, "grp_aestest_fu_167_ap_return");
    sc_trace(mVcdFile, encrypted_data_V_reg_357, "encrypted_data_V_reg_357");
    sc_trace(mVcdFile, ap_sig_ioackin_ddr_V_AWREADY, "ap_sig_ioackin_ddr_V_AWREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_ddr_V_WREADY, "ap_sig_ioackin_ddr_V_WREADY");
    sc_trace(mVcdFile, destinationAddressLocal_1_fu_295_p2, "destinationAddressLocal_1_fu_295_p2");
    sc_trace(mVcdFile, destinationAddressLocal_1_reg_367, "destinationAddressLocal_1_reg_367");
    sc_trace(mVcdFile, grp_aestest_fu_167_ap_rst, "grp_aestest_fu_167_ap_rst");
    sc_trace(mVcdFile, grp_aestest_fu_167_ap_start, "grp_aestest_fu_167_ap_start");
    sc_trace(mVcdFile, grp_aestest_fu_167_ap_done, "grp_aestest_fu_167_ap_done");
    sc_trace(mVcdFile, grp_aestest_fu_167_ap_idle, "grp_aestest_fu_167_ap_idle");
    sc_trace(mVcdFile, grp_aestest_fu_167_ap_ready, "grp_aestest_fu_167_ap_ready");
    sc_trace(mVcdFile, grp_aestest_fu_167_ap_ce, "grp_aestest_fu_167_ap_ce");
    sc_trace(mVcdFile, grp_aestest_fu_167_inptext_V_read, "grp_aestest_fu_167_inptext_V_read");
    sc_trace(mVcdFile, grp_aestest_fu_167_key_V_read, "grp_aestest_fu_167_key_V_read");
    sc_trace(mVcdFile, sourceAddressLocal1_reg_147, "sourceAddressLocal1_reg_147");
    sc_trace(mVcdFile, destinationAddressLocal1_reg_156, "destinationAddressLocal1_reg_156");
    sc_trace(mVcdFile, grp_aestest_fu_167_ap_start_ap_start_reg, "grp_aestest_fu_167_ap_start_ap_start_reg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, tmp_1_fu_267_p1, "tmp_1_fu_267_p1");
    sc_trace(mVcdFile, tmp_2_fu_284_p1, "tmp_2_fu_284_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_ddr_V_ARREADY, "ap_reg_ioackin_ddr_V_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_ddr_V_AWREADY, "ap_reg_ioackin_ddr_V_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_ddr_V_WREADY, "ap_reg_ioackin_ddr_V_WREADY");
    sc_trace(mVcdFile, sourceAddress_assign_fu_100, "sourceAddress_assign_fu_100");
    sc_trace(mVcdFile, destinationAddress_assign_fu_104, "destinationAddress_assign_fu_104");
    sc_trace(mVcdFile, sourceAddressLocal_fu_226_p4, "sourceAddressLocal_fu_226_p4");
    sc_trace(mVcdFile, destinationAddressLocal_fu_243_p4, "destinationAddressLocal_fu_243_p4");
    sc_trace(mVcdFile, ap_sig_bdd_1781, "ap_sig_bdd_1781");
#endif

    }
    mHdltvinHandle.open("aes.hdltvin.dat");
    mHdltvoutHandle.open("aes.hdltvout.dat");
}

aes::~aes() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete aes_AXILiteS_s_axi_U;
    delete aes_ddr_V_m_axi_U;
    delete grp_aestest_fu_167;
}

void aes::thread_ap_clk_no_reset_() {
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ioackin_ddr_V_ARREADY = ap_const_logic_0;
    } else {
        if (ap_sig_bdd_1781.read()) {
            if (!(esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_ARREADY.read()))) {
                ap_reg_ioackin_ddr_V_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, ddr_V_ARREADY.read())) {
                ap_reg_ioackin_ddr_V_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ioackin_ddr_V_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,5,5>(ap_ST_st25_fsm_24, ap_CS_fsm.read())) {
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_WREADY.read()))) {
                ap_reg_ioackin_ddr_V_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, ddr_V_AWREADY.read())) {
                ap_reg_ioackin_ddr_V_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ioackin_ddr_V_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,5,5>(ap_ST_st25_fsm_24, ap_CS_fsm.read())) {
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_WREADY.read()))) {
                ap_reg_ioackin_ddr_V_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, ddr_V_WREADY.read())) {
                ap_reg_ioackin_ddr_V_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,5,5>(ap_ST_st26_fsm_25, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ddr_V_BVALID.read(), ap_const_logic_0))) {
        destinationAddressLocal1_reg_156 = destinationAddressLocal_1_reg_367.read();
    } else if (esl_seteq<1,5,5>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        destinationAddressLocal1_reg_156 = destinationAddressLocal_2_fu_253_p1.read();
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        destinationAddress_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,5,5>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
             !(esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_ARREADY.read())) && 
             !esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0))) {
            destinationAddress_ap_vld_preg = ap_const_logic_0;
        } else if ((!(esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, destinationAddress_ap_vld.read()))) {
            destinationAddress_ap_vld_preg = destinationAddress_ap_vld.read();
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        destinationAddress_preg = ap_const_lv32_0;
    } else {
        if ((!(esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, destinationAddress_ap_vld.read()))) {
            destinationAddress_preg = destinationAddress.read();
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        grp_aestest_fu_167_ap_start_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
             esl_seteq<1,5,5>(ap_ST_st5_fsm_4, ap_NS_fsm.read()))) {
            grp_aestest_fu_167_ap_start_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aestest_fu_167_ap_ready.read())) {
            grp_aestest_fu_167_ap_start_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        key_in_V_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,5,5>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
             !(esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_ARREADY.read())) && 
             !esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0))) {
            key_in_V_ap_vld_preg = ap_const_logic_0;
        } else if ((!(esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, key_in_V_ap_vld.read()))) {
            key_in_V_ap_vld_preg = key_in_V_ap_vld.read();
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        key_in_V_preg = ap_const_lv128_lc_1;
    } else {
        if ((!(esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, key_in_V_ap_vld.read()))) {
            key_in_V_preg = key_in_V.read();
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        length_r_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,5,5>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
             !(esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_ARREADY.read())) && 
             !esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0))) {
            length_r_ap_vld_preg = ap_const_logic_0;
        } else if ((!(esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, length_r_ap_vld.read()))) {
            length_r_ap_vld_preg = length_r_ap_vld.read();
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        length_r_preg = ap_const_lv32_0;
    } else {
        if ((!(esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, length_r_ap_vld.read()))) {
            length_r_preg = length_r.read();
        }
    }
    if ((esl_seteq<1,5,5>(ap_ST_st26_fsm_25, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ddr_V_BVALID.read(), ap_const_logic_0))) {
        sourceAddressLocal1_reg_147 = sourceAddressLocal_1_reg_347.read();
    } else if (esl_seteq<1,5,5>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        sourceAddressLocal1_reg_147 = sourceAddressLocal_2_fu_236_p1.read();
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        sourceAddress_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,5,5>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
             !(esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_ARREADY.read())) && 
             !esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0))) {
            sourceAddress_ap_vld_preg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, sourceAddress_ap_vld.read()) && 
                    !(esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())))) {
            sourceAddress_ap_vld_preg = sourceAddress_ap_vld.read();
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        sourceAddress_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, sourceAddress_ap_vld.read()) && 
             !(esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())))) {
            sourceAddress_preg = sourceAddress.read();
        }
    }
    if ((esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && !esl_seteq<1,1,1>(ddr_V_RVALID.read(), ap_const_logic_0))) {
        data_V_reg_352 = ddr_V_RDATA.read();
    }
    if ((esl_seteq<1,5,5>(ap_ST_st25_fsm_24, ap_CS_fsm.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_WREADY.read())))) {
        destinationAddressLocal_1_reg_367 = destinationAddressLocal_1_fu_295_p2.read();
    }
    if ((esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && !ap_sig_bdd_250.read())) {
        destinationAddress_assign_fu_104 = destinationAddress_in_sig.read();
        sourceAddress_assign_fu_100 = sourceAddress_in_sig.read();
    }
    if (esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read())) {
        encrypted_data_V_reg_357 = grp_aestest_fu_167_ap_return.read();
    }
    if ((esl_seteq<1,5,5>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_ARREADY.read())))) {
        sourceAddressLocal_1_reg_347 = sourceAddressLocal_1_fu_278_p2.read();
    }
    if (esl_seteq<1,5,5>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        tmp_reg_333 = tmp_fu_257_p2.read();
    }
}

void aes::thread_ap_done() {
    if ((esl_seteq<1,5,5>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
         !(esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_ARREADY.read())) && 
         !esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes::thread_ap_ready() {
    if ((esl_seteq<1,5,5>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
         !(esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_ARREADY.read())) && 
         !esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes::thread_ap_return() {
    ap_return = ap_const_lv1_1;
}

void aes::thread_ap_sig_bdd_1781() {
    ap_sig_bdd_1781 = (esl_seteq<1,5,5>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0));
}

void aes::thread_ap_sig_bdd_250() {
    ap_sig_bdd_250 = (esl_seteq<1,1,1>(length_r_ap_vld_in_sig.read(), ap_const_logic_0) || esl_seteq<1,1,1>(destinationAddress_ap_vld_in_sig.read(), ap_const_logic_0) || esl_seteq<1,1,1>(sourceAddress_ap_vld_in_sig.read(), ap_const_logic_0) || esl_seteq<1,1,1>(key_in_V_ap_vld_in_sig.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0));
}

void aes::thread_ap_sig_ioackin_ddr_V_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_ddr_V_ARREADY.read())) {
        ap_sig_ioackin_ddr_V_ARREADY = ddr_V_ARREADY.read();
    } else {
        ap_sig_ioackin_ddr_V_ARREADY = ap_const_logic_1;
    }
}

void aes::thread_ap_sig_ioackin_ddr_V_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_ddr_V_AWREADY.read())) {
        ap_sig_ioackin_ddr_V_AWREADY = ddr_V_AWREADY.read();
    } else {
        ap_sig_ioackin_ddr_V_AWREADY = ap_const_logic_1;
    }
}

void aes::thread_ap_sig_ioackin_ddr_V_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_ddr_V_WREADY.read())) {
        ap_sig_ioackin_ddr_V_WREADY = ddr_V_WREADY.read();
    } else {
        ap_sig_ioackin_ddr_V_WREADY = ap_const_logic_1;
    }
}

void aes::thread_ddr_V_ARADDR() {
    ddr_V_ARADDR =  (sc_lv<32>) (tmp_1_fu_267_p1.read());
}

void aes::thread_ddr_V_ARBURST() {
    ddr_V_ARBURST = ap_const_lv2_0;
}

void aes::thread_ddr_V_ARCACHE() {
    ddr_V_ARCACHE = ap_const_lv4_0;
}

void aes::thread_ddr_V_ARID() {
    ddr_V_ARID = ap_const_lv1_0;
}

void aes::thread_ddr_V_ARLEN() {
    ddr_V_ARLEN = ap_const_lv32_1;
}

void aes::thread_ddr_V_ARLOCK() {
    ddr_V_ARLOCK = ap_const_lv2_0;
}

void aes::thread_ddr_V_ARPROT() {
    ddr_V_ARPROT = ap_const_lv3_0;
}

void aes::thread_ddr_V_ARQOS() {
    ddr_V_ARQOS = ap_const_lv4_0;
}

void aes::thread_ddr_V_ARREGION() {
    ddr_V_ARREGION = ap_const_lv4_0;
}

void aes::thread_ddr_V_ARSIZE() {
    ddr_V_ARSIZE = ap_const_lv3_0;
}

void aes::thread_ddr_V_ARUSER() {
    ddr_V_ARUSER = ap_const_lv1_0;
}

void aes::thread_ddr_V_ARVALID() {
    if ((esl_seteq<1,5,5>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_ddr_V_ARREADY.read()))) {
        ddr_V_ARVALID = ap_const_logic_1;
    } else {
        ddr_V_ARVALID = ap_const_logic_0;
    }
}

void aes::thread_ddr_V_AWADDR() {
    ddr_V_AWADDR =  (sc_lv<32>) (tmp_2_fu_284_p1.read());
}

void aes::thread_ddr_V_AWBURST() {
    ddr_V_AWBURST = ap_const_lv2_0;
}

void aes::thread_ddr_V_AWCACHE() {
    ddr_V_AWCACHE = ap_const_lv4_0;
}

void aes::thread_ddr_V_AWID() {
    ddr_V_AWID = ap_const_lv1_0;
}

void aes::thread_ddr_V_AWLEN() {
    ddr_V_AWLEN = ap_const_lv32_1;
}

void aes::thread_ddr_V_AWLOCK() {
    ddr_V_AWLOCK = ap_const_lv2_0;
}

void aes::thread_ddr_V_AWPROT() {
    ddr_V_AWPROT = ap_const_lv3_0;
}

void aes::thread_ddr_V_AWQOS() {
    ddr_V_AWQOS = ap_const_lv4_0;
}

void aes::thread_ddr_V_AWREGION() {
    ddr_V_AWREGION = ap_const_lv4_0;
}

void aes::thread_ddr_V_AWSIZE() {
    ddr_V_AWSIZE = ap_const_lv3_0;
}

void aes::thread_ddr_V_AWUSER() {
    ddr_V_AWUSER = ap_const_lv1_0;
}

void aes::thread_ddr_V_AWVALID() {
    if ((esl_seteq<1,5,5>(ap_ST_st25_fsm_24, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_ddr_V_AWREADY.read()))) {
        ddr_V_AWVALID = ap_const_logic_1;
    } else {
        ddr_V_AWVALID = ap_const_logic_0;
    }
}

void aes::thread_ddr_V_BREADY() {
    if ((esl_seteq<1,5,5>(ap_ST_st26_fsm_25, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ddr_V_BVALID.read(), ap_const_logic_0))) {
        ddr_V_BREADY = ap_const_logic_1;
    } else {
        ddr_V_BREADY = ap_const_logic_0;
    }
}

void aes::thread_ddr_V_RREADY() {
    if ((esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ddr_V_RVALID.read(), ap_const_logic_0))) {
        ddr_V_RREADY = ap_const_logic_1;
    } else {
        ddr_V_RREADY = ap_const_logic_0;
    }
}

void aes::thread_ddr_V_WDATA() {
    ddr_V_WDATA = encrypted_data_V_reg_357.read();
}

void aes::thread_ddr_V_WID() {
    ddr_V_WID = ap_const_lv1_0;
}

void aes::thread_ddr_V_WLAST() {
    ddr_V_WLAST = ap_const_logic_0;
}

void aes::thread_ddr_V_WSTRB() {
    ddr_V_WSTRB = ap_const_lv16_FFFF;
}

void aes::thread_ddr_V_WUSER() {
    ddr_V_WUSER = ap_const_lv1_0;
}

void aes::thread_ddr_V_WVALID() {
    if ((esl_seteq<1,5,5>(ap_ST_st25_fsm_24, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_ddr_V_WREADY.read()))) {
        ddr_V_WVALID = ap_const_logic_1;
    } else {
        ddr_V_WVALID = ap_const_logic_0;
    }
}

void aes::thread_destinationAddressLocal_1_fu_295_p2() {
    destinationAddressLocal_1_fu_295_p2 = (!destinationAddressLocal1_reg_156.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(destinationAddressLocal1_reg_156.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void aes::thread_destinationAddressLocal_2_fu_253_p1() {
    destinationAddressLocal_2_fu_253_p1 = esl_zext<32,28>(destinationAddressLocal_fu_243_p4.read());
}

void aes::thread_destinationAddressLocal_fu_243_p4() {
    destinationAddressLocal_fu_243_p4 = destinationAddress_assign_fu_104.read().range(31, 4);
}

void aes::thread_destinationAddress_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, destinationAddress_ap_vld.read())) {
        destinationAddress_ap_vld_in_sig = destinationAddress_ap_vld.read();
    } else {
        destinationAddress_ap_vld_in_sig = destinationAddress_ap_vld_preg.read();
    }
}

void aes::thread_destinationAddress_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, destinationAddress_ap_vld.read())) {
        destinationAddress_in_sig = destinationAddress.read();
    } else {
        destinationAddress_in_sig = destinationAddress_preg.read();
    }
}

void aes::thread_exitcond_fu_262_p2() {
    exitcond_fu_262_p2 = (!sourceAddressLocal1_reg_147.read().is_01() || !tmp_reg_333.read().is_01())? sc_lv<1>(): sc_lv<1>(sourceAddressLocal1_reg_147.read() == tmp_reg_333.read());
}

void aes::thread_grp_aestest_fu_167_ap_ce() {
    grp_aestest_fu_167_ap_ce = ap_const_logic_1;
}

void aes::thread_grp_aestest_fu_167_ap_rst() {
    grp_aestest_fu_167_ap_rst =  (sc_logic) (~ap_rst_n.read());
}

void aes::thread_grp_aestest_fu_167_ap_start() {
    grp_aestest_fu_167_ap_start = grp_aestest_fu_167_ap_start_ap_start_reg.read();
}

void aes::thread_grp_aestest_fu_167_inptext_V_read() {
    grp_aestest_fu_167_inptext_V_read = data_V_reg_352.read();
}

void aes::thread_grp_aestest_fu_167_key_V_read() {
    grp_aestest_fu_167_key_V_read = key_in_V_in_sig.read();
}

void aes::thread_key_in_V_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, key_in_V_ap_vld.read())) {
        key_in_V_ap_vld_in_sig = key_in_V_ap_vld.read();
    } else {
        key_in_V_ap_vld_in_sig = key_in_V_ap_vld_preg.read();
    }
}

void aes::thread_key_in_V_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, key_in_V_ap_vld.read())) {
        key_in_V_in_sig = key_in_V.read();
    } else {
        key_in_V_in_sig = key_in_V_preg.read();
    }
}

void aes::thread_length_r_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, length_r_ap_vld.read())) {
        length_r_ap_vld_in_sig = length_r_ap_vld.read();
    } else {
        length_r_ap_vld_in_sig = length_r_ap_vld_preg.read();
    }
}

void aes::thread_length_r_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, length_r_ap_vld.read())) {
        length_r_in_sig = length_r.read();
    } else {
        length_r_in_sig = length_r_preg.read();
    }
}

void aes::thread_sourceAddressLocal_1_fu_278_p2() {
    sourceAddressLocal_1_fu_278_p2 = (!sourceAddressLocal1_reg_147.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(sourceAddressLocal1_reg_147.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void aes::thread_sourceAddressLocal_2_fu_236_p1() {
    sourceAddressLocal_2_fu_236_p1 = esl_zext<32,28>(sourceAddressLocal_fu_226_p4.read());
}

void aes::thread_sourceAddressLocal_fu_226_p4() {
    sourceAddressLocal_fu_226_p4 = sourceAddress_assign_fu_100.read().range(31, 4);
}

void aes::thread_sourceAddress_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, sourceAddress_ap_vld.read())) {
        sourceAddress_ap_vld_in_sig = sourceAddress_ap_vld.read();
    } else {
        sourceAddress_ap_vld_in_sig = sourceAddress_ap_vld_preg.read();
    }
}

void aes::thread_sourceAddress_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, sourceAddress_ap_vld.read())) {
        sourceAddress_in_sig = sourceAddress.read();
    } else {
        sourceAddress_in_sig = sourceAddress_preg.read();
    }
}

void aes::thread_tmp_1_fu_267_p1() {
    tmp_1_fu_267_p1 = esl_zext<64,32>(sourceAddressLocal1_reg_147.read());
}

void aes::thread_tmp_2_fu_284_p1() {
    tmp_2_fu_284_p1 = esl_zext<64,32>(destinationAddressLocal1_reg_156.read());
}

void aes::thread_tmp_fu_257_p2() {
    tmp_fu_257_p2 = (!sourceAddressLocal_2_fu_236_p1.read().is_01() || !length_r_in_sig.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sourceAddressLocal_2_fu_236_p1.read()) + sc_biguint<32>(length_r_in_sig.read()));
}

void aes::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if (!ap_sig_bdd_250.read()) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_ARREADY.read())) && !esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else if ((esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(exitcond_fu_262_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_ARREADY.read())))) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 3 : 
            if (!esl_seteq<1,1,1>(ddr_V_RVALID.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 7 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 9 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 10 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 11 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
            break;
        case 12 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
            break;
        case 13 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
            break;
        case 14 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
            break;
        case 15 : 
            ap_NS_fsm = ap_ST_st17_fsm_16;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st18_fsm_17;
            break;
        case 17 : 
            ap_NS_fsm = ap_ST_st19_fsm_18;
            break;
        case 18 : 
            ap_NS_fsm = ap_ST_st20_fsm_19;
            break;
        case 19 : 
            ap_NS_fsm = ap_ST_st21_fsm_20;
            break;
        case 20 : 
            ap_NS_fsm = ap_ST_st22_fsm_21;
            break;
        case 21 : 
            ap_NS_fsm = ap_ST_st23_fsm_22;
            break;
        case 22 : 
            ap_NS_fsm = ap_ST_st24_fsm_23;
            break;
        case 23 : 
            ap_NS_fsm = ap_ST_st25_fsm_24;
            break;
        case 24 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_V_WREADY.read()))) {
                ap_NS_fsm = ap_ST_st26_fsm_25;
            } else {
                ap_NS_fsm = ap_ST_st25_fsm_24;
            }
            break;
        case 25 : 
            if (!esl_seteq<1,1,1>(ddr_V_BVALID.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st26_fsm_25;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}
void aes::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_AWVALID\" :  \"" << m_axi_ddr_V_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_V_AWREADY\" :  \"" << m_axi_ddr_V_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_AWADDR\" :  \"" << m_axi_ddr_V_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_AWID\" :  \"" << m_axi_ddr_V_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_AWLEN\" :  \"" << m_axi_ddr_V_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_AWSIZE\" :  \"" << m_axi_ddr_V_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_AWBURST\" :  \"" << m_axi_ddr_V_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_AWLOCK\" :  \"" << m_axi_ddr_V_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_AWCACHE\" :  \"" << m_axi_ddr_V_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_AWPROT\" :  \"" << m_axi_ddr_V_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_AWQOS\" :  \"" << m_axi_ddr_V_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_AWREGION\" :  \"" << m_axi_ddr_V_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_AWUSER\" :  \"" << m_axi_ddr_V_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_WVALID\" :  \"" << m_axi_ddr_V_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_V_WREADY\" :  \"" << m_axi_ddr_V_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_WDATA\" :  \"" << m_axi_ddr_V_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_WSTRB\" :  \"" << m_axi_ddr_V_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_WLAST\" :  \"" << m_axi_ddr_V_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_WID\" :  \"" << m_axi_ddr_V_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_WUSER\" :  \"" << m_axi_ddr_V_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_ARVALID\" :  \"" << m_axi_ddr_V_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_V_ARREADY\" :  \"" << m_axi_ddr_V_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_ARADDR\" :  \"" << m_axi_ddr_V_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_ARID\" :  \"" << m_axi_ddr_V_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_ARLEN\" :  \"" << m_axi_ddr_V_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_ARSIZE\" :  \"" << m_axi_ddr_V_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_ARBURST\" :  \"" << m_axi_ddr_V_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_ARLOCK\" :  \"" << m_axi_ddr_V_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_ARCACHE\" :  \"" << m_axi_ddr_V_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_ARPROT\" :  \"" << m_axi_ddr_V_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_ARQOS\" :  \"" << m_axi_ddr_V_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_ARREGION\" :  \"" << m_axi_ddr_V_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_ARUSER\" :  \"" << m_axi_ddr_V_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_V_RVALID\" :  \"" << m_axi_ddr_V_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_RREADY\" :  \"" << m_axi_ddr_V_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_V_RDATA\" :  \"" << m_axi_ddr_V_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_V_RLAST\" :  \"" << m_axi_ddr_V_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_V_RID\" :  \"" << m_axi_ddr_V_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_V_RUSER\" :  \"" << m_axi_ddr_V_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_V_RRESP\" :  \"" << m_axi_ddr_V_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_V_BVALID\" :  \"" << m_axi_ddr_V_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_V_BREADY\" :  \"" << m_axi_ddr_V_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_V_BRESP\" :  \"" << m_axi_ddr_V_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_V_BID\" :  \"" << m_axi_ddr_V_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_V_BUSER\" :  \"" << m_axi_ddr_V_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

