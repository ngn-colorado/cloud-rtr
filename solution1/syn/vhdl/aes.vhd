-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_MM2S_CTL_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_MM2S_CTL_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_MM2S_CTL_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_S2MM_CTL_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_S2MM_CTL_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_M_MM2S_CTL_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_M_S2MM_CTL_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_M_S2MM_CTL_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_S2MM_CTL_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_MM2S_CTL_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_MM2S_CTL_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_S2MM_CTL_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_AWVALID : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_AWREADY : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ADDR_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_mm2s_ctl_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_mm2s_ctl_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_mm2s_ctl_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_AWUSER_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_WVALID : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_WREADY : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_DATA_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_DATA_WIDTH/8-1 downto 0);
    m_axi_m_mm2s_ctl_WLAST : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_WUSER_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_ARVALID : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_ARREADY : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ADDR_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_mm2s_ctl_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_mm2s_ctl_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_mm2s_ctl_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ARUSER_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_RVALID : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_RREADY : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_DATA_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_RLAST : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_RUSER_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_BVALID : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_BREADY : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_BUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_AWVALID : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_AWREADY : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ADDR_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_s2mm_ctl_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_s2mm_ctl_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_s2mm_ctl_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_AWUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_WVALID : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_WREADY : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_DATA_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_DATA_WIDTH/8-1 downto 0);
    m_axi_m_s2mm_ctl_WLAST : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_WUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_ARVALID : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_ARREADY : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ADDR_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_s2mm_ctl_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_s2mm_ctl_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_s2mm_ctl_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ARUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_RVALID : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_RREADY : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_DATA_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_RLAST : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_RUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_BVALID : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_BREADY : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_BUSER_WIDTH-1 downto 0);
    s_in_V_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    s_in_V_V_TVALID : IN STD_LOGIC;
    s_in_V_V_TREADY : OUT STD_LOGIC;
    s_out_V_V_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    s_out_V_V_TVALID : OUT STD_LOGIC;
    s_out_V_V_TREADY : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of aes is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_ready : STD_LOGIC;
    signal sourceAddress : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddress_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddress_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sourceAddress_ap_vld : STD_LOGIC;
    signal sourceAddress_ap_vld_in_sig : STD_LOGIC;
    signal sourceAddress_ap_vld_preg : STD_LOGIC := '0';
    signal key_in_V : STD_LOGIC_VECTOR (127 downto 0);
    signal key_in_V_in_sig : STD_LOGIC_VECTOR (127 downto 0);
    signal key_in_V_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal key_in_V_ap_vld : STD_LOGIC;
    signal key_in_V_ap_vld_in_sig : STD_LOGIC;
    signal key_in_V_ap_vld_preg : STD_LOGIC := '0';
    signal destinationAddress : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal destinationAddress_ap_vld : STD_LOGIC;
    signal destinationAddress_ap_vld_in_sig : STD_LOGIC;
    signal destinationAddress_ap_vld_preg : STD_LOGIC := '0';
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal length_r_ap_vld : STD_LOGIC;
    signal length_r_ap_vld_in_sig : STD_LOGIC;
    signal length_r_ap_vld_preg : STD_LOGIC := '0';
    signal ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_AWVALID : STD_LOGIC;
    signal m_mm2s_ctl_AWREADY : STD_LOGIC;
    signal m_mm2s_ctl_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mm2s_ctl_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mm2s_ctl_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_WVALID : STD_LOGIC;
    signal m_mm2s_ctl_WREADY : STD_LOGIC;
    signal m_mm2s_ctl_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_WLAST : STD_LOGIC;
    signal m_mm2s_ctl_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_ARVALID : STD_LOGIC;
    signal m_mm2s_ctl_ARREADY : STD_LOGIC;
    signal m_mm2s_ctl_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mm2s_ctl_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mm2s_ctl_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_RVALID : STD_LOGIC;
    signal m_mm2s_ctl_RREADY : STD_LOGIC;
    signal m_mm2s_ctl_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_RLAST : STD_LOGIC;
    signal m_mm2s_ctl_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_BVALID : STD_LOGIC;
    signal m_mm2s_ctl_BREADY : STD_LOGIC;
    signal m_mm2s_ctl_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_AWVALID : STD_LOGIC;
    signal m_s2mm_ctl_AWREADY : STD_LOGIC;
    signal m_s2mm_ctl_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal m_s2mm_ctl_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal m_s2mm_ctl_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_WVALID : STD_LOGIC;
    signal m_s2mm_ctl_WREADY : STD_LOGIC;
    signal m_s2mm_ctl_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_WLAST : STD_LOGIC;
    signal m_s2mm_ctl_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_ARVALID : STD_LOGIC;
    signal m_s2mm_ctl_ARREADY : STD_LOGIC;
    signal m_s2mm_ctl_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal m_s2mm_ctl_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal m_s2mm_ctl_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_RVALID : STD_LOGIC;
    signal m_s2mm_ctl_RREADY : STD_LOGIC;
    signal m_s2mm_ctl_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_RLAST : STD_LOGIC;
    signal m_s2mm_ctl_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_BVALID : STD_LOGIC;
    signal m_s2mm_ctl_BREADY : STD_LOGIC;
    signal m_s2mm_ctl_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_addr_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_addr_reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_mm2s_ctl_ARREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_s2mm_ctl_ARREADY : STD_LOGIC;
    signal ap_sig_bdd_405 : BOOLEAN;
    signal tmp_39_reg_505 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_sig_bdd_415 : BOOLEAN;
    signal tmp_325_fu_312_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_325_reg_510 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_40_reg_515 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_326_fu_326_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_326_reg_520 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_41_reg_525 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_43_reg_530 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_42_reg_535 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_327_fu_394_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_327_reg_540 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_44_reg_545 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_329_fu_408_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_329_reg_550 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_bdd_444 : BOOLEAN;
    signal ap_sig_ioackin_m_mm2s_ctl_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_mm2s_ctl_WREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_s2mm_ctl_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_s2mm_ctl_WREADY : STD_LOGIC;
    signal iterations_1_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal iterations_1_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aestest_fu_229_ap_rst : STD_LOGIC;
    signal grp_aestest_fu_229_ap_start : STD_LOGIC;
    signal grp_aestest_fu_229_ap_done : STD_LOGIC;
    signal grp_aestest_fu_229_ap_idle : STD_LOGIC;
    signal grp_aestest_fu_229_ap_ready : STD_LOGIC;
    signal grp_aestest_fu_229_ap_ce : STD_LOGIC;
    signal grp_aestest_fu_229_inptext_V_read : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aestest_fu_229_key_V_read : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aestest_fu_229_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_sig_ioackin_s_out_V_V_TREADY : STD_LOGIC;
    signal iterations_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aestest_fu_229_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ioackin_m_mm2s_ctl_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_mm2s_ctl_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_mm2s_ctl_WREADY : STD_LOGIC := '0';
    signal m_mm2s_ctl_assign_fu_330_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_2058 : BOOLEAN;
    signal tmp_s_fu_368_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_412_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_length_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_s2mm_ctl_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_s2mm_ctl_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_s2mm_ctl_WREADY : STD_LOGIC := '0';
    signal tmp_fu_339_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_376_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_421_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddress_assign_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_assign_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_s_out_V_V_TREADY : STD_LOGIC := '0';
    signal exitcond_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);

    component aestest IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        inptext_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        key_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component aes_AXILiteS_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (0 downto 0);
        sourceAddress : OUT STD_LOGIC_VECTOR (31 downto 0);
        sourceAddress_ap_vld : OUT STD_LOGIC;
        key_in_V : OUT STD_LOGIC_VECTOR (127 downto 0);
        key_in_V_ap_vld : OUT STD_LOGIC;
        destinationAddress : OUT STD_LOGIC_VECTOR (31 downto 0);
        destinationAddress_ap_vld : OUT STD_LOGIC;
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        length_r_ap_vld : OUT STD_LOGIC );
    end component;


    component aes_m_mm2s_ctl_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component aes_m_s2mm_ctl_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    aes_AXILiteS_s_axi_U : component aes_AXILiteS_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        sourceAddress => sourceAddress,
        sourceAddress_ap_vld => sourceAddress_ap_vld,
        key_in_V => key_in_V,
        key_in_V_ap_vld => key_in_V_ap_vld,
        destinationAddress => destinationAddress,
        destinationAddress_ap_vld => destinationAddress_ap_vld,
        length_r => length_r,
        length_r_ap_vld => length_r_ap_vld);

    aes_m_mm2s_ctl_m_axi_U : component aes_m_mm2s_ctl_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 2,
        C_ID_WIDTH => C_M_AXI_M_MM2S_CTL_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_M_MM2S_CTL_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_M_MM2S_CTL_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_M_MM2S_CTL_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_M_MM2S_CTL_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_M_MM2S_CTL_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_M_MM2S_CTL_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_M_MM2S_CTL_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_M_MM2S_CTL_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_M_MM2S_CTL_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_MM2S_CTL_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_MM2S_CTL_CACHE_VALUE)
    port map (
        AWVALID => m_axi_m_mm2s_ctl_AWVALID,
        AWREADY => m_axi_m_mm2s_ctl_AWREADY,
        AWADDR => m_axi_m_mm2s_ctl_AWADDR,
        AWID => m_axi_m_mm2s_ctl_AWID,
        AWLEN => m_axi_m_mm2s_ctl_AWLEN,
        AWSIZE => m_axi_m_mm2s_ctl_AWSIZE,
        AWBURST => m_axi_m_mm2s_ctl_AWBURST,
        AWLOCK => m_axi_m_mm2s_ctl_AWLOCK,
        AWCACHE => m_axi_m_mm2s_ctl_AWCACHE,
        AWPROT => m_axi_m_mm2s_ctl_AWPROT,
        AWQOS => m_axi_m_mm2s_ctl_AWQOS,
        AWREGION => m_axi_m_mm2s_ctl_AWREGION,
        AWUSER => m_axi_m_mm2s_ctl_AWUSER,
        WVALID => m_axi_m_mm2s_ctl_WVALID,
        WREADY => m_axi_m_mm2s_ctl_WREADY,
        WDATA => m_axi_m_mm2s_ctl_WDATA,
        WSTRB => m_axi_m_mm2s_ctl_WSTRB,
        WLAST => m_axi_m_mm2s_ctl_WLAST,
        WID => m_axi_m_mm2s_ctl_WID,
        WUSER => m_axi_m_mm2s_ctl_WUSER,
        ARVALID => m_axi_m_mm2s_ctl_ARVALID,
        ARREADY => m_axi_m_mm2s_ctl_ARREADY,
        ARADDR => m_axi_m_mm2s_ctl_ARADDR,
        ARID => m_axi_m_mm2s_ctl_ARID,
        ARLEN => m_axi_m_mm2s_ctl_ARLEN,
        ARSIZE => m_axi_m_mm2s_ctl_ARSIZE,
        ARBURST => m_axi_m_mm2s_ctl_ARBURST,
        ARLOCK => m_axi_m_mm2s_ctl_ARLOCK,
        ARCACHE => m_axi_m_mm2s_ctl_ARCACHE,
        ARPROT => m_axi_m_mm2s_ctl_ARPROT,
        ARQOS => m_axi_m_mm2s_ctl_ARQOS,
        ARREGION => m_axi_m_mm2s_ctl_ARREGION,
        ARUSER => m_axi_m_mm2s_ctl_ARUSER,
        RVALID => m_axi_m_mm2s_ctl_RVALID,
        RREADY => m_axi_m_mm2s_ctl_RREADY,
        RDATA => m_axi_m_mm2s_ctl_RDATA,
        RLAST => m_axi_m_mm2s_ctl_RLAST,
        RID => m_axi_m_mm2s_ctl_RID,
        RUSER => m_axi_m_mm2s_ctl_RUSER,
        RRESP => m_axi_m_mm2s_ctl_RRESP,
        BVALID => m_axi_m_mm2s_ctl_BVALID,
        BREADY => m_axi_m_mm2s_ctl_BREADY,
        BRESP => m_axi_m_mm2s_ctl_BRESP,
        BID => m_axi_m_mm2s_ctl_BID,
        BUSER => m_axi_m_mm2s_ctl_BUSER,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        I_ARVALID => m_mm2s_ctl_ARVALID,
        I_ARREADY => m_mm2s_ctl_ARREADY,
        I_ARADDR => m_mm2s_ctl_ARADDR,
        I_ARID => m_mm2s_ctl_ARID,
        I_ARLEN => m_mm2s_ctl_ARLEN,
        I_ARSIZE => m_mm2s_ctl_ARSIZE,
        I_ARLOCK => m_mm2s_ctl_ARLOCK,
        I_ARCACHE => m_mm2s_ctl_ARCACHE,
        I_ARQOS => m_mm2s_ctl_ARQOS,
        I_ARPROT => m_mm2s_ctl_ARPROT,
        I_ARUSER => m_mm2s_ctl_ARUSER,
        I_ARBURST => m_mm2s_ctl_ARBURST,
        I_ARREGION => m_mm2s_ctl_ARREGION,
        I_RVALID => m_mm2s_ctl_RVALID,
        I_RREADY => m_mm2s_ctl_RREADY,
        I_RDATA => m_mm2s_ctl_RDATA,
        I_RID => m_mm2s_ctl_RID,
        I_RUSER => m_mm2s_ctl_RUSER,
        I_RRESP => m_mm2s_ctl_RRESP,
        I_RLAST => m_mm2s_ctl_RLAST,
        I_AWVALID => m_mm2s_ctl_AWVALID,
        I_AWREADY => m_mm2s_ctl_AWREADY,
        I_AWADDR => m_mm2s_ctl_AWADDR,
        I_AWID => m_mm2s_ctl_AWID,
        I_AWLEN => m_mm2s_ctl_AWLEN,
        I_AWSIZE => m_mm2s_ctl_AWSIZE,
        I_AWLOCK => m_mm2s_ctl_AWLOCK,
        I_AWCACHE => m_mm2s_ctl_AWCACHE,
        I_AWQOS => m_mm2s_ctl_AWQOS,
        I_AWPROT => m_mm2s_ctl_AWPROT,
        I_AWUSER => m_mm2s_ctl_AWUSER,
        I_AWBURST => m_mm2s_ctl_AWBURST,
        I_AWREGION => m_mm2s_ctl_AWREGION,
        I_WVALID => m_mm2s_ctl_WVALID,
        I_WREADY => m_mm2s_ctl_WREADY,
        I_WDATA => m_mm2s_ctl_WDATA,
        I_WID => m_mm2s_ctl_WID,
        I_WUSER => m_mm2s_ctl_WUSER,
        I_WLAST => m_mm2s_ctl_WLAST,
        I_WSTRB => m_mm2s_ctl_WSTRB,
        I_BVALID => m_mm2s_ctl_BVALID,
        I_BREADY => m_mm2s_ctl_BREADY,
        I_BRESP => m_mm2s_ctl_BRESP,
        I_BID => m_mm2s_ctl_BID,
        I_BUSER => m_mm2s_ctl_BUSER);

    aes_m_s2mm_ctl_m_axi_U : component aes_m_s2mm_ctl_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 2,
        C_ID_WIDTH => C_M_AXI_M_S2MM_CTL_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_M_S2MM_CTL_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_M_S2MM_CTL_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_M_S2MM_CTL_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_M_S2MM_CTL_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_M_S2MM_CTL_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_M_S2MM_CTL_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_M_S2MM_CTL_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_M_S2MM_CTL_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_M_S2MM_CTL_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_S2MM_CTL_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_S2MM_CTL_CACHE_VALUE)
    port map (
        AWVALID => m_axi_m_s2mm_ctl_AWVALID,
        AWREADY => m_axi_m_s2mm_ctl_AWREADY,
        AWADDR => m_axi_m_s2mm_ctl_AWADDR,
        AWID => m_axi_m_s2mm_ctl_AWID,
        AWLEN => m_axi_m_s2mm_ctl_AWLEN,
        AWSIZE => m_axi_m_s2mm_ctl_AWSIZE,
        AWBURST => m_axi_m_s2mm_ctl_AWBURST,
        AWLOCK => m_axi_m_s2mm_ctl_AWLOCK,
        AWCACHE => m_axi_m_s2mm_ctl_AWCACHE,
        AWPROT => m_axi_m_s2mm_ctl_AWPROT,
        AWQOS => m_axi_m_s2mm_ctl_AWQOS,
        AWREGION => m_axi_m_s2mm_ctl_AWREGION,
        AWUSER => m_axi_m_s2mm_ctl_AWUSER,
        WVALID => m_axi_m_s2mm_ctl_WVALID,
        WREADY => m_axi_m_s2mm_ctl_WREADY,
        WDATA => m_axi_m_s2mm_ctl_WDATA,
        WSTRB => m_axi_m_s2mm_ctl_WSTRB,
        WLAST => m_axi_m_s2mm_ctl_WLAST,
        WID => m_axi_m_s2mm_ctl_WID,
        WUSER => m_axi_m_s2mm_ctl_WUSER,
        ARVALID => m_axi_m_s2mm_ctl_ARVALID,
        ARREADY => m_axi_m_s2mm_ctl_ARREADY,
        ARADDR => m_axi_m_s2mm_ctl_ARADDR,
        ARID => m_axi_m_s2mm_ctl_ARID,
        ARLEN => m_axi_m_s2mm_ctl_ARLEN,
        ARSIZE => m_axi_m_s2mm_ctl_ARSIZE,
        ARBURST => m_axi_m_s2mm_ctl_ARBURST,
        ARLOCK => m_axi_m_s2mm_ctl_ARLOCK,
        ARCACHE => m_axi_m_s2mm_ctl_ARCACHE,
        ARPROT => m_axi_m_s2mm_ctl_ARPROT,
        ARQOS => m_axi_m_s2mm_ctl_ARQOS,
        ARREGION => m_axi_m_s2mm_ctl_ARREGION,
        ARUSER => m_axi_m_s2mm_ctl_ARUSER,
        RVALID => m_axi_m_s2mm_ctl_RVALID,
        RREADY => m_axi_m_s2mm_ctl_RREADY,
        RDATA => m_axi_m_s2mm_ctl_RDATA,
        RLAST => m_axi_m_s2mm_ctl_RLAST,
        RID => m_axi_m_s2mm_ctl_RID,
        RUSER => m_axi_m_s2mm_ctl_RUSER,
        RRESP => m_axi_m_s2mm_ctl_RRESP,
        BVALID => m_axi_m_s2mm_ctl_BVALID,
        BREADY => m_axi_m_s2mm_ctl_BREADY,
        BRESP => m_axi_m_s2mm_ctl_BRESP,
        BID => m_axi_m_s2mm_ctl_BID,
        BUSER => m_axi_m_s2mm_ctl_BUSER,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        I_ARVALID => m_s2mm_ctl_ARVALID,
        I_ARREADY => m_s2mm_ctl_ARREADY,
        I_ARADDR => m_s2mm_ctl_ARADDR,
        I_ARID => m_s2mm_ctl_ARID,
        I_ARLEN => m_s2mm_ctl_ARLEN,
        I_ARSIZE => m_s2mm_ctl_ARSIZE,
        I_ARLOCK => m_s2mm_ctl_ARLOCK,
        I_ARCACHE => m_s2mm_ctl_ARCACHE,
        I_ARQOS => m_s2mm_ctl_ARQOS,
        I_ARPROT => m_s2mm_ctl_ARPROT,
        I_ARUSER => m_s2mm_ctl_ARUSER,
        I_ARBURST => m_s2mm_ctl_ARBURST,
        I_ARREGION => m_s2mm_ctl_ARREGION,
        I_RVALID => m_s2mm_ctl_RVALID,
        I_RREADY => m_s2mm_ctl_RREADY,
        I_RDATA => m_s2mm_ctl_RDATA,
        I_RID => m_s2mm_ctl_RID,
        I_RUSER => m_s2mm_ctl_RUSER,
        I_RRESP => m_s2mm_ctl_RRESP,
        I_RLAST => m_s2mm_ctl_RLAST,
        I_AWVALID => m_s2mm_ctl_AWVALID,
        I_AWREADY => m_s2mm_ctl_AWREADY,
        I_AWADDR => m_s2mm_ctl_AWADDR,
        I_AWID => m_s2mm_ctl_AWID,
        I_AWLEN => m_s2mm_ctl_AWLEN,
        I_AWSIZE => m_s2mm_ctl_AWSIZE,
        I_AWLOCK => m_s2mm_ctl_AWLOCK,
        I_AWCACHE => m_s2mm_ctl_AWCACHE,
        I_AWQOS => m_s2mm_ctl_AWQOS,
        I_AWPROT => m_s2mm_ctl_AWPROT,
        I_AWUSER => m_s2mm_ctl_AWUSER,
        I_AWBURST => m_s2mm_ctl_AWBURST,
        I_AWREGION => m_s2mm_ctl_AWREGION,
        I_WVALID => m_s2mm_ctl_WVALID,
        I_WREADY => m_s2mm_ctl_WREADY,
        I_WDATA => m_s2mm_ctl_WDATA,
        I_WID => m_s2mm_ctl_WID,
        I_WUSER => m_s2mm_ctl_WUSER,
        I_WLAST => m_s2mm_ctl_WLAST,
        I_WSTRB => m_s2mm_ctl_WSTRB,
        I_BVALID => m_s2mm_ctl_BVALID,
        I_BREADY => m_s2mm_ctl_BREADY,
        I_BRESP => m_s2mm_ctl_BRESP,
        I_BID => m_s2mm_ctl_BID,
        I_BUSER => m_s2mm_ctl_BUSER);

    grp_aestest_fu_229 : component aestest
    port map (
        ap_clk => ap_clk,
        ap_rst => grp_aestest_fu_229_ap_rst,
        ap_start => grp_aestest_fu_229_ap_start,
        ap_done => grp_aestest_fu_229_ap_done,
        ap_idle => grp_aestest_fu_229_ap_idle,
        ap_ready => grp_aestest_fu_229_ap_ready,
        ap_ce => grp_aestest_fu_229_ap_ce,
        inptext_V_read => grp_aestest_fu_229_inptext_V_read,
        key_V_read => grp_aestest_fu_229_key_V_read,
        ap_return => grp_aestest_fu_229_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_mm2s_ctl_ARREADY assign process. --
    ap_reg_ioackin_m_mm2s_ctl_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY)))) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_405))) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_444))) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2058))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_444)) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY) and not((ap_start = ap_const_logic_0))) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY) and not(ap_sig_bdd_405)) or (not(ap_sig_bdd_444) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY) and (ap_ST_st7_fsm_6 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_ARREADY) and (ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_2058)) or (not(ap_sig_bdd_444) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_mm2s_ctl_AWREADY assign process. --
    ap_reg_ioackin_m_mm2s_ctl_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_444 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_444 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st15_fsm_14 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = m_mm2s_ctl_AWREADY) and (ap_ST_st3_fsm_2 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_AWREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_AWREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_AWREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_AWREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_1 = m_mm2s_ctl_AWREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_1 = m_mm2s_ctl_AWREADY)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_mm2s_ctl_WREADY assign process. --
    ap_reg_ioackin_m_mm2s_ctl_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_444 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_444 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st15_fsm_14 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_WREADY)) or ((ap_const_logic_1 = m_mm2s_ctl_WREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_WREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_WREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_WREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_1 = m_mm2s_ctl_WREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_1 = m_mm2s_ctl_WREADY)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_s2mm_ctl_ARREADY assign process. --
    ap_reg_ioackin_m_s2mm_ctl_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY)))) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_405))) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_444))) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2058))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_444)) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(ap_sig_bdd_405) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_444) and (ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_2058) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_444) and (ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_s2mm_ctl_AWREADY assign process. --
    ap_reg_ioackin_m_s2mm_ctl_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_444 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_444 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st15_fsm_14 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_s2mm_ctl_WREADY assign process. --
    ap_reg_ioackin_m_s2mm_ctl_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_444 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_444 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st15_fsm_14 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_s_out_V_V_TREADY assign process. --
    ap_reg_ioackin_s_out_V_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_s_out_V_V_TREADY <= ap_const_logic_0;
            else
                if ((ap_ST_st39_fsm_38 = ap_CS_fsm)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY))) then 
                        ap_reg_ioackin_s_out_V_V_TREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = s_out_V_V_TREADY)) then 
                        ap_reg_ioackin_s_out_V_V_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- destinationAddress_ap_vld_preg assign process. --
    destinationAddress_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                destinationAddress_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_465_p2)))) then 
                    destinationAddress_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = destinationAddress_ap_vld))) then 
                    destinationAddress_ap_vld_preg <= destinationAddress_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- destinationAddress_preg assign process. --
    destinationAddress_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                destinationAddress_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = destinationAddress_ap_vld))) then 
                    destinationAddress_preg <= destinationAddress;
                end if; 
            end if;
        end if;
    end process;


    -- grp_aestest_fu_229_ap_start_ap_start_reg assign process. --
    grp_aestest_fu_229_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                grp_aestest_fu_229_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (ap_ST_st20_fsm_19 = ap_NS_fsm))) then 
                    grp_aestest_fu_229_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aestest_fu_229_ap_ready)) then 
                    grp_aestest_fu_229_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- key_in_V_ap_vld_preg assign process. --
    key_in_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                key_in_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_465_p2)))) then 
                    key_in_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = key_in_V_ap_vld))) then 
                    key_in_V_ap_vld_preg <= key_in_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- key_in_V_preg assign process. --
    key_in_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                key_in_V_preg <= ap_const_lv128_lc_1;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = key_in_V_ap_vld))) then 
                    key_in_V_preg <= key_in_V;
                end if; 
            end if;
        end if;
    end process;


    -- length_r_ap_vld_preg assign process. --
    length_r_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                length_r_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_465_p2)))) then 
                    length_r_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = length_r_ap_vld))) then 
                    length_r_ap_vld_preg <= length_r_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- length_r_preg assign process. --
    length_r_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                length_r_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = length_r_ap_vld))) then 
                    length_r_preg <= length_r;
                end if; 
            end if;
        end if;
    end process;


    -- sourceAddress_ap_vld_preg assign process. --
    sourceAddress_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                sourceAddress_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_465_p2)))) then 
                    sourceAddress_ap_vld_preg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = sourceAddress_ap_vld) and not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))))) then 
                    sourceAddress_ap_vld_preg <= sourceAddress_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- sourceAddress_preg assign process. --
    sourceAddress_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                sourceAddress_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = sourceAddress_ap_vld) and not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))))) then 
                    sourceAddress_preg <= sourceAddress;
                end if; 
            end if;
        end if;
    end process;


    -- iterations_reg_217 assign process. --
    iterations_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st39_fsm_38 = ap_CS_fsm) and not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY)))) then 
                iterations_reg_217 <= iterations_1_reg_578;
            elsif (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_444))) then 
                iterations_reg_217 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_405)))) then
                destinationAddress_assign_fu_142 <= destinationAddress_in_sig;
                sourceAddress_assign_fu_138 <= sourceAddress_in_sig;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then
                iterations_1_reg_578 <= iterations_1_fu_470_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not(ap_sig_bdd_415))) then
                tmp_325_reg_510 <= tmp_325_fu_312_p1;
                tmp_326_reg_520 <= tmp_326_fu_326_p1;
                tmp_39_reg_505 <= m_mm2s_ctl_RDATA(31 downto 3);
                tmp_40_reg_515 <= m_s2mm_ctl_RDATA(31 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(ap_sig_bdd_415) and (ap_ST_st14_fsm_13 = ap_CS_fsm))) then
                tmp_327_reg_540 <= tmp_327_fu_394_p1;
                tmp_329_reg_550 <= tmp_329_fu_408_p1;
                tmp_42_reg_535 <= m_mm2s_ctl_RDATA(31 downto 13);
                tmp_44_reg_545 <= m_s2mm_ctl_RDATA(31 downto 13);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(ap_sig_bdd_415) and (ap_ST_st11_fsm_10 = ap_CS_fsm))) then
                tmp_41_reg_525 <= m_mm2s_ctl_RDATA(31 downto 1);
                tmp_43_reg_530 <= m_s2mm_ctl_RDATA(31 downto 1);
            end if;
        end if;
    end process;
    m_s2mm_ctl_addr_reg_488(31 downto 0) <= "00000000000000000000000000001100";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , s_in_V_V_TVALID , ap_sig_ioackin_m_mm2s_ctl_ARREADY , ap_sig_ioackin_m_s2mm_ctl_ARREADY , ap_sig_bdd_405 , ap_sig_bdd_415 , ap_sig_bdd_444 , ap_sig_ioackin_m_mm2s_ctl_AWREADY , ap_sig_ioackin_m_mm2s_ctl_WREADY , ap_sig_ioackin_m_s2mm_ctl_AWREADY , ap_sig_ioackin_m_s2mm_ctl_WREADY , ap_sig_ioackin_s_out_V_V_TREADY , ap_sig_bdd_2058 , exitcond_fu_465_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_405))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not(ap_sig_bdd_415)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_444))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st10_fsm_9 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2058))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st11_fsm_10 => 
                if (not(ap_sig_bdd_415)) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st12_fsm_11 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st13_fsm_12 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_444))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st14_fsm_13 => 
                if (not(ap_sig_bdd_415)) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st15_fsm_14 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st16_fsm_15 => 
                if (not((ap_sig_bdd_444 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st17_fsm_16 => 
                if (not((ap_sig_bdd_444 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st18_fsm_17 => 
                if (not(ap_sig_bdd_444)) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st19_fsm_18 => 
                if (not((ap_const_lv1_0 = exitcond_fu_465_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st20_fsm_19 => 
                if (not((s_in_V_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st39_fsm_38;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, exitcond_fu_465_p2)
    begin
        if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_465_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond_fu_465_p2)
    begin
        if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_465_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv1_1;

    -- ap_sig_bdd_2058 assign process. --
    ap_sig_bdd_2058_assign_proc : process(m_mm2s_ctl_RVALID, m_mm2s_ctl_BVALID, m_s2mm_ctl_RVALID, m_s2mm_ctl_BVALID)
    begin
                ap_sig_bdd_2058 <= ((m_mm2s_ctl_RVALID = ap_const_logic_0) or (m_mm2s_ctl_BVALID = ap_const_logic_0) or (m_s2mm_ctl_RVALID = ap_const_logic_0) or (m_s2mm_ctl_BVALID = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_405 assign process. --
    ap_sig_bdd_405_assign_proc : process(sourceAddress_ap_vld_in_sig, key_in_V_ap_vld_in_sig, destinationAddress_ap_vld_in_sig, length_r_ap_vld_in_sig, m_mm2s_ctl_RVALID, m_mm2s_ctl_BVALID, m_s2mm_ctl_RVALID, m_s2mm_ctl_BVALID)
    begin
                ap_sig_bdd_405 <= ((length_r_ap_vld_in_sig = ap_const_logic_0) or (destinationAddress_ap_vld_in_sig = ap_const_logic_0) or (sourceAddress_ap_vld_in_sig = ap_const_logic_0) or (key_in_V_ap_vld_in_sig = ap_const_logic_0) or (m_mm2s_ctl_RVALID = ap_const_logic_0) or (m_mm2s_ctl_BVALID = ap_const_logic_0) or (m_s2mm_ctl_RVALID = ap_const_logic_0) or (m_s2mm_ctl_BVALID = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_415 assign process. --
    ap_sig_bdd_415_assign_proc : process(m_mm2s_ctl_RVALID, m_s2mm_ctl_RVALID)
    begin
                ap_sig_bdd_415 <= ((m_mm2s_ctl_RVALID = ap_const_logic_0) or (m_s2mm_ctl_RVALID = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_444 assign process. --
    ap_sig_bdd_444_assign_proc : process(m_mm2s_ctl_BVALID, m_s2mm_ctl_BVALID)
    begin
                ap_sig_bdd_444 <= ((m_mm2s_ctl_BVALID = ap_const_logic_0) or (m_s2mm_ctl_BVALID = ap_const_logic_0));
    end process;


    -- ap_sig_ioackin_m_mm2s_ctl_ARREADY assign process. --
    ap_sig_ioackin_m_mm2s_ctl_ARREADY_assign_proc : process(m_mm2s_ctl_ARREADY, ap_reg_ioackin_m_mm2s_ctl_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY)) then 
            ap_sig_ioackin_m_mm2s_ctl_ARREADY <= m_mm2s_ctl_ARREADY;
        else 
            ap_sig_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_mm2s_ctl_AWREADY assign process. --
    ap_sig_ioackin_m_mm2s_ctl_AWREADY_assign_proc : process(m_mm2s_ctl_AWREADY, ap_reg_ioackin_m_mm2s_ctl_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) then 
            ap_sig_ioackin_m_mm2s_ctl_AWREADY <= m_mm2s_ctl_AWREADY;
        else 
            ap_sig_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_mm2s_ctl_WREADY assign process. --
    ap_sig_ioackin_m_mm2s_ctl_WREADY_assign_proc : process(m_mm2s_ctl_WREADY, ap_reg_ioackin_m_mm2s_ctl_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) then 
            ap_sig_ioackin_m_mm2s_ctl_WREADY <= m_mm2s_ctl_WREADY;
        else 
            ap_sig_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_s2mm_ctl_ARREADY assign process. --
    ap_sig_ioackin_m_s2mm_ctl_ARREADY_assign_proc : process(m_s2mm_ctl_ARREADY, ap_reg_ioackin_m_s2mm_ctl_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) then 
            ap_sig_ioackin_m_s2mm_ctl_ARREADY <= m_s2mm_ctl_ARREADY;
        else 
            ap_sig_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_s2mm_ctl_AWREADY assign process. --
    ap_sig_ioackin_m_s2mm_ctl_AWREADY_assign_proc : process(m_s2mm_ctl_AWREADY, ap_reg_ioackin_m_s2mm_ctl_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) then 
            ap_sig_ioackin_m_s2mm_ctl_AWREADY <= m_s2mm_ctl_AWREADY;
        else 
            ap_sig_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_s2mm_ctl_WREADY assign process. --
    ap_sig_ioackin_m_s2mm_ctl_WREADY_assign_proc : process(m_s2mm_ctl_WREADY, ap_reg_ioackin_m_s2mm_ctl_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) then 
            ap_sig_ioackin_m_s2mm_ctl_WREADY <= m_s2mm_ctl_WREADY;
        else 
            ap_sig_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_s_out_V_V_TREADY assign process. --
    ap_sig_ioackin_s_out_V_V_TREADY_assign_proc : process(s_out_V_V_TREADY, ap_reg_ioackin_s_out_V_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_s_out_V_V_TREADY)) then 
            ap_sig_ioackin_s_out_V_V_TREADY <= s_out_V_V_TREADY;
        else 
            ap_sig_ioackin_s_out_V_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- destinationAddress_ap_vld_in_sig assign process. --
    destinationAddress_ap_vld_in_sig_assign_proc : process(destinationAddress_ap_vld, destinationAddress_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = destinationAddress_ap_vld)) then 
            destinationAddress_ap_vld_in_sig <= destinationAddress_ap_vld;
        else 
            destinationAddress_ap_vld_in_sig <= destinationAddress_ap_vld_preg;
        end if; 
    end process;


    -- destinationAddress_in_sig assign process. --
    destinationAddress_in_sig_assign_proc : process(destinationAddress, destinationAddress_preg, destinationAddress_ap_vld)
    begin
        if ((ap_const_logic_1 = destinationAddress_ap_vld)) then 
            destinationAddress_in_sig <= destinationAddress;
        else 
            destinationAddress_in_sig <= destinationAddress_preg;
        end if; 
    end process;

    exitcond_fu_465_p2 <= "1" when (iterations_reg_217 = length_r_in_sig) else "0";

    -- grp_aestest_fu_229_ap_ce assign process. --
    grp_aestest_fu_229_ap_ce_assign_proc : process(ap_CS_fsm, s_in_V_V_TVALID, ap_sig_ioackin_s_out_V_V_TREADY)
    begin
        if ((((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((s_in_V_V_TVALID = ap_const_logic_0))) or (ap_ST_st21_fsm_20 = ap_CS_fsm) or (ap_ST_st22_fsm_21 = ap_CS_fsm) or (ap_ST_st23_fsm_22 = ap_CS_fsm) or (ap_ST_st24_fsm_23 = ap_CS_fsm) or (ap_ST_st25_fsm_24 = ap_CS_fsm) or (ap_ST_st26_fsm_25 = ap_CS_fsm) or (ap_ST_st27_fsm_26 = ap_CS_fsm) or (ap_ST_st28_fsm_27 = ap_CS_fsm) or (ap_ST_st29_fsm_28 = ap_CS_fsm) or (ap_ST_st30_fsm_29 = ap_CS_fsm) or (ap_ST_st31_fsm_30 = ap_CS_fsm) or (ap_ST_st32_fsm_31 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm) or (ap_ST_st34_fsm_33 = ap_CS_fsm) or (ap_ST_st35_fsm_34 = ap_CS_fsm) or (ap_ST_st36_fsm_35 = ap_CS_fsm) or (ap_ST_st37_fsm_36 = ap_CS_fsm) or (ap_ST_st38_fsm_37 = ap_CS_fsm) or ((ap_ST_st39_fsm_38 = ap_CS_fsm) and not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY))))) then 
            grp_aestest_fu_229_ap_ce <= ap_const_logic_1;
        else 
            grp_aestest_fu_229_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_aestest_fu_229_ap_rst assign process. --
    grp_aestest_fu_229_ap_rst_assign_proc : process(ap_rst_n)
    begin
                grp_aestest_fu_229_ap_rst <= not(ap_rst_n);
    end process;

    grp_aestest_fu_229_ap_start <= grp_aestest_fu_229_ap_start_ap_start_reg;
    grp_aestest_fu_229_inptext_V_read <= s_in_V_V_TDATA;
    grp_aestest_fu_229_key_V_read <= key_in_V_in_sig;
    iterations_1_fu_470_p2 <= std_logic_vector(unsigned(iterations_reg_217) + unsigned(ap_const_lv32_1));

    -- key_in_V_ap_vld_in_sig assign process. --
    key_in_V_ap_vld_in_sig_assign_proc : process(key_in_V_ap_vld, key_in_V_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = key_in_V_ap_vld)) then 
            key_in_V_ap_vld_in_sig <= key_in_V_ap_vld;
        else 
            key_in_V_ap_vld_in_sig <= key_in_V_ap_vld_preg;
        end if; 
    end process;


    -- key_in_V_in_sig assign process. --
    key_in_V_in_sig_assign_proc : process(key_in_V, key_in_V_preg, key_in_V_ap_vld)
    begin
        if ((ap_const_logic_1 = key_in_V_ap_vld)) then 
            key_in_V_in_sig <= key_in_V;
        else 
            key_in_V_in_sig <= key_in_V_preg;
        end if; 
    end process;


    -- length_r_ap_vld_in_sig assign process. --
    length_r_ap_vld_in_sig_assign_proc : process(length_r_ap_vld, length_r_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = length_r_ap_vld)) then 
            length_r_ap_vld_in_sig <= length_r_ap_vld;
        else 
            length_r_ap_vld_in_sig <= length_r_ap_vld_preg;
        end if; 
    end process;


    -- length_r_in_sig assign process. --
    length_r_in_sig_assign_proc : process(length_r, length_r_preg, length_r_ap_vld)
    begin
        if ((ap_const_logic_1 = length_r_ap_vld)) then 
            length_r_in_sig <= length_r;
        else 
            length_r_in_sig <= length_r_preg;
        end if; 
    end process;

    m_mm2s_ctl_ARADDR <= ap_const_lv32_0;
    m_mm2s_ctl_ARBURST <= ap_const_lv2_0;
    m_mm2s_ctl_ARCACHE <= ap_const_lv4_0;
    m_mm2s_ctl_ARID <= ap_const_lv1_0;
    m_mm2s_ctl_ARLEN <= ap_const_lv32_1;
    m_mm2s_ctl_ARLOCK <= ap_const_lv2_0;
    m_mm2s_ctl_ARPROT <= ap_const_lv3_0;
    m_mm2s_ctl_ARQOS <= ap_const_lv4_0;
    m_mm2s_ctl_ARREGION <= ap_const_lv4_0;
    m_mm2s_ctl_ARSIZE <= ap_const_lv3_0;
    m_mm2s_ctl_ARUSER <= ap_const_lv1_0;

    -- m_mm2s_ctl_ARVALID assign process. --
    m_mm2s_ctl_ARVALID_assign_proc : process(ap_start, ap_CS_fsm, ap_sig_bdd_405, ap_sig_bdd_444, ap_reg_ioackin_m_mm2s_ctl_ARREADY, ap_sig_bdd_2058)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY) and not(ap_sig_bdd_405)) or (not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY) and (ap_ST_st7_fsm_6 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY) and (ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_2058)) or (not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
            m_mm2s_ctl_ARVALID <= ap_const_logic_1;
        else 
            m_mm2s_ctl_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_mm2s_ctl_AWADDR assign process. --
    m_mm2s_ctl_AWADDR_assign_proc : process(ap_CS_fsm, ap_sig_bdd_444, ap_reg_ioackin_m_mm2s_ctl_AWREADY)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY))) then 
            m_mm2s_ctl_AWADDR <= ap_const_lv64_A(32 - 1 downto 0);
        elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY))) then 
            m_mm2s_ctl_AWADDR <= ap_const_lv64_6(32 - 1 downto 0);
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)))) then 
            m_mm2s_ctl_AWADDR <= ap_const_lv32_0;
        else 
            m_mm2s_ctl_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_mm2s_ctl_AWBURST <= ap_const_lv2_0;
    m_mm2s_ctl_AWCACHE <= ap_const_lv4_0;
    m_mm2s_ctl_AWID <= ap_const_lv1_0;
    m_mm2s_ctl_AWLEN <= ap_const_lv32_1;
    m_mm2s_ctl_AWLOCK <= ap_const_lv2_0;
    m_mm2s_ctl_AWPROT <= ap_const_lv3_0;
    m_mm2s_ctl_AWQOS <= ap_const_lv4_0;
    m_mm2s_ctl_AWREGION <= ap_const_lv4_0;
    m_mm2s_ctl_AWSIZE <= ap_const_lv3_0;
    m_mm2s_ctl_AWUSER <= ap_const_lv1_0;

    -- m_mm2s_ctl_AWVALID assign process. --
    m_mm2s_ctl_AWVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_444, ap_reg_ioackin_m_mm2s_ctl_AWREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)))) then 
            m_mm2s_ctl_AWVALID <= ap_const_logic_1;
        else 
            m_mm2s_ctl_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_mm2s_ctl_BREADY assign process. --
    m_mm2s_ctl_BREADY_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_m_mm2s_ctl_ARREADY, ap_sig_ioackin_m_s2mm_ctl_ARREADY, ap_sig_bdd_405, ap_sig_bdd_444, ap_sig_ioackin_m_mm2s_ctl_AWREADY, ap_sig_ioackin_m_mm2s_ctl_WREADY, ap_sig_ioackin_m_s2mm_ctl_AWREADY, ap_sig_ioackin_m_s2mm_ctl_WREADY, ap_sig_bdd_2058)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_405))) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_444 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_444 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_444)) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_444))) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2058))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_444)) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
            m_mm2s_ctl_BREADY <= ap_const_logic_1;
        else 
            m_mm2s_ctl_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_mm2s_ctl_RREADY assign process. --
    m_mm2s_ctl_RREADY_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_m_mm2s_ctl_ARREADY, ap_sig_ioackin_m_s2mm_ctl_ARREADY, ap_sig_bdd_405, ap_sig_bdd_415, ap_sig_bdd_2058)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_405))) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and not(ap_sig_bdd_415)) or (not(ap_sig_bdd_415) and (ap_ST_st11_fsm_10 = ap_CS_fsm)) or (not(ap_sig_bdd_415) and (ap_ST_st14_fsm_13 = ap_CS_fsm)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2058))))) then 
            m_mm2s_ctl_RREADY <= ap_const_logic_1;
        else 
            m_mm2s_ctl_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_mm2s_ctl_WDATA assign process. --
    m_mm2s_ctl_WDATA_assign_proc : process(ap_CS_fsm, ap_sig_bdd_444, ap_reg_ioackin_m_mm2s_ctl_WREADY, m_mm2s_ctl_assign_fu_330_p4, tmp_s_fu_368_p3, tmp_26_fu_412_p4, read_length_fu_444_p2, sourceAddress_assign_fu_138)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY))) then 
            m_mm2s_ctl_WDATA <= read_length_fu_444_p2;
        elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY))) then 
            m_mm2s_ctl_WDATA <= sourceAddress_assign_fu_138;
        elsif (((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm))) then 
            m_mm2s_ctl_WDATA <= tmp_26_fu_412_p4;
        elsif (((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm))) then 
            m_mm2s_ctl_WDATA <= tmp_s_fu_368_p3;
        elsif (((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            m_mm2s_ctl_WDATA <= m_mm2s_ctl_assign_fu_330_p4;
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)))) then 
            m_mm2s_ctl_WDATA <= ap_const_lv32_0;
        else 
            m_mm2s_ctl_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_mm2s_ctl_WID <= ap_const_lv1_0;
    m_mm2s_ctl_WLAST <= ap_const_logic_0;
    m_mm2s_ctl_WSTRB <= ap_const_lv4_F;
    m_mm2s_ctl_WUSER <= ap_const_lv1_0;

    -- m_mm2s_ctl_WVALID assign process. --
    m_mm2s_ctl_WVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_444, ap_reg_ioackin_m_mm2s_ctl_WREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)))) then 
            m_mm2s_ctl_WVALID <= ap_const_logic_1;
        else 
            m_mm2s_ctl_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_mm2s_ctl_assign_fu_330_p4 <= ((tmp_39_reg_505 & ap_const_lv1_1) & tmp_325_reg_510);

    -- m_s2mm_ctl_ARADDR assign process. --
    m_s2mm_ctl_ARADDR_assign_proc : process(ap_start, ap_CS_fsm, m_s2mm_ctl_addr_reg_488, ap_sig_bdd_405, ap_sig_bdd_444, ap_sig_bdd_2058, ap_reg_ioackin_m_s2mm_ctl_ARREADY)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(ap_sig_bdd_405) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_444) and (ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_2058) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_444) and (ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)))) then 
            m_s2mm_ctl_ARADDR <= m_s2mm_ctl_addr_reg_488;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY))) then 
            m_s2mm_ctl_ARADDR <= ap_const_lv64_C(32 - 1 downto 0);
        else 
            m_s2mm_ctl_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_s2mm_ctl_ARBURST <= ap_const_lv2_0;
    m_s2mm_ctl_ARCACHE <= ap_const_lv4_0;
    m_s2mm_ctl_ARID <= ap_const_lv1_0;
    m_s2mm_ctl_ARLEN <= ap_const_lv32_1;
    m_s2mm_ctl_ARLOCK <= ap_const_lv2_0;
    m_s2mm_ctl_ARPROT <= ap_const_lv3_0;
    m_s2mm_ctl_ARQOS <= ap_const_lv4_0;
    m_s2mm_ctl_ARREGION <= ap_const_lv4_0;
    m_s2mm_ctl_ARSIZE <= ap_const_lv3_0;
    m_s2mm_ctl_ARUSER <= ap_const_lv1_0;

    -- m_s2mm_ctl_ARVALID assign process. --
    m_s2mm_ctl_ARVALID_assign_proc : process(ap_start, ap_CS_fsm, ap_sig_bdd_405, ap_sig_bdd_444, ap_sig_bdd_2058, ap_reg_ioackin_m_s2mm_ctl_ARREADY)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(ap_sig_bdd_405) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_444) and (ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_2058) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_444) and (ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)))) then 
            m_s2mm_ctl_ARVALID <= ap_const_logic_1;
        else 
            m_s2mm_ctl_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_s2mm_ctl_AWADDR assign process. --
    m_s2mm_ctl_AWADDR_assign_proc : process(ap_CS_fsm, m_s2mm_ctl_addr_reg_488, ap_sig_bdd_444, ap_reg_ioackin_m_s2mm_ctl_AWREADY)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY))) then 
            m_s2mm_ctl_AWADDR <= ap_const_lv64_16(32 - 1 downto 0);
        elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY))) then 
            m_s2mm_ctl_AWADDR <= ap_const_lv64_12(32 - 1 downto 0);
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)))) then 
            m_s2mm_ctl_AWADDR <= m_s2mm_ctl_addr_reg_488;
        else 
            m_s2mm_ctl_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_s2mm_ctl_AWBURST <= ap_const_lv2_0;
    m_s2mm_ctl_AWCACHE <= ap_const_lv4_0;
    m_s2mm_ctl_AWID <= ap_const_lv1_0;
    m_s2mm_ctl_AWLEN <= ap_const_lv32_1;
    m_s2mm_ctl_AWLOCK <= ap_const_lv2_0;
    m_s2mm_ctl_AWPROT <= ap_const_lv3_0;
    m_s2mm_ctl_AWQOS <= ap_const_lv4_0;
    m_s2mm_ctl_AWREGION <= ap_const_lv4_0;
    m_s2mm_ctl_AWSIZE <= ap_const_lv3_0;
    m_s2mm_ctl_AWUSER <= ap_const_lv1_0;

    -- m_s2mm_ctl_AWVALID assign process. --
    m_s2mm_ctl_AWVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_444, ap_reg_ioackin_m_s2mm_ctl_AWREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)))) then 
            m_s2mm_ctl_AWVALID <= ap_const_logic_1;
        else 
            m_s2mm_ctl_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_s2mm_ctl_BREADY assign process. --
    m_s2mm_ctl_BREADY_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_m_mm2s_ctl_ARREADY, ap_sig_ioackin_m_s2mm_ctl_ARREADY, ap_sig_bdd_405, ap_sig_bdd_444, ap_sig_ioackin_m_mm2s_ctl_AWREADY, ap_sig_ioackin_m_mm2s_ctl_WREADY, ap_sig_ioackin_m_s2mm_ctl_AWREADY, ap_sig_ioackin_m_s2mm_ctl_WREADY, ap_sig_bdd_2058)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_405))) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_444 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_444 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_444)) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_444))) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2058))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_444)) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
            m_s2mm_ctl_BREADY <= ap_const_logic_1;
        else 
            m_s2mm_ctl_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_s2mm_ctl_RREADY assign process. --
    m_s2mm_ctl_RREADY_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_m_mm2s_ctl_ARREADY, ap_sig_ioackin_m_s2mm_ctl_ARREADY, ap_sig_bdd_405, ap_sig_bdd_415, ap_sig_bdd_2058)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_405))) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and not(ap_sig_bdd_415)) or (not(ap_sig_bdd_415) and (ap_ST_st11_fsm_10 = ap_CS_fsm)) or (not(ap_sig_bdd_415) and (ap_ST_st14_fsm_13 = ap_CS_fsm)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2058))))) then 
            m_s2mm_ctl_RREADY <= ap_const_logic_1;
        else 
            m_s2mm_ctl_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_s2mm_ctl_WDATA assign process. --
    m_s2mm_ctl_WDATA_assign_proc : process(ap_CS_fsm, ap_sig_bdd_444, read_length_fu_444_p2, ap_reg_ioackin_m_s2mm_ctl_WREADY, tmp_fu_339_p4, tmp_27_fu_376_p3, tmp_28_fu_421_p4, destinationAddress_assign_fu_142)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= read_length_fu_444_p2;
        elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= destinationAddress_assign_fu_142;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= tmp_28_fu_421_p4;
        elsif (((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= tmp_27_fu_376_p3;
        elsif (((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= tmp_fu_339_p4;
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)))) then 
            m_s2mm_ctl_WDATA <= ap_const_lv32_0;
        else 
            m_s2mm_ctl_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_s2mm_ctl_WID <= ap_const_lv1_0;
    m_s2mm_ctl_WLAST <= ap_const_logic_0;
    m_s2mm_ctl_WSTRB <= ap_const_lv4_F;
    m_s2mm_ctl_WUSER <= ap_const_lv1_0;

    -- m_s2mm_ctl_WVALID assign process. --
    m_s2mm_ctl_WVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_444, ap_reg_ioackin_m_s2mm_ctl_WREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_444) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)))) then 
            m_s2mm_ctl_WVALID <= ap_const_logic_1;
        else 
            m_s2mm_ctl_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_s2mm_ctl_addr_fu_285_p2 <= ap_const_lv64_C(32 - 1 downto 0);
    read_length_fu_444_p2 <= std_logic_vector(shift_left(unsigned(length_r_in_sig),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));

    -- s_in_V_V_TREADY assign process. --
    s_in_V_V_TREADY_assign_proc : process(ap_CS_fsm, s_in_V_V_TVALID)
    begin
        if (((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((s_in_V_V_TVALID = ap_const_logic_0)))) then 
            s_in_V_V_TREADY <= ap_const_logic_1;
        else 
            s_in_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    s_out_V_V_TDATA <= grp_aestest_fu_229_ap_return;

    -- s_out_V_V_TVALID assign process. --
    s_out_V_V_TVALID_assign_proc : process(ap_CS_fsm, ap_reg_ioackin_s_out_V_V_TREADY)
    begin
        if (((ap_ST_st39_fsm_38 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_V_TREADY))) then 
            s_out_V_V_TVALID <= ap_const_logic_1;
        else 
            s_out_V_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- sourceAddress_ap_vld_in_sig assign process. --
    sourceAddress_ap_vld_in_sig_assign_proc : process(sourceAddress_ap_vld, sourceAddress_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = sourceAddress_ap_vld)) then 
            sourceAddress_ap_vld_in_sig <= sourceAddress_ap_vld;
        else 
            sourceAddress_ap_vld_in_sig <= sourceAddress_ap_vld_preg;
        end if; 
    end process;


    -- sourceAddress_in_sig assign process. --
    sourceAddress_in_sig_assign_proc : process(sourceAddress, sourceAddress_preg, sourceAddress_ap_vld)
    begin
        if ((ap_const_logic_1 = sourceAddress_ap_vld)) then 
            sourceAddress_in_sig <= sourceAddress;
        else 
            sourceAddress_in_sig <= sourceAddress_preg;
        end if; 
    end process;

    tmp_26_fu_412_p4 <= ((tmp_42_reg_535 & ap_const_lv1_1) & tmp_327_reg_540);
    tmp_27_fu_376_p3 <= (tmp_43_reg_530 & ap_const_lv1_1);
    tmp_28_fu_421_p4 <= ((tmp_44_reg_545 & ap_const_lv1_1) & tmp_329_reg_550);
    tmp_325_fu_312_p1 <= m_mm2s_ctl_RDATA(2 - 1 downto 0);
    tmp_326_fu_326_p1 <= m_s2mm_ctl_RDATA(2 - 1 downto 0);
    tmp_327_fu_394_p1 <= m_mm2s_ctl_RDATA(12 - 1 downto 0);
    tmp_329_fu_408_p1 <= m_s2mm_ctl_RDATA(12 - 1 downto 0);
    tmp_fu_339_p4 <= ((tmp_40_reg_515 & ap_const_lv1_1) & tmp_326_reg_520);
    tmp_s_fu_368_p3 <= (tmp_41_reg_525 & ap_const_lv1_1);
end behav;
