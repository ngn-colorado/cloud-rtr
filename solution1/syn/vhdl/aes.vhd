-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_MM2S_CTL_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_MM2S_CTL_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_MM2S_CTL_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_S2MM_CTL_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_S2MM_CTL_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_S2MM_CTL_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_MM2S_CTL_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_M_MM2S_CTL_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_MM2S_CTL_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_M_S2MM_CTL_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_M_S2MM_CTL_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_M_MM2S_CTL_USER_VALUE : INTEGER := 0 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_AWVALID : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_AWREADY : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ADDR_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_mm2s_ctl_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_mm2s_ctl_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_mm2s_ctl_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_AWUSER_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_WVALID : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_WREADY : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_DATA_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_DATA_WIDTH/8-1 downto 0);
    m_axi_m_mm2s_ctl_WLAST : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_WUSER_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_ARVALID : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_ARREADY : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ADDR_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_mm2s_ctl_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_mm2s_ctl_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_mm2s_ctl_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ARUSER_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_RVALID : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_RREADY : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_DATA_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_RLAST : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_RUSER_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_BVALID : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_BREADY : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_BUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_AWVALID : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_AWREADY : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ADDR_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_s2mm_ctl_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_s2mm_ctl_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_s2mm_ctl_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_AWUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_WVALID : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_WREADY : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_DATA_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_DATA_WIDTH/8-1 downto 0);
    m_axi_m_s2mm_ctl_WLAST : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_WUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_ARVALID : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_ARREADY : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ADDR_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_s2mm_ctl_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_s2mm_ctl_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_s2mm_ctl_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ARUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_RVALID : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_RREADY : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_DATA_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_RLAST : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_RUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_BVALID : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_BREADY : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_BUSER_WIDTH-1 downto 0);
    s_in_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    s_in_V_TVALID : IN STD_LOGIC;
    s_in_V_TREADY : OUT STD_LOGIC;
    s_out_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_out_V_TVALID : OUT STD_LOGIC;
    s_out_V_TREADY : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of aes is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (6 downto 0) := "0001010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (6 downto 0) := "0001101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (6 downto 0) := "0001110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (6 downto 0) := "0010001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (6 downto 0) := "0010010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (6 downto 0) := "0010011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (6 downto 0) := "0010100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (6 downto 0) := "0010101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (6 downto 0) := "0010110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (6 downto 0) := "0010111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (6 downto 0) := "0011000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (6 downto 0) := "0011001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (6 downto 0) := "0011010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (6 downto 0) := "0011011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (6 downto 0) := "0011100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (6 downto 0) := "0011101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (6 downto 0) := "0011110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (6 downto 0) := "0100001";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (6 downto 0) := "0100010";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (6 downto 0) := "0100011";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (6 downto 0) := "0100100";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (6 downto 0) := "0100101";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (6 downto 0) := "0100110";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (6 downto 0) := "0100111";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (6 downto 0) := "0101000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (6 downto 0) := "0101001";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (6 downto 0) := "0101010";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (6 downto 0) := "0101011";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (6 downto 0) := "0101100";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (6 downto 0) := "0101101";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (6 downto 0) := "0101110";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (6 downto 0) := "0101111";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (6 downto 0) := "0110001";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (6 downto 0) := "0110011";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (6 downto 0) := "0110100";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (6 downto 0) := "0110101";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (6 downto 0) := "0110110";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (6 downto 0) := "0111000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (6 downto 0) := "0111001";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (6 downto 0) := "0111010";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (6 downto 0) := "0111011";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (6 downto 0) := "0111101";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (6 downto 0) := "0111110";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (6 downto 0) := "1000001";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (6 downto 0) := "1000010";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (6 downto 0) := "1000011";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (6 downto 0) := "1000100";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (6 downto 0) := "1000101";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (6 downto 0) := "1000111";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (6 downto 0) := "1001000";
    constant ap_ST_st74_fsm_73 : STD_LOGIC_VECTOR (6 downto 0) := "1001001";
    constant ap_ST_st75_fsm_74 : STD_LOGIC_VECTOR (6 downto 0) := "1001010";
    constant ap_ST_st76_fsm_75 : STD_LOGIC_VECTOR (6 downto 0) := "1001011";
    constant ap_ST_st77_fsm_76 : STD_LOGIC_VECTOR (6 downto 0) := "1001100";
    constant ap_ST_st78_fsm_77 : STD_LOGIC_VECTOR (6 downto 0) := "1001101";
    constant ap_ST_st79_fsm_78 : STD_LOGIC_VECTOR (6 downto 0) := "1001110";
    constant ap_ST_st80_fsm_79 : STD_LOGIC_VECTOR (6 downto 0) := "1001111";
    constant ap_ST_st81_fsm_80 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_ST_st82_fsm_81 : STD_LOGIC_VECTOR (6 downto 0) := "1010001";
    constant ap_ST_st83_fsm_82 : STD_LOGIC_VECTOR (6 downto 0) := "1010010";
    constant ap_ST_st84_fsm_83 : STD_LOGIC_VECTOR (6 downto 0) := "1010011";
    constant ap_ST_st85_fsm_84 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_ST_st86_fsm_85 : STD_LOGIC_VECTOR (6 downto 0) := "1010101";
    constant ap_ST_st87_fsm_86 : STD_LOGIC_VECTOR (6 downto 0) := "1010110";
    constant ap_ST_st88_fsm_87 : STD_LOGIC_VECTOR (6 downto 0) := "1010111";
    constant ap_ST_st89_fsm_88 : STD_LOGIC_VECTOR (6 downto 0) := "1011000";
    constant ap_ST_st90_fsm_89 : STD_LOGIC_VECTOR (6 downto 0) := "1011001";
    constant ap_ST_st91_fsm_90 : STD_LOGIC_VECTOR (6 downto 0) := "1011010";
    constant ap_ST_st92_fsm_91 : STD_LOGIC_VECTOR (6 downto 0) := "1011011";
    constant ap_ST_st93_fsm_92 : STD_LOGIC_VECTOR (6 downto 0) := "1011100";
    constant ap_ST_st94_fsm_93 : STD_LOGIC_VECTOR (6 downto 0) := "1011101";
    constant ap_ST_st95_fsm_94 : STD_LOGIC_VECTOR (6 downto 0) := "1011110";
    constant ap_ST_st96_fsm_95 : STD_LOGIC_VECTOR (6 downto 0) := "1011111";
    constant ap_ST_st97_fsm_96 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_ST_st98_fsm_97 : STD_LOGIC_VECTOR (6 downto 0) := "1100001";
    constant ap_ST_st99_fsm_98 : STD_LOGIC_VECTOR (6 downto 0) := "1100010";
    constant ap_ST_st100_fsm_99 : STD_LOGIC_VECTOR (6 downto 0) := "1100011";
    constant ap_ST_st101_fsm_100 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_ST_st102_fsm_101 : STD_LOGIC_VECTOR (6 downto 0) := "1100101";
    constant ap_ST_st103_fsm_102 : STD_LOGIC_VECTOR (6 downto 0) := "1100110";
    constant ap_ST_st104_fsm_103 : STD_LOGIC_VECTOR (6 downto 0) := "1100111";
    constant ap_ST_st105_fsm_104 : STD_LOGIC_VECTOR (6 downto 0) := "1101000";
    constant ap_ST_st106_fsm_105 : STD_LOGIC_VECTOR (6 downto 0) := "1101001";
    constant ap_ST_st107_fsm_106 : STD_LOGIC_VECTOR (6 downto 0) := "1101010";
    constant ap_ST_st108_fsm_107 : STD_LOGIC_VECTOR (6 downto 0) := "1101011";
    constant ap_ST_st109_fsm_108 : STD_LOGIC_VECTOR (6 downto 0) := "1101100";
    constant ap_ST_st110_fsm_109 : STD_LOGIC_VECTOR (6 downto 0) := "1101101";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal ap_ready : STD_LOGIC;
    signal sourceAddress : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddress_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddress_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sourceAddress_ap_vld : STD_LOGIC;
    signal sourceAddress_ap_vld_in_sig : STD_LOGIC;
    signal sourceAddress_ap_vld_preg : STD_LOGIC := '0';
    signal key_in_V : STD_LOGIC_VECTOR (127 downto 0);
    signal key_in_V_in_sig : STD_LOGIC_VECTOR (127 downto 0);
    signal key_in_V_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal key_in_V_ap_vld : STD_LOGIC;
    signal key_in_V_ap_vld_in_sig : STD_LOGIC;
    signal key_in_V_ap_vld_preg : STD_LOGIC := '0';
    signal iv_V : STD_LOGIC_VECTOR (127 downto 0);
    signal iv_V_in_sig : STD_LOGIC_VECTOR (127 downto 0);
    signal iv_V_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal iv_V_ap_vld : STD_LOGIC;
    signal iv_V_ap_vld_in_sig : STD_LOGIC;
    signal iv_V_ap_vld_preg : STD_LOGIC := '0';
    signal destinationAddress : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal destinationAddress_ap_vld : STD_LOGIC;
    signal destinationAddress_ap_vld_in_sig : STD_LOGIC;
    signal destinationAddress_ap_vld_preg : STD_LOGIC := '0';
    signal numBytes : STD_LOGIC_VECTOR (31 downto 0);
    signal numBytes_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal numBytes_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal numBytes_ap_vld : STD_LOGIC;
    signal numBytes_ap_vld_in_sig : STD_LOGIC;
    signal numBytes_ap_vld_preg : STD_LOGIC := '0';
    signal mode : STD_LOGIC_VECTOR (31 downto 0);
    signal mode_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal mode_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal mode_ap_vld : STD_LOGIC;
    signal mode_ap_vld_in_sig : STD_LOGIC;
    signal mode_ap_vld_preg : STD_LOGIC := '0';
    signal ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_AWVALID : STD_LOGIC;
    signal m_mm2s_ctl_AWREADY : STD_LOGIC;
    signal m_mm2s_ctl_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mm2s_ctl_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mm2s_ctl_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_WVALID : STD_LOGIC;
    signal m_mm2s_ctl_WREADY : STD_LOGIC;
    signal m_mm2s_ctl_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_WLAST : STD_LOGIC;
    signal m_mm2s_ctl_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_ARVALID : STD_LOGIC;
    signal m_mm2s_ctl_ARREADY : STD_LOGIC;
    signal m_mm2s_ctl_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mm2s_ctl_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mm2s_ctl_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_RVALID : STD_LOGIC;
    signal m_mm2s_ctl_RREADY : STD_LOGIC;
    signal m_mm2s_ctl_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_RLAST : STD_LOGIC;
    signal m_mm2s_ctl_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_BVALID : STD_LOGIC;
    signal m_mm2s_ctl_BREADY : STD_LOGIC;
    signal m_mm2s_ctl_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_AWVALID : STD_LOGIC;
    signal m_s2mm_ctl_AWREADY : STD_LOGIC;
    signal m_s2mm_ctl_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal m_s2mm_ctl_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal m_s2mm_ctl_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_WVALID : STD_LOGIC;
    signal m_s2mm_ctl_WREADY : STD_LOGIC;
    signal m_s2mm_ctl_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_WLAST : STD_LOGIC;
    signal m_s2mm_ctl_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_ARVALID : STD_LOGIC;
    signal m_s2mm_ctl_ARREADY : STD_LOGIC;
    signal m_s2mm_ctl_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal m_s2mm_ctl_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal m_s2mm_ctl_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_RVALID : STD_LOGIC;
    signal m_s2mm_ctl_RREADY : STD_LOGIC;
    signal m_s2mm_ctl_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_RLAST : STD_LOGIC;
    signal m_s2mm_ctl_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_BVALID : STD_LOGIC;
    signal m_s2mm_ctl_BREADY : STD_LOGIC;
    signal m_s2mm_ctl_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aestest_fu_337_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal reg_409 : STD_LOGIC_VECTOR (127 downto 0);
    signal m_s2mm_ctl_addr_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_addr_reg_1245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_mm2s_ctl_ARREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_s2mm_ctl_ARREADY : STD_LOGIC;
    signal tmp_reg_1251 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_sig_bdd_503 : BOOLEAN;
    signal tmp_26_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1256 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_331_fu_460_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_331_reg_1261 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_332_fu_464_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_332_reg_1266 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_reg_1271 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_1_reg_1276 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_reg_1281 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_2_reg_1286 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_reg_1291 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_3_reg_1296 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_reg_1301 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_4_reg_1306 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_5_reg_1311 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_5_reg_1316 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_reg_1321 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_6_reg_1326 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_reg_1331 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_7_reg_1336 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_8_reg_1341 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_8_reg_1346 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_reg_1351 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_9_reg_1356 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_10_reg_1361 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_s_reg_1366 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_reg_1371 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_10_reg_1376 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_12_reg_1381 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_11_reg_1386 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_13_reg_1391 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_12_reg_1396 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_14_reg_1401 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_13_reg_1406 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_15_reg_1411 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_14_reg_1416 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_reg_1421 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_reg_1425 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1429 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_sig_bdd_581 : BOOLEAN;
    signal tmp_326_fu_790_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_326_reg_1434 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_39_reg_1439 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_327_fu_804_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_327_reg_1444 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_40_reg_1449 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_42_reg_1454 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_41_reg_1459 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_328_fu_872_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_328_reg_1464 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_43_reg_1469 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_330_fu_886_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_330_reg_1474 : STD_LOGIC_VECTOR (11 downto 0);
    signal numIterations_fu_914_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal numIterations_reg_1479 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_sig_bdd_610 : BOOLEAN;
    signal ap_sig_ioackin_m_mm2s_ctl_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_mm2s_ctl_WREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_s2mm_ctl_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_s2mm_ctl_WREADY : STD_LOGIC;
    signal tmp_329_fu_927_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_329_reg_1489 : STD_LOGIC_VECTOR (27 downto 0);
    signal key_local_V_0_s_fu_961_p17 : STD_LOGIC_VECTOR (127 downto 0);
    signal key_local_V_0_s_reg_1509 : STD_LOGIC_VECTOR (127 downto 0);
    signal iv_local_V_s_fu_981_p17 : STD_LOGIC_VECTOR (127 downto 0);
    signal iv_local_V_s_reg_1514 : STD_LOGIC_VECTOR (127 downto 0);
    signal iterations_1_fu_1006_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal iterations_1_reg_1522 : STD_LOGIC_VECTOR (28 downto 0);
    signal exitcond_fu_1001_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_652 : BOOLEAN;
    signal tmp_360_reg_1527 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_361_reg_1532 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_362_reg_1537 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_363_reg_1542 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_364_reg_1547 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_365_reg_1552 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_366_reg_1557 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_367_reg_1562 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_368_reg_1567 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_369_reg_1572 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_370_reg_1577 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_344_reg_1582 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_345_reg_1587 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_346_reg_1592 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_347_reg_1597 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_s_fu_1012_p17 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_1_s_reg_1602 : STD_LOGIC_VECTOR (127 downto 0);
    signal temp_buffer_out_1_reg_1608 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_ioackin_s_out_V_TREADY : STD_LOGIC;
    signal temp_buffer_out_2_reg_1613 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_buffer_out_3_reg_1618 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_buffer_out_4_reg_1623 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_buffer_out_5_reg_1628 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_buffer_out_6_reg_1633 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_buffer_out_7_reg_1638 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_buffer_out_8_reg_1643 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_buffer_out_9_reg_1648 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_buffer_out_10_reg_1653 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_1658 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_reg_1663 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_reg_1668 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_reg_1673 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_349_fu_1215_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_349_reg_1678 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aestest_fu_337_ap_rst : STD_LOGIC;
    signal grp_aestest_fu_337_ap_start : STD_LOGIC;
    signal grp_aestest_fu_337_ap_done : STD_LOGIC;
    signal grp_aestest_fu_337_ap_idle : STD_LOGIC;
    signal grp_aestest_fu_337_ap_ready : STD_LOGIC;
    signal grp_aestest_fu_337_ap_ce : STD_LOGIC;
    signal grp_aestest_fu_337_inptext_V_read : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aestest_fu_337_key_V_read : STD_LOGIC_VECTOR (127 downto 0);
    signal iterations_reg_325 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_aestest_fu_337_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_fu_1047_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_reg_ioackin_m_mm2s_ctl_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_mm2s_ctl_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_mm2s_ctl_WREADY : STD_LOGIC := '0';
    signal tmp_28_fu_808_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_2536 : BOOLEAN;
    signal tmp_30_fu_846_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_890_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_length_fu_938_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_s2mm_ctl_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_s2mm_ctl_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_s2mm_ctl_WREADY : STD_LOGIC := '0';
    signal tmp_29_fu_817_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_854_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_899_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_fu_226 : STD_LOGIC_VECTOR (127 downto 0);
    signal r_V_1_fu_1054_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal t_V_fu_230 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_395_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sourceAddress_assign_fu_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_assign_fu_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_s_out_V_TREADY : STD_LOGIC := '0';
    signal tmp_325_fu_450_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_fu_908_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_27_cast_fu_911_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_36_fu_1034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_v_fu_1040_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_sig_bdd_754 : BOOLEAN;
    signal ap_sig_bdd_757 : BOOLEAN;

    component aestest IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        inptext_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        key_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component aes_AXILiteS_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (0 downto 0);
        sourceAddress : OUT STD_LOGIC_VECTOR (31 downto 0);
        sourceAddress_ap_vld : OUT STD_LOGIC;
        key_in_V : OUT STD_LOGIC_VECTOR (127 downto 0);
        key_in_V_ap_vld : OUT STD_LOGIC;
        iv_V : OUT STD_LOGIC_VECTOR (127 downto 0);
        iv_V_ap_vld : OUT STD_LOGIC;
        destinationAddress : OUT STD_LOGIC_VECTOR (31 downto 0);
        destinationAddress_ap_vld : OUT STD_LOGIC;
        numBytes : OUT STD_LOGIC_VECTOR (31 downto 0);
        numBytes_ap_vld : OUT STD_LOGIC;
        mode : OUT STD_LOGIC_VECTOR (31 downto 0);
        mode_ap_vld : OUT STD_LOGIC );
    end component;


    component aes_m_mm2s_ctl_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component aes_m_s2mm_ctl_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    aes_AXILiteS_s_axi_U : component aes_AXILiteS_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        sourceAddress => sourceAddress,
        sourceAddress_ap_vld => sourceAddress_ap_vld,
        key_in_V => key_in_V,
        key_in_V_ap_vld => key_in_V_ap_vld,
        iv_V => iv_V,
        iv_V_ap_vld => iv_V_ap_vld,
        destinationAddress => destinationAddress,
        destinationAddress_ap_vld => destinationAddress_ap_vld,
        numBytes => numBytes,
        numBytes_ap_vld => numBytes_ap_vld,
        mode => mode,
        mode_ap_vld => mode_ap_vld);

    aes_m_mm2s_ctl_m_axi_U : component aes_m_mm2s_ctl_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 2,
        C_ID_WIDTH => C_M_AXI_M_MM2S_CTL_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_M_MM2S_CTL_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_M_MM2S_CTL_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_M_MM2S_CTL_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_M_MM2S_CTL_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_M_MM2S_CTL_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_M_MM2S_CTL_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_M_MM2S_CTL_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_M_MM2S_CTL_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_M_MM2S_CTL_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_MM2S_CTL_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_MM2S_CTL_CACHE_VALUE)
    port map (
        AWVALID => m_axi_m_mm2s_ctl_AWVALID,
        AWREADY => m_axi_m_mm2s_ctl_AWREADY,
        AWADDR => m_axi_m_mm2s_ctl_AWADDR,
        AWID => m_axi_m_mm2s_ctl_AWID,
        AWLEN => m_axi_m_mm2s_ctl_AWLEN,
        AWSIZE => m_axi_m_mm2s_ctl_AWSIZE,
        AWBURST => m_axi_m_mm2s_ctl_AWBURST,
        AWLOCK => m_axi_m_mm2s_ctl_AWLOCK,
        AWCACHE => m_axi_m_mm2s_ctl_AWCACHE,
        AWPROT => m_axi_m_mm2s_ctl_AWPROT,
        AWQOS => m_axi_m_mm2s_ctl_AWQOS,
        AWREGION => m_axi_m_mm2s_ctl_AWREGION,
        AWUSER => m_axi_m_mm2s_ctl_AWUSER,
        WVALID => m_axi_m_mm2s_ctl_WVALID,
        WREADY => m_axi_m_mm2s_ctl_WREADY,
        WDATA => m_axi_m_mm2s_ctl_WDATA,
        WSTRB => m_axi_m_mm2s_ctl_WSTRB,
        WLAST => m_axi_m_mm2s_ctl_WLAST,
        WID => m_axi_m_mm2s_ctl_WID,
        WUSER => m_axi_m_mm2s_ctl_WUSER,
        ARVALID => m_axi_m_mm2s_ctl_ARVALID,
        ARREADY => m_axi_m_mm2s_ctl_ARREADY,
        ARADDR => m_axi_m_mm2s_ctl_ARADDR,
        ARID => m_axi_m_mm2s_ctl_ARID,
        ARLEN => m_axi_m_mm2s_ctl_ARLEN,
        ARSIZE => m_axi_m_mm2s_ctl_ARSIZE,
        ARBURST => m_axi_m_mm2s_ctl_ARBURST,
        ARLOCK => m_axi_m_mm2s_ctl_ARLOCK,
        ARCACHE => m_axi_m_mm2s_ctl_ARCACHE,
        ARPROT => m_axi_m_mm2s_ctl_ARPROT,
        ARQOS => m_axi_m_mm2s_ctl_ARQOS,
        ARREGION => m_axi_m_mm2s_ctl_ARREGION,
        ARUSER => m_axi_m_mm2s_ctl_ARUSER,
        RVALID => m_axi_m_mm2s_ctl_RVALID,
        RREADY => m_axi_m_mm2s_ctl_RREADY,
        RDATA => m_axi_m_mm2s_ctl_RDATA,
        RLAST => m_axi_m_mm2s_ctl_RLAST,
        RID => m_axi_m_mm2s_ctl_RID,
        RUSER => m_axi_m_mm2s_ctl_RUSER,
        RRESP => m_axi_m_mm2s_ctl_RRESP,
        BVALID => m_axi_m_mm2s_ctl_BVALID,
        BREADY => m_axi_m_mm2s_ctl_BREADY,
        BRESP => m_axi_m_mm2s_ctl_BRESP,
        BID => m_axi_m_mm2s_ctl_BID,
        BUSER => m_axi_m_mm2s_ctl_BUSER,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        I_ARVALID => m_mm2s_ctl_ARVALID,
        I_ARREADY => m_mm2s_ctl_ARREADY,
        I_ARADDR => m_mm2s_ctl_ARADDR,
        I_ARID => m_mm2s_ctl_ARID,
        I_ARLEN => m_mm2s_ctl_ARLEN,
        I_ARSIZE => m_mm2s_ctl_ARSIZE,
        I_ARLOCK => m_mm2s_ctl_ARLOCK,
        I_ARCACHE => m_mm2s_ctl_ARCACHE,
        I_ARQOS => m_mm2s_ctl_ARQOS,
        I_ARPROT => m_mm2s_ctl_ARPROT,
        I_ARUSER => m_mm2s_ctl_ARUSER,
        I_ARBURST => m_mm2s_ctl_ARBURST,
        I_ARREGION => m_mm2s_ctl_ARREGION,
        I_RVALID => m_mm2s_ctl_RVALID,
        I_RREADY => m_mm2s_ctl_RREADY,
        I_RDATA => m_mm2s_ctl_RDATA,
        I_RID => m_mm2s_ctl_RID,
        I_RUSER => m_mm2s_ctl_RUSER,
        I_RRESP => m_mm2s_ctl_RRESP,
        I_RLAST => m_mm2s_ctl_RLAST,
        I_AWVALID => m_mm2s_ctl_AWVALID,
        I_AWREADY => m_mm2s_ctl_AWREADY,
        I_AWADDR => m_mm2s_ctl_AWADDR,
        I_AWID => m_mm2s_ctl_AWID,
        I_AWLEN => m_mm2s_ctl_AWLEN,
        I_AWSIZE => m_mm2s_ctl_AWSIZE,
        I_AWLOCK => m_mm2s_ctl_AWLOCK,
        I_AWCACHE => m_mm2s_ctl_AWCACHE,
        I_AWQOS => m_mm2s_ctl_AWQOS,
        I_AWPROT => m_mm2s_ctl_AWPROT,
        I_AWUSER => m_mm2s_ctl_AWUSER,
        I_AWBURST => m_mm2s_ctl_AWBURST,
        I_AWREGION => m_mm2s_ctl_AWREGION,
        I_WVALID => m_mm2s_ctl_WVALID,
        I_WREADY => m_mm2s_ctl_WREADY,
        I_WDATA => m_mm2s_ctl_WDATA,
        I_WID => m_mm2s_ctl_WID,
        I_WUSER => m_mm2s_ctl_WUSER,
        I_WLAST => m_mm2s_ctl_WLAST,
        I_WSTRB => m_mm2s_ctl_WSTRB,
        I_BVALID => m_mm2s_ctl_BVALID,
        I_BREADY => m_mm2s_ctl_BREADY,
        I_BRESP => m_mm2s_ctl_BRESP,
        I_BID => m_mm2s_ctl_BID,
        I_BUSER => m_mm2s_ctl_BUSER);

    aes_m_s2mm_ctl_m_axi_U : component aes_m_s2mm_ctl_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 2,
        C_ID_WIDTH => C_M_AXI_M_S2MM_CTL_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_M_S2MM_CTL_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_M_S2MM_CTL_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_M_S2MM_CTL_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_M_S2MM_CTL_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_M_S2MM_CTL_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_M_S2MM_CTL_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_M_S2MM_CTL_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_M_S2MM_CTL_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_M_S2MM_CTL_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_S2MM_CTL_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_S2MM_CTL_CACHE_VALUE)
    port map (
        AWVALID => m_axi_m_s2mm_ctl_AWVALID,
        AWREADY => m_axi_m_s2mm_ctl_AWREADY,
        AWADDR => m_axi_m_s2mm_ctl_AWADDR,
        AWID => m_axi_m_s2mm_ctl_AWID,
        AWLEN => m_axi_m_s2mm_ctl_AWLEN,
        AWSIZE => m_axi_m_s2mm_ctl_AWSIZE,
        AWBURST => m_axi_m_s2mm_ctl_AWBURST,
        AWLOCK => m_axi_m_s2mm_ctl_AWLOCK,
        AWCACHE => m_axi_m_s2mm_ctl_AWCACHE,
        AWPROT => m_axi_m_s2mm_ctl_AWPROT,
        AWQOS => m_axi_m_s2mm_ctl_AWQOS,
        AWREGION => m_axi_m_s2mm_ctl_AWREGION,
        AWUSER => m_axi_m_s2mm_ctl_AWUSER,
        WVALID => m_axi_m_s2mm_ctl_WVALID,
        WREADY => m_axi_m_s2mm_ctl_WREADY,
        WDATA => m_axi_m_s2mm_ctl_WDATA,
        WSTRB => m_axi_m_s2mm_ctl_WSTRB,
        WLAST => m_axi_m_s2mm_ctl_WLAST,
        WID => m_axi_m_s2mm_ctl_WID,
        WUSER => m_axi_m_s2mm_ctl_WUSER,
        ARVALID => m_axi_m_s2mm_ctl_ARVALID,
        ARREADY => m_axi_m_s2mm_ctl_ARREADY,
        ARADDR => m_axi_m_s2mm_ctl_ARADDR,
        ARID => m_axi_m_s2mm_ctl_ARID,
        ARLEN => m_axi_m_s2mm_ctl_ARLEN,
        ARSIZE => m_axi_m_s2mm_ctl_ARSIZE,
        ARBURST => m_axi_m_s2mm_ctl_ARBURST,
        ARLOCK => m_axi_m_s2mm_ctl_ARLOCK,
        ARCACHE => m_axi_m_s2mm_ctl_ARCACHE,
        ARPROT => m_axi_m_s2mm_ctl_ARPROT,
        ARQOS => m_axi_m_s2mm_ctl_ARQOS,
        ARREGION => m_axi_m_s2mm_ctl_ARREGION,
        ARUSER => m_axi_m_s2mm_ctl_ARUSER,
        RVALID => m_axi_m_s2mm_ctl_RVALID,
        RREADY => m_axi_m_s2mm_ctl_RREADY,
        RDATA => m_axi_m_s2mm_ctl_RDATA,
        RLAST => m_axi_m_s2mm_ctl_RLAST,
        RID => m_axi_m_s2mm_ctl_RID,
        RUSER => m_axi_m_s2mm_ctl_RUSER,
        RRESP => m_axi_m_s2mm_ctl_RRESP,
        BVALID => m_axi_m_s2mm_ctl_BVALID,
        BREADY => m_axi_m_s2mm_ctl_BREADY,
        BRESP => m_axi_m_s2mm_ctl_BRESP,
        BID => m_axi_m_s2mm_ctl_BID,
        BUSER => m_axi_m_s2mm_ctl_BUSER,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        I_ARVALID => m_s2mm_ctl_ARVALID,
        I_ARREADY => m_s2mm_ctl_ARREADY,
        I_ARADDR => m_s2mm_ctl_ARADDR,
        I_ARID => m_s2mm_ctl_ARID,
        I_ARLEN => m_s2mm_ctl_ARLEN,
        I_ARSIZE => m_s2mm_ctl_ARSIZE,
        I_ARLOCK => m_s2mm_ctl_ARLOCK,
        I_ARCACHE => m_s2mm_ctl_ARCACHE,
        I_ARQOS => m_s2mm_ctl_ARQOS,
        I_ARPROT => m_s2mm_ctl_ARPROT,
        I_ARUSER => m_s2mm_ctl_ARUSER,
        I_ARBURST => m_s2mm_ctl_ARBURST,
        I_ARREGION => m_s2mm_ctl_ARREGION,
        I_RVALID => m_s2mm_ctl_RVALID,
        I_RREADY => m_s2mm_ctl_RREADY,
        I_RDATA => m_s2mm_ctl_RDATA,
        I_RID => m_s2mm_ctl_RID,
        I_RUSER => m_s2mm_ctl_RUSER,
        I_RRESP => m_s2mm_ctl_RRESP,
        I_RLAST => m_s2mm_ctl_RLAST,
        I_AWVALID => m_s2mm_ctl_AWVALID,
        I_AWREADY => m_s2mm_ctl_AWREADY,
        I_AWADDR => m_s2mm_ctl_AWADDR,
        I_AWID => m_s2mm_ctl_AWID,
        I_AWLEN => m_s2mm_ctl_AWLEN,
        I_AWSIZE => m_s2mm_ctl_AWSIZE,
        I_AWLOCK => m_s2mm_ctl_AWLOCK,
        I_AWCACHE => m_s2mm_ctl_AWCACHE,
        I_AWQOS => m_s2mm_ctl_AWQOS,
        I_AWPROT => m_s2mm_ctl_AWPROT,
        I_AWUSER => m_s2mm_ctl_AWUSER,
        I_AWBURST => m_s2mm_ctl_AWBURST,
        I_AWREGION => m_s2mm_ctl_AWREGION,
        I_WVALID => m_s2mm_ctl_WVALID,
        I_WREADY => m_s2mm_ctl_WREADY,
        I_WDATA => m_s2mm_ctl_WDATA,
        I_WID => m_s2mm_ctl_WID,
        I_WUSER => m_s2mm_ctl_WUSER,
        I_WLAST => m_s2mm_ctl_WLAST,
        I_WSTRB => m_s2mm_ctl_WSTRB,
        I_BVALID => m_s2mm_ctl_BVALID,
        I_BREADY => m_s2mm_ctl_BREADY,
        I_BRESP => m_s2mm_ctl_BRESP,
        I_BID => m_s2mm_ctl_BID,
        I_BUSER => m_s2mm_ctl_BUSER);

    grp_aestest_fu_337 : component aestest
    port map (
        ap_clk => ap_clk,
        ap_rst => grp_aestest_fu_337_ap_rst,
        ap_start => grp_aestest_fu_337_ap_start,
        ap_done => grp_aestest_fu_337_ap_done,
        ap_idle => grp_aestest_fu_337_ap_idle,
        ap_ready => grp_aestest_fu_337_ap_ready,
        ap_ce => grp_aestest_fu_337_ap_ce,
        inptext_V_read => grp_aestest_fu_337_inptext_V_read,
        key_V_read => grp_aestest_fu_337_key_V_read,
        ap_return => grp_aestest_fu_337_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_mm2s_ctl_ARREADY assign process. --
    ap_reg_ioackin_m_mm2s_ctl_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY)))) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_503))) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_610))) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2536))) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_610))))) then 
                    ap_reg_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY) and not((ap_start = ap_const_logic_0))) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY) and not(ap_sig_bdd_503)) or (not(ap_sig_bdd_610) and (ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY) and not(ap_sig_bdd_2536)) or (not(ap_sig_bdd_610) and (ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_mm2s_ctl_AWREADY assign process. --
    ap_reg_ioackin_m_mm2s_ctl_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_610 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_610 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))))) then 
                    ap_reg_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_AWREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_AWREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_AWREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_AWREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_1 = m_mm2s_ctl_AWREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_1 = m_mm2s_ctl_AWREADY)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_mm2s_ctl_WREADY assign process. --
    ap_reg_ioackin_m_mm2s_ctl_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_610 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_610 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))))) then 
                    ap_reg_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_WREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_WREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_WREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_WREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_1 = m_mm2s_ctl_WREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_1 = m_mm2s_ctl_WREADY)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_s2mm_ctl_ARREADY assign process. --
    ap_reg_ioackin_m_s2mm_ctl_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY)))) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_503))) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_610))) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2536))) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_610))))) then 
                    ap_reg_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(ap_sig_bdd_503) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_610) and (ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_2536) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_610) and (ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_s2mm_ctl_AWREADY assign process. --
    ap_reg_ioackin_m_s2mm_ctl_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_610 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_610 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))))) then 
                    ap_reg_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_s2mm_ctl_WREADY assign process. --
    ap_reg_ioackin_m_s2mm_ctl_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_610 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_610 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))))) then 
                    ap_reg_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_s_out_V_TREADY assign process. --
    ap_reg_ioackin_s_out_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_s_out_V_TREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st95_fsm_94 = ap_CS_fsm) and not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)) and (ap_ST_st110_fsm_109 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)) and (ap_ST_st96_fsm_95 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)) and (ap_ST_st97_fsm_96 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)) and (ap_ST_st98_fsm_97 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)) and (ap_ST_st99_fsm_98 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)) and (ap_ST_st100_fsm_99 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)) and (ap_ST_st101_fsm_100 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)) and (ap_ST_st102_fsm_101 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)) and (ap_ST_st103_fsm_102 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)) and (ap_ST_st104_fsm_103 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)) and (ap_ST_st105_fsm_104 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)) and (ap_ST_st106_fsm_105 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)) and (ap_ST_st107_fsm_106 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)) and (ap_ST_st108_fsm_107 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)) and (ap_ST_st109_fsm_108 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_s_out_V_TREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st95_fsm_94 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_TREADY)) or ((ap_ST_st96_fsm_95 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_TREADY)) or ((ap_ST_st97_fsm_96 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_TREADY)) or ((ap_ST_st98_fsm_97 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_TREADY)) or ((ap_ST_st99_fsm_98 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_TREADY)) or ((ap_ST_st100_fsm_99 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_TREADY)) or ((ap_ST_st101_fsm_100 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_TREADY)) or ((ap_ST_st102_fsm_101 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_TREADY)) or ((ap_ST_st103_fsm_102 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_TREADY)) or ((ap_ST_st104_fsm_103 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_TREADY)) or ((ap_ST_st105_fsm_104 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_TREADY)) or ((ap_ST_st106_fsm_105 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_TREADY)) or ((ap_ST_st107_fsm_106 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_TREADY)) or ((ap_ST_st108_fsm_107 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_TREADY)) or ((ap_ST_st109_fsm_108 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_TREADY)) or ((ap_ST_st110_fsm_109 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_TREADY)))) then 
                    ap_reg_ioackin_s_out_V_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- destinationAddress_ap_vld_preg assign process. --
    destinationAddress_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                destinationAddress_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not(ap_sig_bdd_652) and not((exitcond_fu_1001_p2 = ap_const_lv1_0)))) then 
                    destinationAddress_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = destinationAddress_ap_vld))) then 
                    destinationAddress_ap_vld_preg <= destinationAddress_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- destinationAddress_preg assign process. --
    destinationAddress_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                destinationAddress_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = destinationAddress_ap_vld))) then 
                    destinationAddress_preg <= destinationAddress;
                end if; 
            end if;
        end if;
    end process;


    -- grp_aestest_fu_337_ap_start_ap_start_reg assign process. --
    grp_aestest_fu_337_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                grp_aestest_fu_337_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_ST_st33_fsm_32 = ap_CS_fsm) and (tmp_35_reg_1421 = ap_const_lv1_0) and (tmp_38_reg_1425 = ap_const_lv1_0) and (ap_ST_st34_fsm_33 = ap_NS_fsm)) or ((ap_ST_st33_fsm_32 = ap_CS_fsm) and (tmp_35_reg_1421 = ap_const_lv1_0) and not((tmp_38_reg_1425 = ap_const_lv1_0)) and (ap_ST_st34_fsm_33 = ap_NS_fsm)) or ((ap_ST_st33_fsm_32 = ap_CS_fsm) and not((tmp_35_reg_1421 = ap_const_lv1_0)) and (ap_ST_st34_fsm_33 = ap_NS_fsm)))) then 
                    grp_aestest_fu_337_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aestest_fu_337_ap_ready)) then 
                    grp_aestest_fu_337_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- iv_V_ap_vld_preg assign process. --
    iv_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                iv_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not(ap_sig_bdd_652) and not((exitcond_fu_1001_p2 = ap_const_lv1_0)))) then 
                    iv_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = iv_V_ap_vld))) then 
                    iv_V_ap_vld_preg <= iv_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- iv_V_preg assign process. --
    iv_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                iv_V_preg <= ap_const_lv128_lc_1;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = iv_V_ap_vld))) then 
                    iv_V_preg <= iv_V;
                end if; 
            end if;
        end if;
    end process;


    -- key_in_V_ap_vld_preg assign process. --
    key_in_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                key_in_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not(ap_sig_bdd_652) and not((exitcond_fu_1001_p2 = ap_const_lv1_0)))) then 
                    key_in_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = key_in_V_ap_vld))) then 
                    key_in_V_ap_vld_preg <= key_in_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- key_in_V_preg assign process. --
    key_in_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                key_in_V_preg <= ap_const_lv128_lc_1;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = key_in_V_ap_vld))) then 
                    key_in_V_preg <= key_in_V;
                end if; 
            end if;
        end if;
    end process;


    -- mode_ap_vld_preg assign process. --
    mode_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                mode_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not(ap_sig_bdd_652) and not((exitcond_fu_1001_p2 = ap_const_lv1_0)))) then 
                    mode_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = mode_ap_vld))) then 
                    mode_ap_vld_preg <= mode_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- mode_preg assign process. --
    mode_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                mode_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = mode_ap_vld))) then 
                    mode_preg <= mode;
                end if; 
            end if;
        end if;
    end process;


    -- numBytes_ap_vld_preg assign process. --
    numBytes_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                numBytes_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not(ap_sig_bdd_652) and not((exitcond_fu_1001_p2 = ap_const_lv1_0)))) then 
                    numBytes_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = numBytes_ap_vld))) then 
                    numBytes_ap_vld_preg <= numBytes_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- numBytes_preg assign process. --
    numBytes_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                numBytes_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = numBytes_ap_vld))) then 
                    numBytes_preg <= numBytes;
                end if; 
            end if;
        end if;
    end process;


    -- sourceAddress_ap_vld_preg assign process. --
    sourceAddress_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                sourceAddress_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not(ap_sig_bdd_652) and not((exitcond_fu_1001_p2 = ap_const_lv1_0)))) then 
                    sourceAddress_ap_vld_preg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = sourceAddress_ap_vld) and not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))))) then 
                    sourceAddress_ap_vld_preg <= sourceAddress_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- sourceAddress_preg assign process. --
    sourceAddress_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                sourceAddress_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = sourceAddress_ap_vld) and not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))))) then 
                    sourceAddress_preg <= sourceAddress;
                end if; 
            end if;
        end if;
    end process;


    -- iterations_reg_325 assign process. --
    iterations_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_610))) then 
                iterations_reg_325 <= ap_const_lv29_0;
            elsif ((not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)) and (ap_ST_st110_fsm_109 = ap_CS_fsm))) then 
                iterations_reg_325 <= iterations_1_reg_1522;
            end if; 
        end if;
    end process;

    -- rhs_V_fu_226 assign process. --
    rhs_V_fu_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st74_fsm_73 = ap_CS_fsm)) then 
                rhs_V_fu_226 <= r_V_1_fu_1054_p2;
            elsif (((ap_ST_st54_fsm_53 = ap_CS_fsm) or (ap_ST_st94_fsm_93 = ap_CS_fsm))) then 
                rhs_V_fu_226 <= reg_409;
            end if; 
        end if;
    end process;

    -- t_V_fu_230 assign process. --
    t_V_fu_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st34_fsm_33 = ap_CS_fsm) and (tmp_35_reg_1421 = ap_const_lv1_0) and not((tmp_38_reg_1425 = ap_const_lv1_0))) or (not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st34_fsm_33 = ap_CS_fsm) and not((tmp_35_reg_1421 = ap_const_lv1_0))))) then 
                t_V_fu_230 <= grp_fu_395_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY))))) then 
                t_V_fu_230 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_503)))) then
                destinationAddress_assign_fu_238 <= destinationAddress_in_sig;
                p_Result_10_reg_1361 <= key_in_V_in_sig(87 downto 80);
                p_Result_12_reg_1381 <= key_in_V_in_sig(103 downto 96);
                p_Result_13_reg_1391 <= key_in_V_in_sig(111 downto 104);
                p_Result_14_reg_1401 <= key_in_V_in_sig(119 downto 112);
                p_Result_15_reg_1411 <= key_in_V_in_sig(127 downto 120);
                p_Result_16_reg_1371 <= key_in_V_in_sig(95 downto 88);
                p_Result_1_reg_1271 <= key_in_V_in_sig(15 downto 8);
                p_Result_2_reg_1281 <= key_in_V_in_sig(23 downto 16);
                p_Result_3_reg_1291 <= key_in_V_in_sig(31 downto 24);
                p_Result_4_reg_1301 <= key_in_V_in_sig(39 downto 32);
                p_Result_5_reg_1311 <= key_in_V_in_sig(47 downto 40);
                p_Result_6_10_reg_1376 <= iv_V_in_sig(95 downto 88);
                p_Result_6_11_reg_1386 <= iv_V_in_sig(103 downto 96);
                p_Result_6_12_reg_1396 <= iv_V_in_sig(111 downto 104);
                p_Result_6_13_reg_1406 <= iv_V_in_sig(119 downto 112);
                p_Result_6_14_reg_1416 <= iv_V_in_sig(127 downto 120);
                p_Result_6_1_reg_1276 <= iv_V_in_sig(15 downto 8);
                p_Result_6_2_reg_1286 <= iv_V_in_sig(23 downto 16);
                p_Result_6_3_reg_1296 <= iv_V_in_sig(31 downto 24);
                p_Result_6_4_reg_1306 <= iv_V_in_sig(39 downto 32);
                p_Result_6_5_reg_1316 <= iv_V_in_sig(47 downto 40);
                p_Result_6_6_reg_1326 <= iv_V_in_sig(55 downto 48);
                p_Result_6_7_reg_1336 <= iv_V_in_sig(63 downto 56);
                p_Result_6_8_reg_1346 <= iv_V_in_sig(71 downto 64);
                p_Result_6_9_reg_1356 <= iv_V_in_sig(79 downto 72);
                p_Result_6_s_reg_1366 <= iv_V_in_sig(87 downto 80);
                p_Result_7_reg_1331 <= key_in_V_in_sig(63 downto 56);
                p_Result_8_reg_1341 <= key_in_V_in_sig(71 downto 64);
                p_Result_9_reg_1351 <= key_in_V_in_sig(79 downto 72);
                p_Result_s_reg_1321 <= key_in_V_in_sig(55 downto 48);
                sourceAddress_assign_fu_234 <= sourceAddress_in_sig;
                tmp_26_reg_1256 <= tmp_26_fu_454_p2;
                tmp_331_reg_1261 <= tmp_331_fu_460_p1;
                tmp_332_reg_1266 <= tmp_332_fu_464_p1;
                tmp_35_reg_1421 <= tmp_35_fu_768_p2;
                tmp_38_reg_1425 <= tmp_38_fu_774_p2;
                tmp_reg_1251 <= numBytes_in_sig(31 downto 4);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not(ap_sig_bdd_652))) then
                iterations_1_reg_1522 <= iterations_1_fu_1006_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_610))) then
                iv_local_V_s_reg_1514 <= iv_local_V_s_fu_981_p17;
                key_local_V_0_s_reg_1509 <= key_local_V_0_s_fu_961_p17;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_610 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))))) then
                numIterations_reg_1479 <= numIterations_fu_914_p2;
                tmp_329_reg_1489 <= tmp_329_fu_927_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st34_fsm_33 = ap_CS_fsm))) then
                p_1_s_reg_1602 <= p_1_s_fu_1012_p17;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st53_fsm_52 = ap_CS_fsm) or (ap_ST_st73_fsm_72 = ap_CS_fsm) or (ap_ST_st93_fsm_92 = ap_CS_fsm))) then
                reg_409 <= grp_aestest_fu_337_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st95_fsm_94 = ap_CS_fsm) and not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY)))) then
                temp_buffer_out_10_reg_1653 <= rhs_V_fu_226(47 downto 40);
                temp_buffer_out_1_reg_1608 <= rhs_V_fu_226(119 downto 112);
                temp_buffer_out_2_reg_1613 <= rhs_V_fu_226(111 downto 104);
                temp_buffer_out_3_reg_1618 <= rhs_V_fu_226(103 downto 96);
                temp_buffer_out_4_reg_1623 <= rhs_V_fu_226(95 downto 88);
                temp_buffer_out_5_reg_1628 <= rhs_V_fu_226(87 downto 80);
                temp_buffer_out_6_reg_1633 <= rhs_V_fu_226(79 downto 72);
                temp_buffer_out_7_reg_1638 <= rhs_V_fu_226(71 downto 64);
                temp_buffer_out_8_reg_1643 <= rhs_V_fu_226(63 downto 56);
                temp_buffer_out_9_reg_1648 <= rhs_V_fu_226(55 downto 48);
                tmp_14_reg_1658 <= rhs_V_fu_226(39 downto 32);
                tmp_15_reg_1663 <= rhs_V_fu_226(31 downto 24);
                tmp_16_reg_1668 <= rhs_V_fu_226(23 downto 16);
                tmp_17_reg_1673 <= rhs_V_fu_226(15 downto 8);
                tmp_349_reg_1678 <= tmp_349_fu_1215_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not(ap_sig_bdd_581))) then
                tmp_326_reg_1434 <= tmp_326_fu_790_p1;
                tmp_327_reg_1444 <= tmp_327_fu_804_p1;
                tmp_39_reg_1439 <= m_s2mm_ctl_RDATA(31 downto 3);
                tmp_s_reg_1429 <= m_mm2s_ctl_RDATA(31 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(ap_sig_bdd_581) and (ap_ST_st14_fsm_13 = ap_CS_fsm))) then
                tmp_328_reg_1464 <= tmp_328_fu_872_p1;
                tmp_330_reg_1474 <= tmp_330_fu_886_p1;
                tmp_41_reg_1459 <= m_mm2s_ctl_RDATA(31 downto 13);
                tmp_43_reg_1469 <= m_s2mm_ctl_RDATA(31 downto 13);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st30_fsm_29 = ap_CS_fsm))) then
                tmp_344_reg_1582 <= s_in_V_TDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st31_fsm_30 = ap_CS_fsm))) then
                tmp_345_reg_1587 <= s_in_V_TDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st32_fsm_31 = ap_CS_fsm))) then
                tmp_346_reg_1592 <= s_in_V_TDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st33_fsm_32 = ap_CS_fsm))) then
                tmp_347_reg_1597 <= s_in_V_TDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (exitcond_fu_1001_p2 = ap_const_lv1_0) and not(ap_sig_bdd_652))) then
                tmp_360_reg_1527 <= s_in_V_TDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((s_in_V_TVALID = ap_const_logic_0)))) then
                tmp_361_reg_1532 <= s_in_V_TDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st21_fsm_20 = ap_CS_fsm))) then
                tmp_362_reg_1537 <= s_in_V_TDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st22_fsm_21 = ap_CS_fsm))) then
                tmp_363_reg_1542 <= s_in_V_TDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st23_fsm_22 = ap_CS_fsm))) then
                tmp_364_reg_1547 <= s_in_V_TDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st24_fsm_23 = ap_CS_fsm))) then
                tmp_365_reg_1552 <= s_in_V_TDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st25_fsm_24 = ap_CS_fsm))) then
                tmp_366_reg_1557 <= s_in_V_TDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st26_fsm_25 = ap_CS_fsm))) then
                tmp_367_reg_1562 <= s_in_V_TDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st27_fsm_26 = ap_CS_fsm))) then
                tmp_368_reg_1567 <= s_in_V_TDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st28_fsm_27 = ap_CS_fsm))) then
                tmp_369_reg_1572 <= s_in_V_TDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st29_fsm_28 = ap_CS_fsm))) then
                tmp_370_reg_1577 <= s_in_V_TDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(ap_sig_bdd_581) and (ap_ST_st11_fsm_10 = ap_CS_fsm))) then
                tmp_40_reg_1449 <= m_mm2s_ctl_RDATA(31 downto 1);
                tmp_42_reg_1454 <= m_s2mm_ctl_RDATA(31 downto 1);
            end if;
        end if;
    end process;
    m_s2mm_ctl_addr_reg_1245(31 downto 0) <= "00000000000000000000000000001100";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , s_in_V_TVALID , ap_sig_ioackin_m_mm2s_ctl_ARREADY , ap_sig_ioackin_m_s2mm_ctl_ARREADY , ap_sig_bdd_503 , tmp_35_reg_1421 , tmp_38_reg_1425 , ap_sig_bdd_581 , ap_sig_bdd_610 , ap_sig_ioackin_m_mm2s_ctl_AWREADY , ap_sig_ioackin_m_mm2s_ctl_WREADY , ap_sig_ioackin_m_s2mm_ctl_AWREADY , ap_sig_ioackin_m_s2mm_ctl_WREADY , exitcond_fu_1001_p2 , ap_sig_bdd_652 , ap_sig_ioackin_s_out_V_TREADY , ap_sig_bdd_2536)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_503))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not(ap_sig_bdd_581)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_610))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st10_fsm_9 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2536))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st11_fsm_10 => 
                if (not(ap_sig_bdd_581)) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st12_fsm_11 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st13_fsm_12 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_610))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st14_fsm_13 => 
                if (not(ap_sig_bdd_581)) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st15_fsm_14 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st16_fsm_15 => 
                if (not((ap_sig_bdd_610 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st17_fsm_16 => 
                if (not((ap_sig_bdd_610 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st18_fsm_17 => 
                if (not(ap_sig_bdd_610)) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st19_fsm_18 => 
                if ((not(ap_sig_bdd_652) and not((exitcond_fu_1001_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((exitcond_fu_1001_p2 = ap_const_lv1_0) and not(ap_sig_bdd_652))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                end if;
            when ap_ST_st20_fsm_19 => 
                if (not((s_in_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st21_fsm_20 => 
                if (not((s_in_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                end if;
            when ap_ST_st22_fsm_21 => 
                if (not((s_in_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st23_fsm_22 => 
                if (not((s_in_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                end if;
            when ap_ST_st24_fsm_23 => 
                if (not((s_in_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                end if;
            when ap_ST_st25_fsm_24 => 
                if (not((s_in_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                else
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                end if;
            when ap_ST_st26_fsm_25 => 
                if (not((s_in_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when ap_ST_st27_fsm_26 => 
                if (not((s_in_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st28_fsm_27;
                else
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                end if;
            when ap_ST_st28_fsm_27 => 
                if (not((s_in_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st29_fsm_28;
                else
                    ap_NS_fsm <= ap_ST_st28_fsm_27;
                end if;
            when ap_ST_st29_fsm_28 => 
                if (not((s_in_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st30_fsm_29;
                else
                    ap_NS_fsm <= ap_ST_st29_fsm_28;
                end if;
            when ap_ST_st30_fsm_29 => 
                if (not((s_in_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                else
                    ap_NS_fsm <= ap_ST_st30_fsm_29;
                end if;
            when ap_ST_st31_fsm_30 => 
                if (not((s_in_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                else
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                end if;
            when ap_ST_st32_fsm_31 => 
                if (not((s_in_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st33_fsm_32;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                end if;
            when ap_ST_st33_fsm_32 => 
                if (not((s_in_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st34_fsm_33;
                else
                    ap_NS_fsm <= ap_ST_st33_fsm_32;
                end if;
            when ap_ST_st34_fsm_33 => 
                if ((not((s_in_V_TVALID = ap_const_logic_0)) and (tmp_35_reg_1421 = ap_const_lv1_0) and not((tmp_38_reg_1425 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st55_fsm_54;
                elsif ((not((s_in_V_TVALID = ap_const_logic_0)) and (tmp_35_reg_1421 = ap_const_lv1_0) and (tmp_38_reg_1425 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st35_fsm_34;
                elsif ((not((s_in_V_TVALID = ap_const_logic_0)) and not((tmp_35_reg_1421 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st75_fsm_74;
                else
                    ap_NS_fsm <= ap_ST_st34_fsm_33;
                end if;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st95_fsm_94;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st71_fsm_70 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when ap_ST_st72_fsm_71 => 
                ap_NS_fsm <= ap_ST_st73_fsm_72;
            when ap_ST_st73_fsm_72 => 
                ap_NS_fsm <= ap_ST_st74_fsm_73;
            when ap_ST_st74_fsm_73 => 
                ap_NS_fsm <= ap_ST_st95_fsm_94;
            when ap_ST_st75_fsm_74 => 
                ap_NS_fsm <= ap_ST_st76_fsm_75;
            when ap_ST_st76_fsm_75 => 
                ap_NS_fsm <= ap_ST_st77_fsm_76;
            when ap_ST_st77_fsm_76 => 
                ap_NS_fsm <= ap_ST_st78_fsm_77;
            when ap_ST_st78_fsm_77 => 
                ap_NS_fsm <= ap_ST_st79_fsm_78;
            when ap_ST_st79_fsm_78 => 
                ap_NS_fsm <= ap_ST_st80_fsm_79;
            when ap_ST_st80_fsm_79 => 
                ap_NS_fsm <= ap_ST_st81_fsm_80;
            when ap_ST_st81_fsm_80 => 
                ap_NS_fsm <= ap_ST_st82_fsm_81;
            when ap_ST_st82_fsm_81 => 
                ap_NS_fsm <= ap_ST_st83_fsm_82;
            when ap_ST_st83_fsm_82 => 
                ap_NS_fsm <= ap_ST_st84_fsm_83;
            when ap_ST_st84_fsm_83 => 
                ap_NS_fsm <= ap_ST_st85_fsm_84;
            when ap_ST_st85_fsm_84 => 
                ap_NS_fsm <= ap_ST_st86_fsm_85;
            when ap_ST_st86_fsm_85 => 
                ap_NS_fsm <= ap_ST_st87_fsm_86;
            when ap_ST_st87_fsm_86 => 
                ap_NS_fsm <= ap_ST_st88_fsm_87;
            when ap_ST_st88_fsm_87 => 
                ap_NS_fsm <= ap_ST_st89_fsm_88;
            when ap_ST_st89_fsm_88 => 
                ap_NS_fsm <= ap_ST_st90_fsm_89;
            when ap_ST_st90_fsm_89 => 
                ap_NS_fsm <= ap_ST_st91_fsm_90;
            when ap_ST_st91_fsm_90 => 
                ap_NS_fsm <= ap_ST_st92_fsm_91;
            when ap_ST_st92_fsm_91 => 
                ap_NS_fsm <= ap_ST_st93_fsm_92;
            when ap_ST_st93_fsm_92 => 
                ap_NS_fsm <= ap_ST_st94_fsm_93;
            when ap_ST_st94_fsm_93 => 
                ap_NS_fsm <= ap_ST_st95_fsm_94;
            when ap_ST_st95_fsm_94 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st96_fsm_95;
                else
                    ap_NS_fsm <= ap_ST_st95_fsm_94;
                end if;
            when ap_ST_st96_fsm_95 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st97_fsm_96;
                else
                    ap_NS_fsm <= ap_ST_st96_fsm_95;
                end if;
            when ap_ST_st97_fsm_96 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st98_fsm_97;
                else
                    ap_NS_fsm <= ap_ST_st97_fsm_96;
                end if;
            when ap_ST_st98_fsm_97 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st99_fsm_98;
                else
                    ap_NS_fsm <= ap_ST_st98_fsm_97;
                end if;
            when ap_ST_st99_fsm_98 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st100_fsm_99;
                else
                    ap_NS_fsm <= ap_ST_st99_fsm_98;
                end if;
            when ap_ST_st100_fsm_99 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st101_fsm_100;
                else
                    ap_NS_fsm <= ap_ST_st100_fsm_99;
                end if;
            when ap_ST_st101_fsm_100 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st102_fsm_101;
                else
                    ap_NS_fsm <= ap_ST_st101_fsm_100;
                end if;
            when ap_ST_st102_fsm_101 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st103_fsm_102;
                else
                    ap_NS_fsm <= ap_ST_st102_fsm_101;
                end if;
            when ap_ST_st103_fsm_102 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st104_fsm_103;
                else
                    ap_NS_fsm <= ap_ST_st103_fsm_102;
                end if;
            when ap_ST_st104_fsm_103 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st105_fsm_104;
                else
                    ap_NS_fsm <= ap_ST_st104_fsm_103;
                end if;
            when ap_ST_st105_fsm_104 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st106_fsm_105;
                else
                    ap_NS_fsm <= ap_ST_st105_fsm_104;
                end if;
            when ap_ST_st106_fsm_105 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st107_fsm_106;
                else
                    ap_NS_fsm <= ap_ST_st106_fsm_105;
                end if;
            when ap_ST_st107_fsm_106 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st108_fsm_107;
                else
                    ap_NS_fsm <= ap_ST_st107_fsm_106;
                end if;
            when ap_ST_st108_fsm_107 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st109_fsm_108;
                else
                    ap_NS_fsm <= ap_ST_st108_fsm_107;
                end if;
            when ap_ST_st109_fsm_108 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st110_fsm_109;
                else
                    ap_NS_fsm <= ap_ST_st109_fsm_108;
                end if;
            when ap_ST_st110_fsm_109 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st110_fsm_109;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, exitcond_fu_1001_p2, ap_sig_bdd_652)
    begin
        if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not(ap_sig_bdd_652) and not((exitcond_fu_1001_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond_fu_1001_p2, ap_sig_bdd_652)
    begin
        if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not(ap_sig_bdd_652) and not((exitcond_fu_1001_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv1_1;

    -- ap_sig_bdd_2536 assign process. --
    ap_sig_bdd_2536_assign_proc : process(m_mm2s_ctl_RVALID, m_mm2s_ctl_BVALID, m_s2mm_ctl_RVALID, m_s2mm_ctl_BVALID)
    begin
                ap_sig_bdd_2536 <= ((m_mm2s_ctl_RVALID = ap_const_logic_0) or (m_mm2s_ctl_BVALID = ap_const_logic_0) or (m_s2mm_ctl_RVALID = ap_const_logic_0) or (m_s2mm_ctl_BVALID = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_503 assign process. --
    ap_sig_bdd_503_assign_proc : process(sourceAddress_ap_vld_in_sig, key_in_V_ap_vld_in_sig, iv_V_ap_vld_in_sig, destinationAddress_ap_vld_in_sig, numBytes_ap_vld_in_sig, mode_ap_vld_in_sig, m_mm2s_ctl_RVALID, m_mm2s_ctl_BVALID, m_s2mm_ctl_RVALID, m_s2mm_ctl_BVALID)
    begin
                ap_sig_bdd_503 <= ((mode_ap_vld_in_sig = ap_const_logic_0) or (numBytes_ap_vld_in_sig = ap_const_logic_0) or (destinationAddress_ap_vld_in_sig = ap_const_logic_0) or (sourceAddress_ap_vld_in_sig = ap_const_logic_0) or (m_mm2s_ctl_RVALID = ap_const_logic_0) or (m_mm2s_ctl_BVALID = ap_const_logic_0) or (m_s2mm_ctl_RVALID = ap_const_logic_0) or (m_s2mm_ctl_BVALID = ap_const_logic_0) or (key_in_V_ap_vld_in_sig = ap_const_logic_0) or (iv_V_ap_vld_in_sig = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_581 assign process. --
    ap_sig_bdd_581_assign_proc : process(m_mm2s_ctl_RVALID, m_s2mm_ctl_RVALID)
    begin
                ap_sig_bdd_581 <= ((m_mm2s_ctl_RVALID = ap_const_logic_0) or (m_s2mm_ctl_RVALID = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_610 assign process. --
    ap_sig_bdd_610_assign_proc : process(m_mm2s_ctl_BVALID, m_s2mm_ctl_BVALID)
    begin
                ap_sig_bdd_610 <= ((m_mm2s_ctl_BVALID = ap_const_logic_0) or (m_s2mm_ctl_BVALID = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_652 assign process. --
    ap_sig_bdd_652_assign_proc : process(s_in_V_TVALID, exitcond_fu_1001_p2)
    begin
                ap_sig_bdd_652 <= ((s_in_V_TVALID = ap_const_logic_0) and (exitcond_fu_1001_p2 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_754 assign process. --
    ap_sig_bdd_754_assign_proc : process(tmp_35_reg_1421, tmp_38_reg_1425)
    begin
                ap_sig_bdd_754 <= ((tmp_35_reg_1421 = ap_const_lv1_0) and (tmp_38_reg_1425 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_757 assign process. --
    ap_sig_bdd_757_assign_proc : process(tmp_35_reg_1421, tmp_38_reg_1425)
    begin
                ap_sig_bdd_757 <= ((tmp_35_reg_1421 = ap_const_lv1_0) and not((tmp_38_reg_1425 = ap_const_lv1_0)));
    end process;


    -- ap_sig_ioackin_m_mm2s_ctl_ARREADY assign process. --
    ap_sig_ioackin_m_mm2s_ctl_ARREADY_assign_proc : process(m_mm2s_ctl_ARREADY, ap_reg_ioackin_m_mm2s_ctl_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY)) then 
            ap_sig_ioackin_m_mm2s_ctl_ARREADY <= m_mm2s_ctl_ARREADY;
        else 
            ap_sig_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_mm2s_ctl_AWREADY assign process. --
    ap_sig_ioackin_m_mm2s_ctl_AWREADY_assign_proc : process(m_mm2s_ctl_AWREADY, ap_reg_ioackin_m_mm2s_ctl_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) then 
            ap_sig_ioackin_m_mm2s_ctl_AWREADY <= m_mm2s_ctl_AWREADY;
        else 
            ap_sig_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_mm2s_ctl_WREADY assign process. --
    ap_sig_ioackin_m_mm2s_ctl_WREADY_assign_proc : process(m_mm2s_ctl_WREADY, ap_reg_ioackin_m_mm2s_ctl_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) then 
            ap_sig_ioackin_m_mm2s_ctl_WREADY <= m_mm2s_ctl_WREADY;
        else 
            ap_sig_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_s2mm_ctl_ARREADY assign process. --
    ap_sig_ioackin_m_s2mm_ctl_ARREADY_assign_proc : process(m_s2mm_ctl_ARREADY, ap_reg_ioackin_m_s2mm_ctl_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) then 
            ap_sig_ioackin_m_s2mm_ctl_ARREADY <= m_s2mm_ctl_ARREADY;
        else 
            ap_sig_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_s2mm_ctl_AWREADY assign process. --
    ap_sig_ioackin_m_s2mm_ctl_AWREADY_assign_proc : process(m_s2mm_ctl_AWREADY, ap_reg_ioackin_m_s2mm_ctl_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) then 
            ap_sig_ioackin_m_s2mm_ctl_AWREADY <= m_s2mm_ctl_AWREADY;
        else 
            ap_sig_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_s2mm_ctl_WREADY assign process. --
    ap_sig_ioackin_m_s2mm_ctl_WREADY_assign_proc : process(m_s2mm_ctl_WREADY, ap_reg_ioackin_m_s2mm_ctl_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) then 
            ap_sig_ioackin_m_s2mm_ctl_WREADY <= m_s2mm_ctl_WREADY;
        else 
            ap_sig_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_s_out_V_TREADY assign process. --
    ap_sig_ioackin_s_out_V_TREADY_assign_proc : process(s_out_V_TREADY, ap_reg_ioackin_s_out_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)) then 
            ap_sig_ioackin_s_out_V_TREADY <= s_out_V_TREADY;
        else 
            ap_sig_ioackin_s_out_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- destinationAddress_ap_vld_in_sig assign process. --
    destinationAddress_ap_vld_in_sig_assign_proc : process(destinationAddress_ap_vld, destinationAddress_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = destinationAddress_ap_vld)) then 
            destinationAddress_ap_vld_in_sig <= destinationAddress_ap_vld;
        else 
            destinationAddress_ap_vld_in_sig <= destinationAddress_ap_vld_preg;
        end if; 
    end process;


    -- destinationAddress_in_sig assign process. --
    destinationAddress_in_sig_assign_proc : process(destinationAddress, destinationAddress_preg, destinationAddress_ap_vld)
    begin
        if ((ap_const_logic_1 = destinationAddress_ap_vld)) then 
            destinationAddress_in_sig <= destinationAddress;
        else 
            destinationAddress_in_sig <= destinationAddress_preg;
        end if; 
    end process;

    exitcond_fu_1001_p2 <= "1" when (iterations_reg_325 = numIterations_reg_1479) else "0";

    -- grp_aestest_fu_337_ap_ce assign process. --
    grp_aestest_fu_337_ap_ce_assign_proc : process(ap_CS_fsm, s_in_V_TVALID, tmp_35_reg_1421, tmp_38_reg_1425)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st5_fsm_4 = ap_CS_fsm) or (ap_ST_st11_fsm_10 = ap_CS_fsm) or (ap_ST_st14_fsm_13 = ap_CS_fsm) or (ap_ST_st16_fsm_15 = ap_CS_fsm) or (ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st18_fsm_17 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm) or (ap_ST_st20_fsm_19 = ap_CS_fsm) or (ap_ST_st21_fsm_20 = ap_CS_fsm) or (ap_ST_st22_fsm_21 = ap_CS_fsm) or (ap_ST_st23_fsm_22 = ap_CS_fsm) or (ap_ST_st24_fsm_23 = ap_CS_fsm) or (ap_ST_st25_fsm_24 = ap_CS_fsm) or (ap_ST_st26_fsm_25 = ap_CS_fsm) or (ap_ST_st27_fsm_26 = ap_CS_fsm) or (ap_ST_st28_fsm_27 = ap_CS_fsm) or (ap_ST_st29_fsm_28 = ap_CS_fsm) or (ap_ST_st30_fsm_29 = ap_CS_fsm) or (ap_ST_st31_fsm_30 = ap_CS_fsm) or (ap_ST_st32_fsm_31 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm) or (ap_ST_st95_fsm_94 = ap_CS_fsm) or ((ap_ST_st34_fsm_33 = ap_CS_fsm) and ((s_in_V_TVALID = ap_const_logic_0) or ((tmp_35_reg_1421 = ap_const_lv1_0) and not(((tmp_35_reg_1421 = ap_const_lv1_0) and (tmp_38_reg_1425 = ap_const_lv1_0))) and not(((tmp_35_reg_1421 = ap_const_lv1_0) and not((tmp_38_reg_1425 = ap_const_lv1_0))))))) or (ap_ST_st2_fsm_1 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm) or (ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm) or (ap_ST_st10_fsm_9 = ap_CS_fsm) or (ap_ST_st12_fsm_11 = ap_CS_fsm) or (ap_ST_st13_fsm_12 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st54_fsm_53 = ap_CS_fsm) or (ap_ST_st74_fsm_73 = ap_CS_fsm) or (ap_ST_st94_fsm_93 = ap_CS_fsm) or (ap_ST_st96_fsm_95 = ap_CS_fsm) or (ap_ST_st97_fsm_96 = ap_CS_fsm) or (ap_ST_st98_fsm_97 = ap_CS_fsm) or (ap_ST_st99_fsm_98 = ap_CS_fsm) or (ap_ST_st100_fsm_99 = ap_CS_fsm) or (ap_ST_st101_fsm_100 = ap_CS_fsm) or (ap_ST_st102_fsm_101 = ap_CS_fsm) or (ap_ST_st103_fsm_102 = ap_CS_fsm) or (ap_ST_st104_fsm_103 = ap_CS_fsm) or (ap_ST_st105_fsm_104 = ap_CS_fsm) or (ap_ST_st106_fsm_105 = ap_CS_fsm) or (ap_ST_st107_fsm_106 = ap_CS_fsm) or (ap_ST_st108_fsm_107 = ap_CS_fsm) or (ap_ST_st109_fsm_108 = ap_CS_fsm) or (ap_ST_st110_fsm_109 = ap_CS_fsm))) then 
            grp_aestest_fu_337_ap_ce <= ap_const_logic_0;
        else 
            grp_aestest_fu_337_ap_ce <= ap_const_logic_1;
        end if; 
    end process;


    -- grp_aestest_fu_337_ap_rst assign process. --
    grp_aestest_fu_337_ap_rst_assign_proc : process(ap_rst_n)
    begin
                grp_aestest_fu_337_ap_rst <= not(ap_rst_n);
    end process;

    grp_aestest_fu_337_ap_start <= grp_aestest_fu_337_ap_start_ap_start_reg;

    -- grp_aestest_fu_337_inptext_V_read assign process. --
    grp_aestest_fu_337_inptext_V_read_assign_proc : process(ap_CS_fsm, tmp_35_reg_1421, p_1_s_fu_1012_p17, r_V_fu_1047_p2, t_V_fu_230, ap_sig_bdd_754, ap_sig_bdd_757)
    begin
        if ((ap_ST_st34_fsm_33 = ap_CS_fsm)) then
            if (not((tmp_35_reg_1421 = ap_const_lv1_0))) then 
                grp_aestest_fu_337_inptext_V_read <= r_V_fu_1047_p2;
            elsif (ap_sig_bdd_757) then 
                grp_aestest_fu_337_inptext_V_read <= t_V_fu_230;
            elsif (ap_sig_bdd_754) then 
                grp_aestest_fu_337_inptext_V_read <= p_1_s_fu_1012_p17;
            else 
                grp_aestest_fu_337_inptext_V_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_aestest_fu_337_inptext_V_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_aestest_fu_337_key_V_read <= key_local_V_0_s_reg_1509;
    grp_fu_395_p2 <= std_logic_vector(unsigned(t_V_fu_230) + unsigned(ap_const_lv128_lc_2));
    iterations_1_fu_1006_p2 <= std_logic_vector(unsigned(iterations_reg_325) + unsigned(ap_const_lv29_1));

    -- iv_V_ap_vld_in_sig assign process. --
    iv_V_ap_vld_in_sig_assign_proc : process(iv_V_ap_vld, iv_V_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = iv_V_ap_vld)) then 
            iv_V_ap_vld_in_sig <= iv_V_ap_vld;
        else 
            iv_V_ap_vld_in_sig <= iv_V_ap_vld_preg;
        end if; 
    end process;


    -- iv_V_in_sig assign process. --
    iv_V_in_sig_assign_proc : process(iv_V, iv_V_preg, iv_V_ap_vld)
    begin
        if ((ap_const_logic_1 = iv_V_ap_vld)) then 
            iv_V_in_sig <= iv_V;
        else 
            iv_V_in_sig <= iv_V_preg;
        end if; 
    end process;

    iv_local_V_s_fu_981_p17 <= (((((((((((((((tmp_332_reg_1266 & p_Result_6_1_reg_1276) & p_Result_6_2_reg_1286) & p_Result_6_3_reg_1296) & p_Result_6_4_reg_1306) & p_Result_6_5_reg_1316) & p_Result_6_6_reg_1326) & p_Result_6_7_reg_1336) & p_Result_6_8_reg_1346) & p_Result_6_9_reg_1356) & p_Result_6_s_reg_1366) & p_Result_6_10_reg_1376) & p_Result_6_11_reg_1386) & p_Result_6_12_reg_1396) & p_Result_6_13_reg_1406) & p_Result_6_14_reg_1416);

    -- key_in_V_ap_vld_in_sig assign process. --
    key_in_V_ap_vld_in_sig_assign_proc : process(key_in_V_ap_vld, key_in_V_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = key_in_V_ap_vld)) then 
            key_in_V_ap_vld_in_sig <= key_in_V_ap_vld;
        else 
            key_in_V_ap_vld_in_sig <= key_in_V_ap_vld_preg;
        end if; 
    end process;


    -- key_in_V_in_sig assign process. --
    key_in_V_in_sig_assign_proc : process(key_in_V, key_in_V_preg, key_in_V_ap_vld)
    begin
        if ((ap_const_logic_1 = key_in_V_ap_vld)) then 
            key_in_V_in_sig <= key_in_V;
        else 
            key_in_V_in_sig <= key_in_V_preg;
        end if; 
    end process;

    key_local_V_0_s_fu_961_p17 <= (((((((((((((((tmp_331_reg_1261 & p_Result_1_reg_1271) & p_Result_2_reg_1281) & p_Result_3_reg_1291) & p_Result_4_reg_1301) & p_Result_5_reg_1311) & p_Result_s_reg_1321) & p_Result_7_reg_1331) & p_Result_8_reg_1341) & p_Result_9_reg_1351) & p_Result_10_reg_1361) & p_Result_16_reg_1371) & p_Result_12_reg_1381) & p_Result_13_reg_1391) & p_Result_14_reg_1401) & p_Result_15_reg_1411);
    m_mm2s_ctl_ARADDR <= ap_const_lv32_0;
    m_mm2s_ctl_ARBURST <= ap_const_lv2_0;
    m_mm2s_ctl_ARCACHE <= ap_const_lv4_0;
    m_mm2s_ctl_ARID <= ap_const_lv1_0;
    m_mm2s_ctl_ARLEN <= ap_const_lv32_1;
    m_mm2s_ctl_ARLOCK <= ap_const_lv2_0;
    m_mm2s_ctl_ARPROT <= ap_const_lv3_0;
    m_mm2s_ctl_ARQOS <= ap_const_lv4_0;
    m_mm2s_ctl_ARREGION <= ap_const_lv4_0;
    m_mm2s_ctl_ARSIZE <= ap_const_lv3_0;
    m_mm2s_ctl_ARUSER <= ap_const_lv1_0;

    -- m_mm2s_ctl_ARVALID assign process. --
    m_mm2s_ctl_ARVALID_assign_proc : process(ap_start, ap_CS_fsm, ap_sig_bdd_503, ap_sig_bdd_610, ap_reg_ioackin_m_mm2s_ctl_ARREADY, ap_sig_bdd_2536)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY) and not(ap_sig_bdd_503)) or (not(ap_sig_bdd_610) and (ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY) and not(ap_sig_bdd_2536)) or (not(ap_sig_bdd_610) and (ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY)))) then 
            m_mm2s_ctl_ARVALID <= ap_const_logic_1;
        else 
            m_mm2s_ctl_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_mm2s_ctl_AWADDR assign process. --
    m_mm2s_ctl_AWADDR_assign_proc : process(ap_CS_fsm, ap_sig_bdd_610, ap_reg_ioackin_m_mm2s_ctl_AWREADY)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY))) then 
            m_mm2s_ctl_AWADDR <= ap_const_lv64_A(32 - 1 downto 0);
        elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY))) then 
            m_mm2s_ctl_AWADDR <= ap_const_lv64_6(32 - 1 downto 0);
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)))) then 
            m_mm2s_ctl_AWADDR <= ap_const_lv32_0;
        else 
            m_mm2s_ctl_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_mm2s_ctl_AWBURST <= ap_const_lv2_0;
    m_mm2s_ctl_AWCACHE <= ap_const_lv4_0;
    m_mm2s_ctl_AWID <= ap_const_lv1_0;
    m_mm2s_ctl_AWLEN <= ap_const_lv32_1;
    m_mm2s_ctl_AWLOCK <= ap_const_lv2_0;
    m_mm2s_ctl_AWPROT <= ap_const_lv3_0;
    m_mm2s_ctl_AWQOS <= ap_const_lv4_0;
    m_mm2s_ctl_AWREGION <= ap_const_lv4_0;
    m_mm2s_ctl_AWSIZE <= ap_const_lv3_0;
    m_mm2s_ctl_AWUSER <= ap_const_lv1_0;

    -- m_mm2s_ctl_AWVALID assign process. --
    m_mm2s_ctl_AWVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_610, ap_reg_ioackin_m_mm2s_ctl_AWREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)))) then 
            m_mm2s_ctl_AWVALID <= ap_const_logic_1;
        else 
            m_mm2s_ctl_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_mm2s_ctl_BREADY assign process. --
    m_mm2s_ctl_BREADY_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_m_mm2s_ctl_ARREADY, ap_sig_ioackin_m_s2mm_ctl_ARREADY, ap_sig_bdd_503, ap_sig_bdd_610, ap_sig_ioackin_m_mm2s_ctl_AWREADY, ap_sig_ioackin_m_mm2s_ctl_WREADY, ap_sig_ioackin_m_s2mm_ctl_AWREADY, ap_sig_ioackin_m_s2mm_ctl_WREADY, ap_sig_bdd_2536)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_503))) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_610 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_610 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_610)) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_610))) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2536))) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_610))))) then 
            m_mm2s_ctl_BREADY <= ap_const_logic_1;
        else 
            m_mm2s_ctl_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_mm2s_ctl_RREADY assign process. --
    m_mm2s_ctl_RREADY_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_m_mm2s_ctl_ARREADY, ap_sig_ioackin_m_s2mm_ctl_ARREADY, ap_sig_bdd_503, ap_sig_bdd_581, ap_sig_bdd_2536)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_503))) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and not(ap_sig_bdd_581)) or (not(ap_sig_bdd_581) and (ap_ST_st11_fsm_10 = ap_CS_fsm)) or (not(ap_sig_bdd_581) and (ap_ST_st14_fsm_13 = ap_CS_fsm)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2536))))) then 
            m_mm2s_ctl_RREADY <= ap_const_logic_1;
        else 
            m_mm2s_ctl_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_mm2s_ctl_WDATA assign process. --
    m_mm2s_ctl_WDATA_assign_proc : process(ap_CS_fsm, ap_sig_bdd_610, ap_reg_ioackin_m_mm2s_ctl_WREADY, tmp_28_fu_808_p4, tmp_30_fu_846_p3, tmp_31_fu_890_p4, read_length_fu_938_p3, sourceAddress_assign_fu_234)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY))) then 
            m_mm2s_ctl_WDATA <= read_length_fu_938_p3;
        elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY))) then 
            m_mm2s_ctl_WDATA <= sourceAddress_assign_fu_234;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY))) then 
            m_mm2s_ctl_WDATA <= tmp_31_fu_890_p4;
        elsif (((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY))) then 
            m_mm2s_ctl_WDATA <= tmp_30_fu_846_p3;
        elsif (((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY))) then 
            m_mm2s_ctl_WDATA <= tmp_28_fu_808_p4;
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)))) then 
            m_mm2s_ctl_WDATA <= ap_const_lv32_0;
        else 
            m_mm2s_ctl_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_mm2s_ctl_WID <= ap_const_lv1_0;
    m_mm2s_ctl_WLAST <= ap_const_logic_0;
    m_mm2s_ctl_WSTRB <= ap_const_lv4_F;
    m_mm2s_ctl_WUSER <= ap_const_lv1_0;

    -- m_mm2s_ctl_WVALID assign process. --
    m_mm2s_ctl_WVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_610, ap_reg_ioackin_m_mm2s_ctl_WREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)))) then 
            m_mm2s_ctl_WVALID <= ap_const_logic_1;
        else 
            m_mm2s_ctl_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_s2mm_ctl_ARADDR assign process. --
    m_s2mm_ctl_ARADDR_assign_proc : process(ap_start, ap_CS_fsm, m_s2mm_ctl_addr_reg_1245, ap_sig_bdd_503, ap_sig_bdd_610, ap_sig_bdd_2536, ap_reg_ioackin_m_s2mm_ctl_ARREADY)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(ap_sig_bdd_503) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_610) and (ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_2536) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_610) and (ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)))) then 
            m_s2mm_ctl_ARADDR <= m_s2mm_ctl_addr_reg_1245;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY))) then 
            m_s2mm_ctl_ARADDR <= ap_const_lv64_C(32 - 1 downto 0);
        else 
            m_s2mm_ctl_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_s2mm_ctl_ARBURST <= ap_const_lv2_0;
    m_s2mm_ctl_ARCACHE <= ap_const_lv4_0;
    m_s2mm_ctl_ARID <= ap_const_lv1_0;
    m_s2mm_ctl_ARLEN <= ap_const_lv32_1;
    m_s2mm_ctl_ARLOCK <= ap_const_lv2_0;
    m_s2mm_ctl_ARPROT <= ap_const_lv3_0;
    m_s2mm_ctl_ARQOS <= ap_const_lv4_0;
    m_s2mm_ctl_ARREGION <= ap_const_lv4_0;
    m_s2mm_ctl_ARSIZE <= ap_const_lv3_0;
    m_s2mm_ctl_ARUSER <= ap_const_lv1_0;

    -- m_s2mm_ctl_ARVALID assign process. --
    m_s2mm_ctl_ARVALID_assign_proc : process(ap_start, ap_CS_fsm, ap_sig_bdd_503, ap_sig_bdd_610, ap_sig_bdd_2536, ap_reg_ioackin_m_s2mm_ctl_ARREADY)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(ap_sig_bdd_503) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_610) and (ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_2536) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_610) and (ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)))) then 
            m_s2mm_ctl_ARVALID <= ap_const_logic_1;
        else 
            m_s2mm_ctl_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_s2mm_ctl_AWADDR assign process. --
    m_s2mm_ctl_AWADDR_assign_proc : process(ap_CS_fsm, m_s2mm_ctl_addr_reg_1245, ap_sig_bdd_610, ap_reg_ioackin_m_s2mm_ctl_AWREADY)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY))) then 
            m_s2mm_ctl_AWADDR <= ap_const_lv64_16(32 - 1 downto 0);
        elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY))) then 
            m_s2mm_ctl_AWADDR <= ap_const_lv64_12(32 - 1 downto 0);
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)))) then 
            m_s2mm_ctl_AWADDR <= m_s2mm_ctl_addr_reg_1245;
        else 
            m_s2mm_ctl_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_s2mm_ctl_AWBURST <= ap_const_lv2_0;
    m_s2mm_ctl_AWCACHE <= ap_const_lv4_0;
    m_s2mm_ctl_AWID <= ap_const_lv1_0;
    m_s2mm_ctl_AWLEN <= ap_const_lv32_1;
    m_s2mm_ctl_AWLOCK <= ap_const_lv2_0;
    m_s2mm_ctl_AWPROT <= ap_const_lv3_0;
    m_s2mm_ctl_AWQOS <= ap_const_lv4_0;
    m_s2mm_ctl_AWREGION <= ap_const_lv4_0;
    m_s2mm_ctl_AWSIZE <= ap_const_lv3_0;
    m_s2mm_ctl_AWUSER <= ap_const_lv1_0;

    -- m_s2mm_ctl_AWVALID assign process. --
    m_s2mm_ctl_AWVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_610, ap_reg_ioackin_m_s2mm_ctl_AWREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)))) then 
            m_s2mm_ctl_AWVALID <= ap_const_logic_1;
        else 
            m_s2mm_ctl_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_s2mm_ctl_BREADY assign process. --
    m_s2mm_ctl_BREADY_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_m_mm2s_ctl_ARREADY, ap_sig_ioackin_m_s2mm_ctl_ARREADY, ap_sig_bdd_503, ap_sig_bdd_610, ap_sig_ioackin_m_mm2s_ctl_AWREADY, ap_sig_ioackin_m_mm2s_ctl_WREADY, ap_sig_ioackin_m_s2mm_ctl_AWREADY, ap_sig_ioackin_m_s2mm_ctl_WREADY, ap_sig_bdd_2536)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_503))) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_610 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_610 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_610)) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_610))) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2536))) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_610))))) then 
            m_s2mm_ctl_BREADY <= ap_const_logic_1;
        else 
            m_s2mm_ctl_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_s2mm_ctl_RREADY assign process. --
    m_s2mm_ctl_RREADY_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_m_mm2s_ctl_ARREADY, ap_sig_ioackin_m_s2mm_ctl_ARREADY, ap_sig_bdd_503, ap_sig_bdd_581, ap_sig_bdd_2536)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_503))) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and not(ap_sig_bdd_581)) or (not(ap_sig_bdd_581) and (ap_ST_st11_fsm_10 = ap_CS_fsm)) or (not(ap_sig_bdd_581) and (ap_ST_st14_fsm_13 = ap_CS_fsm)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2536))))) then 
            m_s2mm_ctl_RREADY <= ap_const_logic_1;
        else 
            m_s2mm_ctl_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_s2mm_ctl_WDATA assign process. --
    m_s2mm_ctl_WDATA_assign_proc : process(ap_CS_fsm, ap_sig_bdd_610, read_length_fu_938_p3, ap_reg_ioackin_m_s2mm_ctl_WREADY, tmp_29_fu_817_p4, tmp_32_fu_854_p3, tmp_33_fu_899_p4, destinationAddress_assign_fu_238)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= read_length_fu_938_p3;
        elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= destinationAddress_assign_fu_238;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= tmp_33_fu_899_p4;
        elsif (((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= tmp_32_fu_854_p3;
        elsif (((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= tmp_29_fu_817_p4;
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)))) then 
            m_s2mm_ctl_WDATA <= ap_const_lv32_0;
        else 
            m_s2mm_ctl_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_s2mm_ctl_WID <= ap_const_lv1_0;
    m_s2mm_ctl_WLAST <= ap_const_logic_0;
    m_s2mm_ctl_WSTRB <= ap_const_lv4_F;
    m_s2mm_ctl_WUSER <= ap_const_lv1_0;

    -- m_s2mm_ctl_WVALID assign process. --
    m_s2mm_ctl_WVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_610, ap_reg_ioackin_m_s2mm_ctl_WREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_610) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)))) then 
            m_s2mm_ctl_WVALID <= ap_const_logic_1;
        else 
            m_s2mm_ctl_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_s2mm_ctl_addr_fu_418_p2 <= ap_const_lv64_C(32 - 1 downto 0);

    -- mode_ap_vld_in_sig assign process. --
    mode_ap_vld_in_sig_assign_proc : process(mode_ap_vld, mode_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = mode_ap_vld)) then 
            mode_ap_vld_in_sig <= mode_ap_vld;
        else 
            mode_ap_vld_in_sig <= mode_ap_vld_preg;
        end if; 
    end process;


    -- mode_in_sig assign process. --
    mode_in_sig_assign_proc : process(mode, mode_preg, mode_ap_vld)
    begin
        if ((ap_const_logic_1 = mode_ap_vld)) then 
            mode_in_sig <= mode;
        else 
            mode_in_sig <= mode_preg;
        end if; 
    end process;


    -- numBytes_ap_vld_in_sig assign process. --
    numBytes_ap_vld_in_sig_assign_proc : process(numBytes_ap_vld, numBytes_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = numBytes_ap_vld)) then 
            numBytes_ap_vld_in_sig <= numBytes_ap_vld;
        else 
            numBytes_ap_vld_in_sig <= numBytes_ap_vld_preg;
        end if; 
    end process;


    -- numBytes_in_sig assign process. --
    numBytes_in_sig_assign_proc : process(numBytes, numBytes_preg, numBytes_ap_vld)
    begin
        if ((ap_const_logic_1 = numBytes_ap_vld)) then 
            numBytes_in_sig <= numBytes;
        else 
            numBytes_in_sig <= numBytes_preg;
        end if; 
    end process;

    numIterations_fu_914_p2 <= std_logic_vector(unsigned(tmp_cast_fu_908_p1) + unsigned(tmp_27_cast_fu_911_p1));
    p_1_s_fu_1012_p17 <= (((((((((((((((tmp_360_reg_1527 & tmp_361_reg_1532) & tmp_362_reg_1537) & tmp_363_reg_1542) & tmp_364_reg_1547) & tmp_365_reg_1552) & tmp_366_reg_1557) & tmp_367_reg_1562) & tmp_368_reg_1567) & tmp_369_reg_1572) & tmp_370_reg_1577) & tmp_344_reg_1582) & tmp_345_reg_1587) & tmp_346_reg_1592) & tmp_347_reg_1597) & s_in_V_TDATA);
    r_V_1_fu_1054_p2 <= (p_1_s_reg_1602 xor reg_409);
    r_V_fu_1047_p2 <= (p_1_s_fu_1012_p17 xor storemerge_v_fu_1040_p3);
    read_length_fu_938_p3 <= (tmp_329_reg_1489 & ap_const_lv4_0);

    -- s_in_V_TREADY assign process. --
    s_in_V_TREADY_assign_proc : process(ap_CS_fsm, s_in_V_TVALID, exitcond_fu_1001_p2, ap_sig_bdd_652)
    begin
        if ((((ap_ST_st19_fsm_18 = ap_CS_fsm) and (exitcond_fu_1001_p2 = ap_const_lv1_0) and not(ap_sig_bdd_652)) or ((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((s_in_V_TVALID = ap_const_logic_0))) or (not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st21_fsm_20 = ap_CS_fsm)) or (not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st22_fsm_21 = ap_CS_fsm)) or (not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st23_fsm_22 = ap_CS_fsm)) or (not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st24_fsm_23 = ap_CS_fsm)) or (not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st25_fsm_24 = ap_CS_fsm)) or (not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st26_fsm_25 = ap_CS_fsm)) or (not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st27_fsm_26 = ap_CS_fsm)) or (not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st28_fsm_27 = ap_CS_fsm)) or (not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st29_fsm_28 = ap_CS_fsm)) or (not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st30_fsm_29 = ap_CS_fsm)) or (not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st31_fsm_30 = ap_CS_fsm)) or (not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st32_fsm_31 = ap_CS_fsm)) or (not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st33_fsm_32 = ap_CS_fsm)) or (not((s_in_V_TVALID = ap_const_logic_0)) and (ap_ST_st34_fsm_33 = ap_CS_fsm)))) then 
            s_in_V_TREADY <= ap_const_logic_1;
        else 
            s_in_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- s_out_V_TDATA assign process. --
    s_out_V_TDATA_assign_proc : process(ap_CS_fsm, temp_buffer_out_1_reg_1608, ap_sig_ioackin_s_out_V_TREADY, temp_buffer_out_2_reg_1613, temp_buffer_out_3_reg_1618, temp_buffer_out_4_reg_1623, temp_buffer_out_5_reg_1628, temp_buffer_out_6_reg_1633, temp_buffer_out_7_reg_1638, temp_buffer_out_8_reg_1643, temp_buffer_out_9_reg_1648, temp_buffer_out_10_reg_1653, tmp_14_reg_1658, tmp_15_reg_1663, tmp_16_reg_1668, tmp_17_reg_1673, tmp_349_reg_1678, rhs_V_fu_226)
    begin
        if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_TREADY))) then
            if ((ap_ST_st110_fsm_109 = ap_CS_fsm)) then 
                s_out_V_TDATA <= tmp_349_reg_1678;
            elsif ((ap_ST_st109_fsm_108 = ap_CS_fsm)) then 
                s_out_V_TDATA <= tmp_17_reg_1673;
            elsif ((ap_ST_st108_fsm_107 = ap_CS_fsm)) then 
                s_out_V_TDATA <= tmp_16_reg_1668;
            elsif ((ap_ST_st107_fsm_106 = ap_CS_fsm)) then 
                s_out_V_TDATA <= tmp_15_reg_1663;
            elsif ((ap_ST_st106_fsm_105 = ap_CS_fsm)) then 
                s_out_V_TDATA <= tmp_14_reg_1658;
            elsif ((ap_ST_st105_fsm_104 = ap_CS_fsm)) then 
                s_out_V_TDATA <= temp_buffer_out_10_reg_1653;
            elsif ((ap_ST_st104_fsm_103 = ap_CS_fsm)) then 
                s_out_V_TDATA <= temp_buffer_out_9_reg_1648;
            elsif ((ap_ST_st103_fsm_102 = ap_CS_fsm)) then 
                s_out_V_TDATA <= temp_buffer_out_8_reg_1643;
            elsif ((ap_ST_st102_fsm_101 = ap_CS_fsm)) then 
                s_out_V_TDATA <= temp_buffer_out_7_reg_1638;
            elsif ((ap_ST_st101_fsm_100 = ap_CS_fsm)) then 
                s_out_V_TDATA <= temp_buffer_out_6_reg_1633;
            elsif ((ap_ST_st100_fsm_99 = ap_CS_fsm)) then 
                s_out_V_TDATA <= temp_buffer_out_5_reg_1628;
            elsif ((ap_ST_st99_fsm_98 = ap_CS_fsm)) then 
                s_out_V_TDATA <= temp_buffer_out_4_reg_1623;
            elsif ((ap_ST_st98_fsm_97 = ap_CS_fsm)) then 
                s_out_V_TDATA <= temp_buffer_out_3_reg_1618;
            elsif ((ap_ST_st97_fsm_96 = ap_CS_fsm)) then 
                s_out_V_TDATA <= temp_buffer_out_2_reg_1613;
            elsif ((ap_ST_st96_fsm_95 = ap_CS_fsm)) then 
                s_out_V_TDATA <= temp_buffer_out_1_reg_1608;
            elsif ((ap_ST_st95_fsm_94 = ap_CS_fsm)) then 
                s_out_V_TDATA <= rhs_V_fu_226(127 downto 120);
            else 
                s_out_V_TDATA <= "XXXXXXXX";
            end if;
        else 
            s_out_V_TDATA <= "XXXXXXXX";
        end if; 
    end process;


    -- s_out_V_TVALID assign process. --
    s_out_V_TVALID_assign_proc : process(ap_CS_fsm, ap_reg_ioackin_s_out_V_TREADY)
    begin
        if ((((ap_ST_st95_fsm_94 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)) or ((ap_ST_st96_fsm_95 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)) or ((ap_ST_st97_fsm_96 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)) or ((ap_ST_st98_fsm_97 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)) or ((ap_ST_st99_fsm_98 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)) or ((ap_ST_st100_fsm_99 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)) or ((ap_ST_st101_fsm_100 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)) or ((ap_ST_st102_fsm_101 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)) or ((ap_ST_st103_fsm_102 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)) or ((ap_ST_st104_fsm_103 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)) or ((ap_ST_st105_fsm_104 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)) or ((ap_ST_st106_fsm_105 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)) or ((ap_ST_st107_fsm_106 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)) or ((ap_ST_st108_fsm_107 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)) or ((ap_ST_st109_fsm_108 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)) or ((ap_ST_st110_fsm_109 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_TREADY)))) then 
            s_out_V_TVALID <= ap_const_logic_1;
        else 
            s_out_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- sourceAddress_ap_vld_in_sig assign process. --
    sourceAddress_ap_vld_in_sig_assign_proc : process(sourceAddress_ap_vld, sourceAddress_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = sourceAddress_ap_vld)) then 
            sourceAddress_ap_vld_in_sig <= sourceAddress_ap_vld;
        else 
            sourceAddress_ap_vld_in_sig <= sourceAddress_ap_vld_preg;
        end if; 
    end process;


    -- sourceAddress_in_sig assign process. --
    sourceAddress_in_sig_assign_proc : process(sourceAddress, sourceAddress_preg, sourceAddress_ap_vld)
    begin
        if ((ap_const_logic_1 = sourceAddress_ap_vld)) then 
            sourceAddress_in_sig <= sourceAddress;
        else 
            sourceAddress_in_sig <= sourceAddress_preg;
        end if; 
    end process;

    storemerge_v_fu_1040_p3 <= 
        iv_local_V_s_reg_1514 when (tmp_36_fu_1034_p2(0) = '1') else 
        rhs_V_fu_226;
    tmp_26_fu_454_p2 <= "0" when (tmp_325_fu_450_p1 = ap_const_lv4_0) else "1";
    tmp_27_cast_fu_911_p1 <= std_logic_vector(resize(unsigned(tmp_26_reg_1256),29));
    tmp_28_fu_808_p4 <= ((tmp_s_reg_1429 & ap_const_lv1_1) & tmp_326_reg_1434);
    tmp_29_fu_817_p4 <= ((tmp_39_reg_1439 & ap_const_lv1_1) & tmp_327_reg_1444);
    tmp_30_fu_846_p3 <= (tmp_40_reg_1449 & ap_const_lv1_1);
    tmp_31_fu_890_p4 <= ((tmp_41_reg_1459 & ap_const_lv1_1) & tmp_328_reg_1464);
    tmp_325_fu_450_p1 <= numBytes_in_sig(4 - 1 downto 0);
    tmp_326_fu_790_p1 <= m_mm2s_ctl_RDATA(2 - 1 downto 0);
    tmp_327_fu_804_p1 <= m_s2mm_ctl_RDATA(2 - 1 downto 0);
    tmp_328_fu_872_p1 <= m_mm2s_ctl_RDATA(12 - 1 downto 0);
    tmp_329_fu_927_p1 <= numIterations_fu_914_p2(28 - 1 downto 0);
    tmp_32_fu_854_p3 <= (tmp_42_reg_1454 & ap_const_lv1_1);
    tmp_330_fu_886_p1 <= m_s2mm_ctl_RDATA(12 - 1 downto 0);
    tmp_331_fu_460_p1 <= key_in_V_in_sig(8 - 1 downto 0);
    tmp_332_fu_464_p1 <= iv_V_in_sig(8 - 1 downto 0);
    tmp_33_fu_899_p4 <= ((tmp_43_reg_1469 & ap_const_lv1_1) & tmp_330_reg_1474);
    tmp_349_fu_1215_p1 <= rhs_V_fu_226(8 - 1 downto 0);
    tmp_35_fu_768_p2 <= "1" when (mode_in_sig = ap_const_lv32_1) else "0";
    tmp_36_fu_1034_p2 <= "1" when (t_V_fu_230 = ap_const_lv128_lc_1) else "0";
    tmp_38_fu_774_p2 <= "1" when (mode_in_sig = ap_const_lv32_2) else "0";
    tmp_cast_fu_908_p1 <= std_logic_vector(resize(unsigned(tmp_reg_1251),29));
end behav;
