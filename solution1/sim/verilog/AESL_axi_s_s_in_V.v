// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module AESL_axi_s_s_in_V (
    clk,
    reset,
    TRAN_s_in_V_TDATA,
    TRAN_s_in_V_TVALID,
    TRAN_s_in_V_TREADY,
    ready,
    done
    );

//------------------------Parameter----------------------
`define TV_IN_s_in_V_TDATA "../tv/cdatafile/c.aes.autotvin_s_in_V.dat"
// Input and Output
input clk;
input reset;
output [127 : 0] TRAN_s_in_V_TDATA;
output  TRAN_s_in_V_TVALID;
input  TRAN_s_in_V_TREADY;
input ready;
input done;

//------------------------Local signal-------------------
reg [127 : 0] mem_s_in_V_TDATA [999 : 0];
initial begin : initialize_mem_s_in_V_TDATA
  integer i;
  for (i = 0; i < 1000; i = i + 1) begin
      mem_s_in_V_TDATA[i] = 0;
  end
end
wire s_in_V_TDATA_empty_n;
wire s_in_V_TDATA_full_n;
reg [11 : 0]  s_in_V_TDATA_mInPtr  =   0;
reg [11 : 0]  s_in_V_TDATA_mOutPtr =   0;
reg  s_in_V_TDATA_mFlag_nEF_hint;  // 0: empty hint, 1: full hint

assign TRAN_s_in_V_TDATA = mem_s_in_V_TDATA[s_in_V_TDATA_mOutPtr];
assign s_in_V_TDATA_empty_n	=	((s_in_V_TDATA_mInPtr == s_in_V_TDATA_mOutPtr) && s_in_V_TDATA_mFlag_nEF_hint == 1'b0)? 1'b 0: 1'b 1;
assign s_in_V_TDATA_full_n	=	((s_in_V_TDATA_mInPtr == s_in_V_TDATA_mOutPtr) && s_in_V_TDATA_mFlag_nEF_hint == 1'b1)? 1'b 0: 1'b 1;
// Inner signals
assign TRAN_s_in_V_TVALID = 1 & 
    s_in_V_TDATA_empty_n &
      1;
//------------------------Task and function--------------
task read_token;
	input integer fp;
  output reg [279 : 0] token;
	reg [7:0] c;
	reg intoken;
	reg done;
	begin
	    token = "";
	    intoken = 0;
	    done = 0;
	    while (!done) begin
		c = $fgetc(fp);
		if (c == 8'hff) begin	// EOF
		    done = 1;
		end
		else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank
		    if (intoken) begin
			done = 1;
		    end
		end
		else begin			// valid character
		    intoken = 1;
		    token = (token << 8) | c;
		end
	    end
	end
endtask

//------------------------Read-only axi_s-------------------

// Write operation for read_only axi_s port
initial begin : s_in_V_TDATA_read_file_process
  integer fp;
  integer err;
  integer ret;
  integer transaction_idx;
  reg [279 : 0] token;
  reg [ 8*5 : 1] str;
  s_in_V_TDATA_mInPtr = 0;
  s_in_V_TDATA_mFlag_nEF_hint = 0;
  transaction_idx = 0;
  fp = $fopen(`TV_IN_s_in_V_TDATA,"r");
  if(fp == 0) begin       // Failed to open file
	    $display("Failed to open file \"%s\"!", `TV_IN_s_in_V_TDATA);
	    $finish;
  end
  read_token(fp, token);
  if (token != "[[[runtime]]]") begin             // Illegal format
      $display("ERROR: Simulation using HLS TB failed.");
	    $finish;
  end
  read_token(fp, token);
  while (token != "[[[/runtime]]]") begin
      if (token != "[[transaction]]") begin
          $display("ERROR: Simulation using HLS TB failed.");
          $finish;
      end
      read_token(fp, token);              // skip transaction number

      @(posedge clk);
      # 0.2;
      while(ready !== 1) begin
          @(posedge clk);
          # 0.2;
      end
      read_token(fp,token);
      s_in_V_TDATA_mInPtr = 0;
      while(token != "[[/transaction]]") begin
          if (s_in_V_TDATA_mInPtr >= 1000 ) begin
              $display("Fifo overflow!");
  	        $finish;
          end
          ret = $sscanf(token, "0x%x", mem_s_in_V_TDATA[s_in_V_TDATA_mInPtr]);
          if (ret != 1) begin
              $display("Failed to parse token!");
              $finish;
          end
          s_in_V_TDATA_mInPtr = s_in_V_TDATA_mInPtr + 1;
          read_token(fp, token);
      end
      s_in_V_TDATA_mFlag_nEF_hint = 0;
      read_token(fp, token);
      transaction_idx = transaction_idx + 1;
  end
  $fclose(fp);
  @(posedge clk);
  # 0.2;
  while(ready !== 1) begin
  # 0.2;
      @(posedge clk);
  end
  s_in_V_TDATA_mFlag_nEF_hint = 1;
end

// Read operation for read_only axi_s signal s_in_V_TDATA
always @ (posedge clk) begin
    if (reset === 0) begin
      s_in_V_TDATA_mOutPtr = 0;
  end
  else if(TRAN_s_in_V_TVALID && TRAN_s_in_V_TREADY) begin
	    if(s_in_V_TDATA_mOutPtr < s_in_V_TDATA_mInPtr)
	        s_in_V_TDATA_mOutPtr <= s_in_V_TDATA_mOutPtr + 1;
  end
end

// Reset mOutPtr when done is pulled up
initial begin : done_reset_s_in_V_TDATA_mOutPtr_process
  while(1) begin
      @(posedge clk);
      # 0.1;
      while(ready !== 1) begin
          @(posedge clk);
          # 0.1;
      end
      s_in_V_TDATA_mOutPtr = 0;
  end
end

endmodule
