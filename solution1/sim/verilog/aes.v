// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aes,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module aes (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_mm2s_ctl_req_din,
        m_mm2s_ctl_req_full_n,
        m_mm2s_ctl_req_write,
        m_mm2s_ctl_rsp_empty_n,
        m_mm2s_ctl_rsp_read,
        m_mm2s_ctl_address,
        m_mm2s_ctl_datain,
        m_mm2s_ctl_dataout,
        m_mm2s_ctl_size,
        m_s2mm_ctl_req_din,
        m_s2mm_ctl_req_full_n,
        m_s2mm_ctl_req_write,
        m_s2mm_ctl_rsp_empty_n,
        m_s2mm_ctl_rsp_read,
        m_s2mm_ctl_address,
        m_s2mm_ctl_datain,
        m_s2mm_ctl_dataout,
        m_s2mm_ctl_size,
        sourceAddress,
        sourceAddress_ap_vld,
        key_in_V,
        key_in_V_ap_vld,
        destinationAddress,
        destinationAddress_ap_vld,
        length_r,
        length_r_ap_vld,
        finished,
        finished_ap_ack,
        s_in_V_TDATA,
        s_in_V_TVALID,
        s_in_V_TREADY,
        s_out_V_TDATA,
        s_out_V_TVALID,
        s_out_V_TREADY
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 6'b000000;
parameter    ap_ST_st2_fsm_1 = 6'b1;
parameter    ap_ST_st3_fsm_2 = 6'b10;
parameter    ap_ST_st4_fsm_3 = 6'b11;
parameter    ap_ST_st5_fsm_4 = 6'b100;
parameter    ap_ST_st6_fsm_5 = 6'b101;
parameter    ap_ST_st7_fsm_6 = 6'b110;
parameter    ap_ST_st8_fsm_7 = 6'b111;
parameter    ap_ST_st9_fsm_8 = 6'b1000;
parameter    ap_ST_st10_fsm_9 = 6'b1001;
parameter    ap_ST_st11_fsm_10 = 6'b1010;
parameter    ap_ST_st12_fsm_11 = 6'b1011;
parameter    ap_ST_st13_fsm_12 = 6'b1100;
parameter    ap_ST_st14_fsm_13 = 6'b1101;
parameter    ap_ST_st15_fsm_14 = 6'b1110;
parameter    ap_ST_st16_fsm_15 = 6'b1111;
parameter    ap_ST_st17_fsm_16 = 6'b10000;
parameter    ap_ST_st18_fsm_17 = 6'b10001;
parameter    ap_ST_st19_fsm_18 = 6'b10010;
parameter    ap_ST_st20_fsm_19 = 6'b10011;
parameter    ap_ST_st21_fsm_20 = 6'b10100;
parameter    ap_ST_st22_fsm_21 = 6'b10101;
parameter    ap_ST_st23_fsm_22 = 6'b10110;
parameter    ap_ST_st24_fsm_23 = 6'b10111;
parameter    ap_ST_st25_fsm_24 = 6'b11000;
parameter    ap_ST_st26_fsm_25 = 6'b11001;
parameter    ap_ST_st27_fsm_26 = 6'b11010;
parameter    ap_ST_st28_fsm_27 = 6'b11011;
parameter    ap_ST_st29_fsm_28 = 6'b11100;
parameter    ap_ST_st30_fsm_29 = 6'b11101;
parameter    ap_ST_st31_fsm_30 = 6'b11110;
parameter    ap_ST_st32_fsm_31 = 6'b11111;
parameter    ap_ST_st33_fsm_32 = 6'b100000;
parameter    ap_ST_st34_fsm_33 = 6'b100001;
parameter    ap_ST_st35_fsm_34 = 6'b100010;
parameter    ap_ST_st36_fsm_35 = 6'b100011;
parameter    ap_ST_st37_fsm_36 = 6'b100100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv128_lc_1 = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv64_C = 64'b1100;
parameter    ap_const_lv64_6 = 64'b110;
parameter    ap_const_lv64_12 = 64'b10010;
parameter    ap_const_lv64_A = 64'b1010;
parameter    ap_const_lv64_16 = 64'b10110;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_mm2s_ctl_req_din;
input   m_mm2s_ctl_req_full_n;
output   m_mm2s_ctl_req_write;
input   m_mm2s_ctl_rsp_empty_n;
output   m_mm2s_ctl_rsp_read;
output  [31:0] m_mm2s_ctl_address;
input  [31:0] m_mm2s_ctl_datain;
output  [31:0] m_mm2s_ctl_dataout;
output  [31:0] m_mm2s_ctl_size;
output   m_s2mm_ctl_req_din;
input   m_s2mm_ctl_req_full_n;
output   m_s2mm_ctl_req_write;
input   m_s2mm_ctl_rsp_empty_n;
output   m_s2mm_ctl_rsp_read;
output  [31:0] m_s2mm_ctl_address;
input  [31:0] m_s2mm_ctl_datain;
output  [31:0] m_s2mm_ctl_dataout;
output  [31:0] m_s2mm_ctl_size;
input  [31:0] sourceAddress;
input   sourceAddress_ap_vld;
input  [127:0] key_in_V;
input   key_in_V_ap_vld;
input  [31:0] destinationAddress;
input   destinationAddress_ap_vld;
input  [31:0] length_r;
input   length_r_ap_vld;
output   finished;
input   finished_ap_ack;
input  [127:0] s_in_V_TDATA;
input   s_in_V_TVALID;
output   s_in_V_TREADY;
output  [127:0] s_out_V_TDATA;
output   s_out_V_TVALID;
input   s_out_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_mm2s_ctl_req_din;
reg m_mm2s_ctl_req_write;
reg m_mm2s_ctl_rsp_read;
reg[31:0] m_mm2s_ctl_address;
reg[31:0] m_mm2s_ctl_dataout;
reg m_s2mm_ctl_req_din;
reg m_s2mm_ctl_req_write;
reg m_s2mm_ctl_rsp_read;
reg[31:0] m_s2mm_ctl_address;
reg[31:0] m_s2mm_ctl_dataout;
reg s_in_V_TREADY;
reg s_out_V_TVALID;
reg   [5:0] ap_CS_fsm = 6'b000000;
reg   [31:0] sourceAddress_in_sig;
reg   [31:0] sourceAddress_preg = 32'b00000000000000000000000000000000;
reg    sourceAddress_ap_vld_in_sig;
reg    sourceAddress_ap_vld_preg = 1'b0;
reg   [127:0] key_in_V_in_sig;
reg   [127:0] key_in_V_preg = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
reg    key_in_V_ap_vld_in_sig;
reg    key_in_V_ap_vld_preg = 1'b0;
reg   [31:0] destinationAddress_in_sig;
reg   [31:0] destinationAddress_preg = 32'b00000000000000000000000000000000;
reg    destinationAddress_ap_vld_in_sig;
reg    destinationAddress_ap_vld_preg = 1'b0;
reg   [31:0] length_r_in_sig;
reg   [31:0] length_r_preg = 32'b00000000000000000000000000000000;
reg    length_r_ap_vld_in_sig;
reg    length_r_ap_vld_preg = 1'b0;
wire   [31:0] m_s2mm_ctl_addr_fu_291_p2;
reg   [31:0] m_s2mm_ctl_addr_reg_448;
reg    ap_sig_bdd_143;
reg   [30:0] tmp_s_reg_465;
reg   [30:0] tmp_40_reg_470;
reg   [18:0] tmp_39_reg_475;
reg    ap_sig_bdd_156;
wire   [11:0] tmp_325_fu_354_p1;
reg   [11:0] tmp_325_reg_480;
reg   [18:0] tmp_41_reg_485;
wire   [11:0] tmp_327_fu_368_p1;
reg   [11:0] tmp_327_reg_490;
wire   [31:0] output_offset_fu_430_p2;
reg   [31:0] output_offset_reg_498;
wire   [0:0] exitcond_fu_425_p2;
reg    ap_sig_ioackin_finished_ap_ack;
reg    grp_aestest_fu_235_ap_rst;
wire    grp_aestest_fu_235_ap_start;
wire    grp_aestest_fu_235_ap_done;
wire    grp_aestest_fu_235_ap_idle;
wire    grp_aestest_fu_235_ap_ready;
reg    grp_aestest_fu_235_ap_ce;
wire   [127:0] grp_aestest_fu_235_inptext_V_read;
wire   [127:0] grp_aestest_fu_235_key_V_read;
wire   [127:0] grp_aestest_fu_235_ap_return;
reg    ap_sig_ioackin_s_out_V_TREADY;
reg   [31:0] iterations_reg_223;
reg    ap_sig_bdd_251;
reg    grp_aestest_fu_235_ap_start_ap_start_reg = 1'b0;
reg   [5:0] ap_NS_fsm;
wire   [31:0] m_mm2s_ctl_assign_fu_328_p3;
wire   [31:0] m_mm2s_ctl_assign_1_fu_372_p4;
wire   [31:0] read_length_fu_404_p2;
wire   [31:0] tmp_fu_336_p3;
wire   [31:0] tmp_1_fu_381_p4;
reg   [31:0] sourceAddress_assign_fu_140;
reg   [31:0] destinationAddress_assign_fu_144;
reg    ap_reg_ioackin_finished_ap_ack = 1'b0;
reg    ap_reg_ioackin_s_out_V_TREADY = 1'b0;
reg    ap_sig_bdd_1771;


aestest grp_aestest_fu_235(
    .ap_clk( ap_clk ),
    .ap_rst( grp_aestest_fu_235_ap_rst ),
    .ap_start( grp_aestest_fu_235_ap_start ),
    .ap_done( grp_aestest_fu_235_ap_done ),
    .ap_idle( grp_aestest_fu_235_ap_idle ),
    .ap_ready( grp_aestest_fu_235_ap_ready ),
    .ap_ce( grp_aestest_fu_235_ap_ce ),
    .inptext_V_read( grp_aestest_fu_235_inptext_V_read ),
    .key_V_read( grp_aestest_fu_235_key_V_read ),
    .ap_return( grp_aestest_fu_235_ap_return )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_finished_ap_ack assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_finished_ap_ack
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_finished_ap_ack <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_1771) begin
            if (~(~(exitcond_fu_425_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_finished_ap_ack))) begin
                ap_reg_ioackin_finished_ap_ack <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == finished_ap_ack)) begin
                ap_reg_ioackin_finished_ap_ack <= ap_const_logic_1;
            end
        end
    end
end

/// ap_reg_ioackin_s_out_V_TREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_s_out_V_TREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_s_out_V_TREADY <= ap_const_logic_0;
    end else begin
        if ((ap_ST_st37_fsm_36 == ap_CS_fsm)) begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_s_out_V_TREADY)) begin
                ap_reg_ioackin_s_out_V_TREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == s_out_V_TREADY)) begin
                ap_reg_ioackin_s_out_V_TREADY <= ap_const_logic_1;
            end
        end
    end
end

/// destinationAddress_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_destinationAddress_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        destinationAddress_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~(exitcond_fu_425_p2 == ap_const_lv1_0) & ~(~(exitcond_fu_425_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_finished_ap_ack)))) begin
            destinationAddress_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == destinationAddress_ap_vld))) begin
            destinationAddress_ap_vld_preg <= destinationAddress_ap_vld;
        end
    end
end

/// destinationAddress_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_destinationAddress_preg
    if (ap_rst_n == 1'b0) begin
        destinationAddress_preg <= ap_const_lv32_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == destinationAddress_ap_vld))) begin
            destinationAddress_preg <= destinationAddress;
        end
    end
end

/// grp_aestest_fu_235_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_aestest_fu_235_ap_start_ap_start_reg
    if (ap_rst_n == 1'b0) begin
        grp_aestest_fu_235_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st17_fsm_16 == ap_CS_fsm) & (ap_ST_st18_fsm_17 == ap_NS_fsm))) begin
            grp_aestest_fu_235_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_aestest_fu_235_ap_ready)) begin
            grp_aestest_fu_235_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// key_in_V_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_key_in_V_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        key_in_V_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~(exitcond_fu_425_p2 == ap_const_lv1_0) & ~(~(exitcond_fu_425_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_finished_ap_ack)))) begin
            key_in_V_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == key_in_V_ap_vld))) begin
            key_in_V_ap_vld_preg <= key_in_V_ap_vld;
        end
    end
end

/// key_in_V_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_key_in_V_preg
    if (ap_rst_n == 1'b0) begin
        key_in_V_preg <= ap_const_lv128_lc_1;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == key_in_V_ap_vld))) begin
            key_in_V_preg <= key_in_V;
        end
    end
end

/// length_r_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_length_r_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        length_r_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~(exitcond_fu_425_p2 == ap_const_lv1_0) & ~(~(exitcond_fu_425_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_finished_ap_ack)))) begin
            length_r_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == length_r_ap_vld))) begin
            length_r_ap_vld_preg <= length_r_ap_vld;
        end
    end
end

/// length_r_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_length_r_preg
    if (ap_rst_n == 1'b0) begin
        length_r_preg <= ap_const_lv32_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == length_r_ap_vld))) begin
            length_r_preg <= length_r;
        end
    end
end

/// sourceAddress_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_sourceAddress_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        sourceAddress_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~(exitcond_fu_425_p2 == ap_const_lv1_0) & ~(~(exitcond_fu_425_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_finished_ap_ack)))) begin
            sourceAddress_ap_vld_preg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == sourceAddress_ap_vld) & ~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)))) begin
            sourceAddress_ap_vld_preg <= sourceAddress_ap_vld;
        end
    end
end

/// sourceAddress_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_sourceAddress_preg
    if (ap_rst_n == 1'b0) begin
        sourceAddress_preg <= ap_const_lv32_0;
    end else begin
        if (((ap_const_logic_1 == sourceAddress_ap_vld) & ~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)))) begin
            sourceAddress_preg <= sourceAddress;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st37_fsm_36 == ap_CS_fsm) & ~(ap_const_logic_0 == ap_sig_ioackin_s_out_V_TREADY))) begin
        iterations_reg_223 <= output_offset_reg_498;
    end else if (((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_251)) begin
        iterations_reg_223 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st6_fsm_5 == ap_CS_fsm) & ~ap_sig_bdd_143)) begin
        destinationAddress_assign_fu_144 <= destinationAddress_in_sig;
        sourceAddress_assign_fu_140 <= sourceAddress_in_sig;
        tmp_40_reg_470 <= {{m_s2mm_ctl_datain[ap_const_lv32_1F : ap_const_lv32_1]}};
        tmp_s_reg_465 <= {{m_mm2s_ctl_datain[ap_const_lv32_1F : ap_const_lv32_1]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~(~(exitcond_fu_425_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_finished_ap_ack)))) begin
        output_offset_reg_498 <= output_offset_fu_430_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st13_fsm_12 == ap_CS_fsm) & ~ap_sig_bdd_156)) begin
        tmp_325_reg_480 <= tmp_325_fu_354_p1;
        tmp_327_reg_490 <= tmp_327_fu_368_p1;
        tmp_39_reg_475 <= {{m_mm2s_ctl_datain[ap_const_lv32_1F : ap_const_lv32_D]}};
        tmp_41_reg_485 <= {{m_s2mm_ctl_datain[ap_const_lv32_1F : ap_const_lv32_D]}};
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or exitcond_fu_425_p2 or ap_sig_ioackin_finished_ap_ack)
begin
    if (((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~(exitcond_fu_425_p2 == ap_const_lv1_0) & ~(~(exitcond_fu_425_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_finished_ap_ack)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond_fu_425_p2 or ap_sig_ioackin_finished_ap_ack)
begin
    if (((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~(exitcond_fu_425_p2 == ap_const_lv1_0) & ~(~(exitcond_fu_425_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_finished_ap_ack)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_finished_ap_ack assign process. ///
always @ (finished_ap_ack or ap_reg_ioackin_finished_ap_ack)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_finished_ap_ack)) begin
        ap_sig_ioackin_finished_ap_ack = finished_ap_ack;
    end else begin
        ap_sig_ioackin_finished_ap_ack = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_s_out_V_TREADY assign process. ///
always @ (s_out_V_TREADY or ap_reg_ioackin_s_out_V_TREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_s_out_V_TREADY)) begin
        ap_sig_ioackin_s_out_V_TREADY = s_out_V_TREADY;
    end else begin
        ap_sig_ioackin_s_out_V_TREADY = ap_const_logic_1;
    end
end

/// destinationAddress_ap_vld_in_sig assign process. ///
always @ (destinationAddress_ap_vld or destinationAddress_ap_vld_preg)
begin
    if ((ap_const_logic_1 == destinationAddress_ap_vld)) begin
        destinationAddress_ap_vld_in_sig = destinationAddress_ap_vld;
    end else begin
        destinationAddress_ap_vld_in_sig = destinationAddress_ap_vld_preg;
    end
end

/// destinationAddress_in_sig assign process. ///
always @ (destinationAddress or destinationAddress_preg or destinationAddress_ap_vld)
begin
    if ((ap_const_logic_1 == destinationAddress_ap_vld)) begin
        destinationAddress_in_sig = destinationAddress;
    end else begin
        destinationAddress_in_sig = destinationAddress_preg;
    end
end

/// grp_aestest_fu_235_ap_ce assign process. ///
always @ (ap_CS_fsm or s_in_V_TVALID or ap_sig_ioackin_s_out_V_TREADY)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) | (ap_ST_st6_fsm_5 == ap_CS_fsm) | (ap_ST_st13_fsm_12 == ap_CS_fsm) | (ap_ST_st17_fsm_16 == ap_CS_fsm) | ((s_in_V_TVALID == ap_const_logic_0) & (ap_ST_st18_fsm_17 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_sig_ioackin_s_out_V_TREADY) & (ap_ST_st37_fsm_36 == ap_CS_fsm)) | (ap_ST_st2_fsm_1 == ap_CS_fsm) | (ap_ST_st3_fsm_2 == ap_CS_fsm) | (ap_ST_st4_fsm_3 == ap_CS_fsm) | (ap_ST_st5_fsm_4 == ap_CS_fsm) | (ap_ST_st7_fsm_6 == ap_CS_fsm) | (ap_ST_st8_fsm_7 == ap_CS_fsm) | (ap_ST_st9_fsm_8 == ap_CS_fsm) | (ap_ST_st10_fsm_9 == ap_CS_fsm) | (ap_ST_st11_fsm_10 == ap_CS_fsm) | (ap_ST_st12_fsm_11 == ap_CS_fsm) | (ap_ST_st14_fsm_13 == ap_CS_fsm) | (ap_ST_st15_fsm_14 == ap_CS_fsm) | (ap_ST_st16_fsm_15 == ap_CS_fsm))) begin
        grp_aestest_fu_235_ap_ce = ap_const_logic_0;
    end else begin
        grp_aestest_fu_235_ap_ce = ap_const_logic_1;
    end
end

/// key_in_V_ap_vld_in_sig assign process. ///
always @ (key_in_V_ap_vld or key_in_V_ap_vld_preg)
begin
    if ((ap_const_logic_1 == key_in_V_ap_vld)) begin
        key_in_V_ap_vld_in_sig = key_in_V_ap_vld;
    end else begin
        key_in_V_ap_vld_in_sig = key_in_V_ap_vld_preg;
    end
end

/// key_in_V_in_sig assign process. ///
always @ (key_in_V or key_in_V_preg or key_in_V_ap_vld)
begin
    if ((ap_const_logic_1 == key_in_V_ap_vld)) begin
        key_in_V_in_sig = key_in_V;
    end else begin
        key_in_V_in_sig = key_in_V_preg;
    end
end

/// length_r_ap_vld_in_sig assign process. ///
always @ (length_r_ap_vld or length_r_ap_vld_preg)
begin
    if ((ap_const_logic_1 == length_r_ap_vld)) begin
        length_r_ap_vld_in_sig = length_r_ap_vld;
    end else begin
        length_r_ap_vld_in_sig = length_r_ap_vld_preg;
    end
end

/// length_r_in_sig assign process. ///
always @ (length_r or length_r_preg or length_r_ap_vld)
begin
    if ((ap_const_logic_1 == length_r_ap_vld)) begin
        length_r_in_sig = length_r;
    end else begin
        length_r_in_sig = length_r_preg;
    end
end

/// m_mm2s_ctl_address assign process. ///
always @ (ap_start or ap_CS_fsm or ap_sig_bdd_251)
begin
    if (((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_251)) begin
        m_mm2s_ctl_address = ap_const_lv64_A;
    end else if (((ap_ST_st15_fsm_14 == ap_CS_fsm) & ~ap_sig_bdd_251)) begin
        m_mm2s_ctl_address = ap_const_lv64_6;
    end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | (ap_ST_st8_fsm_7 == ap_CS_fsm) | ((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_251) | ((ap_ST_st14_fsm_13 == ap_CS_fsm) & ~ap_sig_bdd_251))) begin
        m_mm2s_ctl_address = ap_const_lv32_0;
    end else begin
        m_mm2s_ctl_address = 'bx;
    end
end

/// m_mm2s_ctl_dataout assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_251 or m_mm2s_ctl_assign_fu_328_p3 or m_mm2s_ctl_assign_1_fu_372_p4 or read_length_fu_404_p2 or sourceAddress_assign_fu_140)
begin
    if (~ap_sig_bdd_251) begin
        if ((ap_ST_st16_fsm_15 == ap_CS_fsm)) begin
            m_mm2s_ctl_dataout = read_length_fu_404_p2;
        end else if ((ap_ST_st15_fsm_14 == ap_CS_fsm)) begin
            m_mm2s_ctl_dataout = sourceAddress_assign_fu_140;
        end else if ((ap_ST_st14_fsm_13 == ap_CS_fsm)) begin
            m_mm2s_ctl_dataout = m_mm2s_ctl_assign_1_fu_372_p4;
        end else if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
            m_mm2s_ctl_dataout = m_mm2s_ctl_assign_fu_328_p3;
        end else begin
            m_mm2s_ctl_dataout = 'bx;
        end
    end else begin
        m_mm2s_ctl_dataout = 'bx;
    end
end

/// m_mm2s_ctl_req_din assign process. ///
always @ (ap_start or ap_CS_fsm or ap_sig_bdd_251)
begin
    if ((((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_251) | ((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_251) | ((ap_ST_st14_fsm_13 == ap_CS_fsm) & ~ap_sig_bdd_251) | ((ap_ST_st15_fsm_14 == ap_CS_fsm) & ~ap_sig_bdd_251))) begin
        m_mm2s_ctl_req_din = ap_const_logic_1;
    end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | (ap_ST_st8_fsm_7 == ap_CS_fsm))) begin
        m_mm2s_ctl_req_din = ap_const_logic_0;
    end else begin
        m_mm2s_ctl_req_din = ap_const_logic_0;
    end
end

/// m_mm2s_ctl_req_write assign process. ///
always @ (ap_start or ap_CS_fsm or ap_sig_bdd_251)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | (ap_ST_st8_fsm_7 == ap_CS_fsm) | ((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_251) | ((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_251) | ((ap_ST_st14_fsm_13 == ap_CS_fsm) & ~ap_sig_bdd_251) | ((ap_ST_st15_fsm_14 == ap_CS_fsm) & ~ap_sig_bdd_251))) begin
        m_mm2s_ctl_req_write = ap_const_logic_1;
    end else begin
        m_mm2s_ctl_req_write = ap_const_logic_0;
    end
end

/// m_mm2s_ctl_rsp_read assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_143 or ap_sig_bdd_156)
begin
    if ((((ap_ST_st6_fsm_5 == ap_CS_fsm) & ~ap_sig_bdd_143) | ((ap_ST_st13_fsm_12 == ap_CS_fsm) & ~ap_sig_bdd_156))) begin
        m_mm2s_ctl_rsp_read = ap_const_logic_1;
    end else begin
        m_mm2s_ctl_rsp_read = ap_const_logic_0;
    end
end

/// m_s2mm_ctl_address assign process. ///
always @ (ap_start or ap_CS_fsm or m_s2mm_ctl_addr_reg_448 or ap_sig_bdd_251)
begin
    if (((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_251)) begin
        m_s2mm_ctl_address = ap_const_lv64_16;
    end else if (((ap_ST_st15_fsm_14 == ap_CS_fsm) & ~ap_sig_bdd_251)) begin
        m_s2mm_ctl_address = ap_const_lv64_12;
    end else if (((ap_ST_st8_fsm_7 == ap_CS_fsm) | ((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_251) | ((ap_ST_st14_fsm_13 == ap_CS_fsm) & ~ap_sig_bdd_251))) begin
        m_s2mm_ctl_address = m_s2mm_ctl_addr_reg_448;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        m_s2mm_ctl_address = ap_const_lv64_C;
    end else begin
        m_s2mm_ctl_address = 'bx;
    end
end

/// m_s2mm_ctl_dataout assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_251 or read_length_fu_404_p2 or tmp_fu_336_p3 or tmp_1_fu_381_p4 or destinationAddress_assign_fu_144)
begin
    if (~ap_sig_bdd_251) begin
        if ((ap_ST_st16_fsm_15 == ap_CS_fsm)) begin
            m_s2mm_ctl_dataout = read_length_fu_404_p2;
        end else if ((ap_ST_st15_fsm_14 == ap_CS_fsm)) begin
            m_s2mm_ctl_dataout = destinationAddress_assign_fu_144;
        end else if ((ap_ST_st14_fsm_13 == ap_CS_fsm)) begin
            m_s2mm_ctl_dataout = tmp_1_fu_381_p4;
        end else if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
            m_s2mm_ctl_dataout = tmp_fu_336_p3;
        end else begin
            m_s2mm_ctl_dataout = 'bx;
        end
    end else begin
        m_s2mm_ctl_dataout = 'bx;
    end
end

/// m_s2mm_ctl_req_din assign process. ///
always @ (ap_start or ap_CS_fsm or ap_sig_bdd_251)
begin
    if ((((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_251) | ((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_251) | ((ap_ST_st14_fsm_13 == ap_CS_fsm) & ~ap_sig_bdd_251) | ((ap_ST_st15_fsm_14 == ap_CS_fsm) & ~ap_sig_bdd_251))) begin
        m_s2mm_ctl_req_din = ap_const_logic_1;
    end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | (ap_ST_st8_fsm_7 == ap_CS_fsm))) begin
        m_s2mm_ctl_req_din = ap_const_logic_0;
    end else begin
        m_s2mm_ctl_req_din = ap_const_logic_0;
    end
end

/// m_s2mm_ctl_req_write assign process. ///
always @ (ap_start or ap_CS_fsm or ap_sig_bdd_251)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | (ap_ST_st8_fsm_7 == ap_CS_fsm) | ((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~ap_sig_bdd_251) | ((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_251) | ((ap_ST_st14_fsm_13 == ap_CS_fsm) & ~ap_sig_bdd_251) | ((ap_ST_st15_fsm_14 == ap_CS_fsm) & ~ap_sig_bdd_251))) begin
        m_s2mm_ctl_req_write = ap_const_logic_1;
    end else begin
        m_s2mm_ctl_req_write = ap_const_logic_0;
    end
end

/// m_s2mm_ctl_rsp_read assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_143 or ap_sig_bdd_156)
begin
    if ((((ap_ST_st6_fsm_5 == ap_CS_fsm) & ~ap_sig_bdd_143) | ((ap_ST_st13_fsm_12 == ap_CS_fsm) & ~ap_sig_bdd_156))) begin
        m_s2mm_ctl_rsp_read = ap_const_logic_1;
    end else begin
        m_s2mm_ctl_rsp_read = ap_const_logic_0;
    end
end

/// s_in_V_TREADY assign process. ///
always @ (ap_CS_fsm or s_in_V_TVALID)
begin
    if (((ap_ST_st18_fsm_17 == ap_CS_fsm) & ~(s_in_V_TVALID == ap_const_logic_0))) begin
        s_in_V_TREADY = ap_const_logic_1;
    end else begin
        s_in_V_TREADY = ap_const_logic_0;
    end
end

/// s_out_V_TVALID assign process. ///
always @ (ap_CS_fsm or ap_reg_ioackin_s_out_V_TREADY)
begin
    if (((ap_ST_st37_fsm_36 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_s_out_V_TREADY))) begin
        s_out_V_TVALID = ap_const_logic_1;
    end else begin
        s_out_V_TVALID = ap_const_logic_0;
    end
end

/// sourceAddress_ap_vld_in_sig assign process. ///
always @ (sourceAddress_ap_vld or sourceAddress_ap_vld_preg)
begin
    if ((ap_const_logic_1 == sourceAddress_ap_vld)) begin
        sourceAddress_ap_vld_in_sig = sourceAddress_ap_vld;
    end else begin
        sourceAddress_ap_vld_in_sig = sourceAddress_ap_vld_preg;
    end
end

/// sourceAddress_in_sig assign process. ///
always @ (sourceAddress or sourceAddress_preg or sourceAddress_ap_vld)
begin
    if ((ap_const_logic_1 == sourceAddress_ap_vld)) begin
        sourceAddress_in_sig = sourceAddress;
    end else begin
        sourceAddress_in_sig = sourceAddress_preg;
    end
end
always @ (ap_start or ap_CS_fsm or s_in_V_TVALID or ap_sig_bdd_143 or ap_sig_bdd_156 or exitcond_fu_425_p2 or ap_sig_ioackin_finished_ap_ack or ap_sig_ioackin_s_out_V_TREADY or ap_sig_bdd_251)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
        ap_ST_st6_fsm_5 : 
            if (~ap_sig_bdd_143) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        ap_ST_st7_fsm_6 : 
            if (~ap_sig_bdd_251) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        ap_ST_st8_fsm_7 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
        ap_ST_st9_fsm_8 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
        ap_ST_st10_fsm_9 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
        ap_ST_st11_fsm_10 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
        ap_ST_st12_fsm_11 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
        ap_ST_st13_fsm_12 : 
            if (~ap_sig_bdd_156) begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end else begin
                ap_NS_fsm = ap_ST_st13_fsm_12;
            end
        ap_ST_st14_fsm_13 : 
            if (~ap_sig_bdd_251) begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end else begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end
        ap_ST_st15_fsm_14 : 
            if (~ap_sig_bdd_251) begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end else begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end
        ap_ST_st16_fsm_15 : 
            if (~ap_sig_bdd_251) begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end else begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end
        ap_ST_st17_fsm_16 : 
            if ((~(exitcond_fu_425_p2 == ap_const_lv1_0) & ~(~(exitcond_fu_425_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_finished_ap_ack)))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((exitcond_fu_425_p2 == ap_const_lv1_0) & ~(~(exitcond_fu_425_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_finished_ap_ack)))) begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end else begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end
        ap_ST_st18_fsm_17 : 
            if (~(s_in_V_TVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end else begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end
        ap_ST_st19_fsm_18 : 
            ap_NS_fsm = ap_ST_st20_fsm_19;
        ap_ST_st20_fsm_19 : 
            ap_NS_fsm = ap_ST_st21_fsm_20;
        ap_ST_st21_fsm_20 : 
            ap_NS_fsm = ap_ST_st22_fsm_21;
        ap_ST_st22_fsm_21 : 
            ap_NS_fsm = ap_ST_st23_fsm_22;
        ap_ST_st23_fsm_22 : 
            ap_NS_fsm = ap_ST_st24_fsm_23;
        ap_ST_st24_fsm_23 : 
            ap_NS_fsm = ap_ST_st25_fsm_24;
        ap_ST_st25_fsm_24 : 
            ap_NS_fsm = ap_ST_st26_fsm_25;
        ap_ST_st26_fsm_25 : 
            ap_NS_fsm = ap_ST_st27_fsm_26;
        ap_ST_st27_fsm_26 : 
            ap_NS_fsm = ap_ST_st28_fsm_27;
        ap_ST_st28_fsm_27 : 
            ap_NS_fsm = ap_ST_st29_fsm_28;
        ap_ST_st29_fsm_28 : 
            ap_NS_fsm = ap_ST_st30_fsm_29;
        ap_ST_st30_fsm_29 : 
            ap_NS_fsm = ap_ST_st31_fsm_30;
        ap_ST_st31_fsm_30 : 
            ap_NS_fsm = ap_ST_st32_fsm_31;
        ap_ST_st32_fsm_31 : 
            ap_NS_fsm = ap_ST_st33_fsm_32;
        ap_ST_st33_fsm_32 : 
            ap_NS_fsm = ap_ST_st34_fsm_33;
        ap_ST_st34_fsm_33 : 
            ap_NS_fsm = ap_ST_st35_fsm_34;
        ap_ST_st35_fsm_34 : 
            ap_NS_fsm = ap_ST_st36_fsm_35;
        ap_ST_st36_fsm_35 : 
            ap_NS_fsm = ap_ST_st37_fsm_36;
        ap_ST_st37_fsm_36 : 
            if (~(ap_const_logic_0 == ap_sig_ioackin_s_out_V_TREADY)) begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end else begin
                ap_NS_fsm = ap_ST_st37_fsm_36;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end

/// ap_sig_bdd_143 assign process. ///
always @ (m_mm2s_ctl_rsp_empty_n or m_s2mm_ctl_rsp_empty_n or sourceAddress_ap_vld_in_sig or key_in_V_ap_vld_in_sig or destinationAddress_ap_vld_in_sig or length_r_ap_vld_in_sig)
begin
    ap_sig_bdd_143 = ((length_r_ap_vld_in_sig == ap_const_logic_0) | (destinationAddress_ap_vld_in_sig == ap_const_logic_0) | (sourceAddress_ap_vld_in_sig == ap_const_logic_0) | (key_in_V_ap_vld_in_sig == ap_const_logic_0) | (m_mm2s_ctl_rsp_empty_n == ap_const_logic_0) | (m_s2mm_ctl_rsp_empty_n == ap_const_logic_0));
end

/// ap_sig_bdd_156 assign process. ///
always @ (m_mm2s_ctl_rsp_empty_n or m_s2mm_ctl_rsp_empty_n)
begin
    ap_sig_bdd_156 = ((m_mm2s_ctl_rsp_empty_n == ap_const_logic_0) | (m_s2mm_ctl_rsp_empty_n == ap_const_logic_0));
end

/// ap_sig_bdd_1771 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_425_p2)
begin
    ap_sig_bdd_1771 = ((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~(exitcond_fu_425_p2 == ap_const_lv1_0));
end

/// ap_sig_bdd_251 assign process. ///
always @ (m_mm2s_ctl_req_full_n or m_s2mm_ctl_req_full_n)
begin
    ap_sig_bdd_251 = ((m_mm2s_ctl_req_full_n == ap_const_logic_0) | (m_s2mm_ctl_req_full_n == ap_const_logic_0));
end
assign exitcond_fu_425_p2 = (iterations_reg_223 == length_r_in_sig? 1'b1: 1'b0);
assign finished = ap_const_lv1_1;

/// grp_aestest_fu_235_ap_rst assign process. ///
always @ (ap_rst_n)
begin
    grp_aestest_fu_235_ap_rst = ~ap_rst_n;
end
assign grp_aestest_fu_235_ap_start = grp_aestest_fu_235_ap_start_ap_start_reg;
assign grp_aestest_fu_235_inptext_V_read = s_in_V_TDATA;
assign grp_aestest_fu_235_key_V_read = key_in_V_in_sig;
assign m_mm2s_ctl_assign_1_fu_372_p4 = {{{tmp_39_reg_475}, {ap_const_lv1_1}}, {tmp_325_reg_480}};
assign m_mm2s_ctl_assign_fu_328_p3 = {{tmp_s_reg_465}, {ap_const_lv1_1}};
assign m_mm2s_ctl_size = ap_const_lv32_1;
assign m_s2mm_ctl_addr_fu_291_p2 = ap_const_lv64_C;
assign m_s2mm_ctl_size = ap_const_lv32_1;
assign output_offset_fu_430_p2 = (iterations_reg_223 + ap_const_lv32_1);
assign read_length_fu_404_p2 = length_r_in_sig << ap_const_lv32_4;
assign s_out_V_TDATA = grp_aestest_fu_235_ap_return;
assign tmp_1_fu_381_p4 = {{{tmp_41_reg_485}, {ap_const_lv1_1}}, {tmp_327_reg_490}};
assign tmp_325_fu_354_p1 = m_mm2s_ctl_datain[11:0];
assign tmp_327_fu_368_p1 = m_s2mm_ctl_datain[11:0];
assign tmp_fu_336_p3 = {{tmp_40_reg_470}, {ap_const_lv1_1}};
always @ (posedge ap_clk)
begin
    m_s2mm_ctl_addr_reg_448[31:0] <= 32'b00000000000000000000000000001100;
end



endmodule //aes

