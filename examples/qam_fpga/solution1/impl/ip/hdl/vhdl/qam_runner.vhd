-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity qam_runner is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_MM2S_CTL_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_MM2S_CTL_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_MM2S_CTL_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_S2MM_CTL_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_S2MM_CTL_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_S2MM_CTL_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_M_S2MM_CTL_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_MM2S_CTL_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_M_MM2S_CTL_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_M_S2MM_CTL_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_M_MM2S_CTL_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_MM2S_CTL_PROT_VALUE : INTEGER := 0 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_AWVALID : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_AWREADY : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ADDR_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_mm2s_ctl_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_mm2s_ctl_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_mm2s_ctl_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_AWUSER_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_WVALID : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_WREADY : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_DATA_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_DATA_WIDTH/8-1 downto 0);
    m_axi_m_mm2s_ctl_WLAST : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_WUSER_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_ARVALID : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_ARREADY : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ADDR_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_mm2s_ctl_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_mm2s_ctl_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_mm2s_ctl_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ARUSER_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_RVALID : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_RREADY : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_DATA_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_RLAST : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_RUSER_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_BVALID : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_BREADY : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_BUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_AWVALID : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_AWREADY : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ADDR_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_s2mm_ctl_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_s2mm_ctl_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_s2mm_ctl_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_AWUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_WVALID : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_WREADY : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_DATA_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_DATA_WIDTH/8-1 downto 0);
    m_axi_m_s2mm_ctl_WLAST : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_WUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_ARVALID : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_ARREADY : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ADDR_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_s2mm_ctl_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_s2mm_ctl_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_s2mm_ctl_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ARUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_RVALID : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_RREADY : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_DATA_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_RLAST : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_RUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_BVALID : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_BREADY : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_BUSER_WIDTH-1 downto 0);
    s_in_V_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    s_in_V_V_TVALID : IN STD_LOGIC;
    s_in_V_V_TREADY : OUT STD_LOGIC;
    s_out_V_V_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    s_out_V_V_TVALID : OUT STD_LOGIC;
    s_out_V_V_TREADY : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of qam_runner is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "qam_runner,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv28_8000000 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_9 : STD_LOGIC_VECTOR (8 downto 0) := "000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1F7 : STD_LOGIC_VECTOR (8 downto 0) := "111110111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_1A : STD_LOGIC_VECTOR (11 downto 0) := "000000011010";
    constant ap_const_lv12_FE6 : STD_LOGIC_VECTOR (11 downto 0) := "111111100110";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_1C : STD_LOGIC_VECTOR (11 downto 0) := "000000011100";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv54_3FFFFFFFFFFFFF : STD_LOGIC_VECTOR (53 downto 0) := "111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv28_FFFFFFF : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111111111111111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv12_D : STD_LOGIC_VECTOR (11 downto 0) := "000000001101";
    constant ap_const_lv12_FF3 : STD_LOGIC_VECTOR (11 downto 0) := "111111110011";
    constant ap_const_lv28_7FFFFFF : STD_LOGIC_VECTOR (27 downto 0) := "0111111111111111111111111111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv14_1FFF : STD_LOGIC_VECTOR (13 downto 0) := "01111111111111";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv19_7FFFF : STD_LOGIC_VECTOR (18 downto 0) := "1111111111111111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_FFFFFFE9 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv23_17 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_82 : STD_LOGIC_VECTOR (7 downto 0) := "10000010";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_ready : STD_LOGIC;
    signal sourceAddress : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddress_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddress_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sourceAddress_ap_vld : STD_LOGIC;
    signal sourceAddress_ap_vld_in_sig : STD_LOGIC;
    signal sourceAddress_ap_vld_preg : STD_LOGIC := '0';
    signal destinationAddress : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal destinationAddress_ap_vld : STD_LOGIC;
    signal destinationAddress_ap_vld_in_sig : STD_LOGIC;
    signal destinationAddress_ap_vld_preg : STD_LOGIC := '0';
    signal iterations : STD_LOGIC_VECTOR (31 downto 0);
    signal iterations_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iterations_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iterations_ap_vld : STD_LOGIC;
    signal iterations_ap_vld_in_sig : STD_LOGIC;
    signal iterations_ap_vld_preg : STD_LOGIC := '0';
    signal control_in_qam : STD_LOGIC_VECTOR (31 downto 0);
    signal control_in_qam_ap_vld : STD_LOGIC;
    signal control_in_lf_p : STD_LOGIC_VECTOR (7 downto 0);
    signal control_in_lf_p_in_sig : STD_LOGIC_VECTOR (7 downto 0);
    signal control_in_lf_p_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal control_in_lf_p_ap_vld : STD_LOGIC;
    signal control_in_lf_p_ap_vld_in_sig : STD_LOGIC;
    signal control_in_lf_p_ap_vld_preg : STD_LOGIC := '0';
    signal control_in_lf_i : STD_LOGIC_VECTOR (7 downto 0);
    signal control_in_lf_i_in_sig : STD_LOGIC_VECTOR (7 downto 0);
    signal control_in_lf_i_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal control_in_lf_i_ap_vld : STD_LOGIC;
    signal control_in_lf_i_ap_vld_in_sig : STD_LOGIC;
    signal control_in_lf_i_ap_vld_preg : STD_LOGIC := '0';
    signal control_in_lf_out_gain : STD_LOGIC_VECTOR (7 downto 0);
    signal control_in_lf_out_gain_in_sig : STD_LOGIC_VECTOR (7 downto 0);
    signal control_in_lf_out_gain_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal control_in_lf_out_gain_ap_vld : STD_LOGIC;
    signal control_in_lf_out_gain_ap_vld_in_sig : STD_LOGIC;
    signal control_in_lf_out_gain_ap_vld_preg : STD_LOGIC := '0';
    signal control_in_reg_clr : STD_LOGIC;
    signal control_in_reg_clr_in_sig : STD_LOGIC;
    signal control_in_reg_clr_preg : STD_LOGIC := '0';
    signal control_in_reg_clr_ap_vld : STD_LOGIC;
    signal control_in_reg_clr_ap_vld_in_sig : STD_LOGIC;
    signal control_in_reg_clr_ap_vld_preg : STD_LOGIC := '0';
    signal control_in_reg_init : STD_LOGIC_VECTOR (31 downto 0);
    signal control_in_reg_init_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal control_in_reg_init_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal control_in_reg_init_ap_vld : STD_LOGIC;
    signal control_in_reg_init_ap_vld_in_sig : STD_LOGIC;
    signal control_in_reg_init_ap_vld_preg : STD_LOGIC := '0';
    signal i_reg_V : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    signal phase_angle_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal cos_lut_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal cos_lut_ce0 : STD_LOGIC;
    signal cos_lut_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal cos_lut_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal cos_lut_ce1 : STD_LOGIC;
    signal cos_lut_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_AWVALID : STD_LOGIC;
    signal m_mm2s_ctl_AWREADY : STD_LOGIC;
    signal m_mm2s_ctl_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mm2s_ctl_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mm2s_ctl_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_WVALID : STD_LOGIC;
    signal m_mm2s_ctl_WREADY : STD_LOGIC;
    signal m_mm2s_ctl_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_WLAST : STD_LOGIC;
    signal m_mm2s_ctl_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_ARVALID : STD_LOGIC;
    signal m_mm2s_ctl_ARREADY : STD_LOGIC;
    signal m_mm2s_ctl_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mm2s_ctl_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mm2s_ctl_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_RVALID : STD_LOGIC;
    signal m_mm2s_ctl_RREADY : STD_LOGIC;
    signal m_mm2s_ctl_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_RLAST : STD_LOGIC;
    signal m_mm2s_ctl_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_BVALID : STD_LOGIC;
    signal m_mm2s_ctl_BREADY : STD_LOGIC;
    signal m_mm2s_ctl_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_AWVALID : STD_LOGIC;
    signal m_s2mm_ctl_AWREADY : STD_LOGIC;
    signal m_s2mm_ctl_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal m_s2mm_ctl_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal m_s2mm_ctl_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_WVALID : STD_LOGIC;
    signal m_s2mm_ctl_WREADY : STD_LOGIC;
    signal m_s2mm_ctl_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_WLAST : STD_LOGIC;
    signal m_s2mm_ctl_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_ARVALID : STD_LOGIC;
    signal m_s2mm_ctl_ARREADY : STD_LOGIC;
    signal m_s2mm_ctl_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal m_s2mm_ctl_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal m_s2mm_ctl_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_RVALID : STD_LOGIC;
    signal m_s2mm_ctl_RREADY : STD_LOGIC;
    signal m_s2mm_ctl_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_RLAST : STD_LOGIC;
    signal m_s2mm_ctl_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_BVALID : STD_LOGIC;
    signal m_s2mm_ctl_BREADY : STD_LOGIC;
    signal m_s2mm_ctl_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_addr_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_addr_reg_3740 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_mm2s_ctl_ARREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_s2mm_ctl_ARREADY : STD_LOGIC;
    signal ap_sig_bdd_467 : BOOLEAN;
    signal control_in_reg_clr_read_read_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_3787 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_2_reg_3793 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_3799 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_sig_bdd_493 : BOOLEAN;
    signal tmp_15_fu_499_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_reg_3804 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_reg_3809 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_21_fu_513_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_21_reg_3814 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_29_reg_3819 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_37_reg_3824 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_31_reg_3829 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_34_fu_581_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_34_reg_3834 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_44_reg_3839 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_45_fu_595_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_45_reg_3844 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_bdd_522 : BOOLEAN;
    signal ap_sig_ioackin_m_mm2s_ctl_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_mm2s_ctl_WREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_s2mm_ctl_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_s2mm_ctl_WREADY : STD_LOGIC;
    signal ireg_V_2_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_2_reg_3869 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_3876 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_this_assign_fu_666_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_this_assign_reg_3882 : STD_LOGIC_VECTOR (27 downto 0);
    signal sel_tmp34_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp34_reg_3887 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_i_cast1_fu_696_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sh_assign_1_i_cast1_reg_3892 : STD_LOGIC_VECTOR (27 downto 0);
    signal sh_assign_1_i_cast_fu_700_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_i_cast_reg_3897 : STD_LOGIC_VECTOR (31 downto 0);
    signal isNeg_1_fu_713_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_1_reg_3902 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_3_i_cast1_fu_735_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sh_assign_2_fu_727_p3_temp: signed (9-1 downto 0);
    signal sh_assign_3_i_cast1_reg_3907 : STD_LOGIC_VECTOR (27 downto 0);
    signal sh_assign_3_i_cast_fu_739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_3_i_cast_reg_3912 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_5_i_cast1_fu_759_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sh_assign_5_i_cast1_reg_3917 : STD_LOGIC_VECTOR (27 downto 0);
    signal sh_assign_5_i_cast_fu_763_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_5_i_cast_reg_3922 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_3930 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_590 : BOOLEAN;
    signal v_assign_fu_798_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal isneg_12_fu_808_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_12_reg_3945 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_17_fu_855_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_17_reg_3952 : STD_LOGIC_VECTOR (53 downto 0);
    signal F2_2_fu_863_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_2_reg_3960 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_40_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_reg_3967 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_2_fu_887_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_2_reg_3972 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_43_fu_895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_reg_3979 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_119_fu_901_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_119_reg_3985 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_57_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_reg_3991 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp25_fu_991_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sel_tmp25_reg_3997 : STD_LOGIC_VECTOR (27 downto 0);
    signal sel_tmp27_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp27_reg_4002 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_reg_4007 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_1043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_reg_4014 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_fu_1068_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_reg_4019 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_127_reg_4026 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_1082_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_reg_4031 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_reg_4037 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_reg_4042 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_fu_1121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_reg_4047 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_reg_4052 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_reg_4058 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_reg_4063 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_1186_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_62_reg_4069 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_8_fu_1190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_4074 : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_fu_1196_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_4080 : STD_LOGIC_VECTOR (11 downto 0);
    signal isneg_1_reg_4088 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_fu_1232_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_112_reg_4094 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_24_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_4099 : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_1_fu_1242_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_1_reg_4105 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_4_fu_1255_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_4_reg_4113 : STD_LOGIC_VECTOR (27 downto 0);
    signal neg_src_fu_1353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_src_reg_4120 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_reg_4126 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge92_demorgan_i_fu_1381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge92_demorgan_i_reg_4132 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_fu_1443_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_78_reg_4138 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_1447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_4143 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_fu_1479_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_90_reg_4149 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_100_fu_1493_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_100_reg_4154 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp2_fu_1502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_4159 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_1519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_reg_4164 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_1537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_reg_4170 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_fu_1599_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_113_reg_4175 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_1603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_reg_4180 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_115_fu_1635_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_115_reg_4186 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_116_fu_1649_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_116_reg_4191 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp10_fu_1658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_reg_4196 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_fu_1675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_reg_4201 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp15_fu_1693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp15_reg_4207 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_5_fu_1768_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_5_reg_4212 : STD_LOGIC_VECTOR (27 downto 0);
    signal newSel3_fu_1834_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel3_reg_4217 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel7_fu_1900_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel7_reg_4222 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_fu_1934_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_6_reg_4227 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_68_reg_4232 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_9_fu_1956_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_9_reg_4237 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_111_reg_4242 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_61_reg_4247 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_63_reg_4254 : STD_LOGIC_VECTOR (15 downto 0);
    signal isneg_13_reg_4261 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_reg_4270 : STD_LOGIC_VECTOR (4 downto 0);
    signal brmerge_i1_i_fu_2074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i1_i_reg_4276 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i1_i_fu_2092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i1_i_reg_4281 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_14_reg_4286 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_14_reg_4295 : STD_LOGIC_VECTOR (4 downto 0);
    signal brmerge_i_i1_fu_2140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_reg_4301 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_i_fu_2158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_i_reg_4306 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_132_reg_4311 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_133_reg_4316 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_15_reg_4321 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_35_reg_4327 : STD_LOGIC_VECTOR (13 downto 0);
    signal newsignbit_3_reg_4333 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i1_reg_4339 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_36_fu_2430_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_36_reg_4345 : STD_LOGIC_VECTOR (13 downto 0);
    signal isneg_16_reg_4350 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_38_reg_4356 : STD_LOGIC_VECTOR (13 downto 0);
    signal newsignbit_4_reg_4362 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_reg_4368 : STD_LOGIC_VECTOR (1 downto 0);
    signal ph_est_V_fu_2597_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ph_est_V_reg_4374 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_43_fu_2637_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_43_reg_4379 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_42_fu_2670_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_42_reg_4384 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_25_i_fu_2766_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_25_i_reg_4389 : STD_LOGIC_VECTOR (27 downto 0);
    signal msb_V_reg_4395 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_144_reg_4402 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_adr_V_reg_4408 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_65_reg_4425 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_67_reg_4431 : STD_LOGIC_VECTOR (11 downto 0);
    signal isneg_18_reg_4437 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_19_reg_4444 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_3055_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_reg_4451 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_15_fu_3069_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_15_reg_4456 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_71_fu_3094_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_reg_4461 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_145_fu_3102_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_145_reg_4467 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_81_fu_3106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_reg_4472 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_16_fu_3120_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_16_reg_4477 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_82_fu_3145_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_reg_4482 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_147_fu_3153_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_147_reg_4488 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_91_fu_3157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_91_reg_4493 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_17_fu_3171_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_V_17_reg_4498 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_92_fu_3196_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_reg_4503 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_150_fu_3204_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_150_reg_4509 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_101_fu_3208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_101_reg_4514 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_18_fu_3222_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_V_18_reg_4519 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_102_fu_3247_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_102_reg_4524 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_153_fu_3255_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_153_reg_4530 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_72_fu_3264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_reg_4535 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_3295_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_s_reg_4540 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_88_cast_fu_3320_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_88_cast_reg_4545 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_83_fu_3333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_reg_4550 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_3364_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_8_reg_4555 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_101_cast_fu_3389_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_101_cast_reg_4560 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_93_fu_3402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_reg_4565 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_fu_3433_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Result_20_reg_4570 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_114_cast_fu_3458_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_114_cast_reg_4575 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_103_fu_3471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_103_reg_4580 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_25_fu_3502_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Result_25_reg_4585 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_127_cast_fu_3527_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_127_cast_reg_4590 : STD_LOGIC_VECTOR (22 downto 0);
    signal i_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_s_out_V_V_TREADY : STD_LOGIC;
    signal tmp_34_i_fu_2888_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_i_fu_2893_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_mm2s_ctl_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_mm2s_ctl_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_mm2s_ctl_WREADY : STD_LOGIC := '0';
    signal m_mm2s_ctl_assign_fu_517_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_947 : BOOLEAN;
    signal tmp_1_fu_555_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_599_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_length_fu_631_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_s2mm_ctl_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_s2mm_ctl_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_s2mm_ctl_WREADY : STD_LOGIC := '0';
    signal tmp_fu_526_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_563_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_608_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_47_fu_2676_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_s_fu_322 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_1_fu_326 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_ioackin_s_out_V_V_TREADY : STD_LOGIC := '0';
    signal grp_fu_460_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_463_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_656_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_10_i_fu_683_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_i_cast_fu_680_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal control_in_lf_p_in_sig_temp: signed (8-1 downto 0);
    signal tmp_10_i_fu_683_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_689_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_689_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_707_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_i_cast_fu_704_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal control_in_lf_i_in_sig_temp: signed (8-1 downto 0);
    signal sh_assign_1_fu_707_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_i_fu_721_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_i_fu_721_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_fu_727_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_26_i_fu_746_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_1_i_cast_fu_743_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal control_in_lf_out_gain_in_sig_temp: signed (8-1 downto 0);
    signal tmp_26_i_fu_746_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_fu_752_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_fu_752_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal first_r_V_fu_778_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal second_r_V_fu_788_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal exp_tmp_V_2_fu_815_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_824_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_118_fu_834_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_38_fu_837_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_30_fu_845_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_7_fu_849_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_41_fu_875_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_42_fu_881_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_V_fu_828_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_51_fu_924_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_amt_2_cast_fu_911_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_amt_2_reg_3972_temp: signed (12-1 downto 0);
    signal tmp_51_fu_924_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_52_fu_928_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_55_fu_940_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_reg_3985_temp: signed (28-1 downto 0);
    signal tmp_55_fu_940_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_940_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp19_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp20_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_120_fu_933_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sel_tmp18_fu_950_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sel_tmp23_fu_980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp24_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_123_fu_946_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sel_tmp22_fu_972_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sel_tmp26_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos1_fu_1011_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pos2_fu_1020_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_125_fu_1035_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_1049_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos1_fu_1011_p2_temp: signed (12-1 downto 0);
    signal tmp_59_fu_1049_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_60_fu_1053_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal lD_fu_1058_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_1062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_1088_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos2_fu_1020_p2_temp: signed (12-1 downto 0);
    signal tmp_63_fu_1088_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal Range2_V_1_fu_1092_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal r_V_fu_1097_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sel_tmp28_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_not_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_1115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp30_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ireg_V_fu_1156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_1172_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_56_fu_1160_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_3_fu_1182_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_1_fu_1202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_1_fu_1218_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_110_fu_1206_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_22_fu_1228_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_2_fu_1248_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal rev1_fu_1269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond88_i_fu_1274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_1_i_fu_1279_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_1295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp31_fu_1309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp29_fu_1305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond89_i_fu_1286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp33_fu_1321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_93_i_fu_1300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp32_fu_1313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_1290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp35_fu_1334_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_fu_1261_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp36_fu_1348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_0_i_fu_1326_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_0_not_i_fu_1358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_fu_1364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_fu_1370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_0_i_fu_1340_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_1387_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_28_fu_1394_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_1398_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_9_fu_1411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1416_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_fu_1421_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_1426_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_1404_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_80_fu_1453_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_1469_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_amt_cast_fu_1434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_amt_fu_1426_p3_temp: signed (12-1 downto 0);
    signal tmp_16_fu_1469_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_17_fu_1473_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_20_fu_1487_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_fu_1443_p1_temp: signed (16-1 downto 0);
    signal tmp_20_fu_1487_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_1487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_1497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_1508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_1513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_demorgan_fu_1525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_1463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_1531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_1543_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_29_fu_1550_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_4_fu_1554_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_25_fu_1567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1572_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_fu_1577_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_1_fu_1582_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_5_fu_1560_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_114_fu_1609_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_fu_1625_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_amt_1_cast_fu_1590_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_amt_1_fu_1582_p3_temp: signed (12-1 downto 0);
    signal tmp_32_fu_1625_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_33_fu_1629_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_36_fu_1643_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_fu_1599_p1_temp: signed (16-1 downto 0);
    signal tmp_36_fu_1643_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_1643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_1594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_1653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp30_demorgan_fu_1664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_fu_1669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp38_demorgan_fu_1681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_fu_1619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_fu_1687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge92_i_fu_1699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sign_assign_not_fu_1714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_1719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_1709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_1736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp93_demorgan_fu_1747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp37_fu_1741_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal brmerge_fu_1724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp67_fu_1758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp39_fu_1763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal this_assign_mux_fu_1729_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sel_tmp38_fu_1751_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sel_tmp4_fu_1787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_1792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_1776_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp8_fu_1783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_1804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_1797_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel1_fu_1809_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_cond1_fu_1815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_1828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel2_fu_1820_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp16_fu_1853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp17_fu_1858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_fu_1842_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp13_fu_1849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_fu_1870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel4_fu_1863_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel5_fu_1875_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_cond4_fu_1881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond5_fu_1894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel6_fu_1886_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_fu_1921_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal OP1_V_fu_1914_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal newSel3_reg_4217_temp: signed (16-1 downto 0);
    signal p_Val2_5_fu_1921_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal OP2_V_fu_1917_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_s_fu_322_temp: signed (12-1 downto 0);
    signal p_Val2_6_fu_1934_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal OP1_V_1_fu_1927_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal newSel7_reg_4222_temp: signed (16-1 downto 0);
    signal p_Val2_6_fu_1934_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal OP2_V_1_fu_1930_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_1_fu_326_temp: signed (12-1 downto 0);
    signal p_Val2_5_fu_1921_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_8_fu_1950_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_8_fu_1950_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_9_fu_1956_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_9_fu_1956_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_8_fu_1950_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_1_i_i_fu_1972_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_7_fu_1986_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_1_i_i_fu_1972_p3_temp: signed (27-1 downto 0);
    signal tmp_2_i_i_fu_1983_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_7_fu_1986_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_i_i_fu_2002_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_10_fu_2016_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_i_i_fu_2002_p3_temp: signed (27-1 downto 0);
    signal tmp_7_i_i_fu_2013_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_10_fu_2016_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Result_i_fu_2058_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal newsignbit_1_fu_2050_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i1_i_fu_2068_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i1_i_fu_2086_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i1_i_fu_2080_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_i_fu_2124_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal newsignbit_2_fu_2116_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_2134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_i_fu_2152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_i_fu_2146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_fu_2164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_2174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_2169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_i_fu_2184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_i_fu_2178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge8_i_fu_2190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_34_mux_i_fu_2196_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_i_fu_2203_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_i_fu_2218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_2228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_2_fu_2223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_not_i_fu_2238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_2232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_i_fu_2244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_36_mux_i_fu_2250_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_1_i_fu_2257_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal clip_i_V_fu_2210_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal clip_q_V_fu_2264_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i_fu_2288_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Result_31_fu_2295_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_32_fu_2314_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_32_fu_2314_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_32_fu_2314_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_not_i_i1_fu_2356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i2_fu_2361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_fu_2366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_i1_fu_2382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_i1_fu_2377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_i1_fu_2387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_2393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_3_fu_2371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_i1_fu_2404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i1_fu_2398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i1_fu_2410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_47_mux_i_fu_2416_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_i1_fu_2423_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_i_fu_2438_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Result_32_fu_2445_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_11_fu_2464_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_11_fu_2464_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_i_fu_2470_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_37_fu_2481_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_6_i_fu_2470_p3_temp: signed (19-1 downto 0);
    signal p_Val2_11_fu_2464_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_37_fu_2481_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_not_i_i_i_fu_2523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i4_i_fu_2528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i1_fu_2533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_i_i_fu_2549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_i_i_fu_2544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_i_i_fu_2554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_4_fu_2560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_4_fu_2538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_4_not_i_fu_2571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_i_fu_2565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_i_fu_2577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ssdm_int_14_1024_0_true_V_write_assign_fu_2583_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_2_i_fu_2590_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_i2_fu_2605_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_12_i_fu_2616_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_i_fu_2612_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_fu_2605_p3_temp: signed (28-1 downto 0);
    signal tmp_14_i_fu_2621_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_12_i_fu_2616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_i_cast_fu_2626_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_0_i_i121_in_i_fu_2630_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_i_fu_2641_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_i_fu_2646_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_18_i_fu_2641_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_i_cast_fu_2651_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_in_i_fu_2655_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_40_fu_2662_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_47_fu_2676_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_44_fu_2694_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_43_reg_4379_temp: signed (28-1 downto 0);
    signal p_Val2_44_fu_2694_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_42_reg_4384_temp: signed (28-1 downto 0);
    signal p_Val2_44_fu_2694_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal newsignbit_5_fu_2712_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_17_fu_2700_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_i_fu_2720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_i_fu_2738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i2_fu_2732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_45_fu_2708_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal underflow_5_fu_2726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i2_fu_2744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_54_mux_i_fu_2750_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_i2_fu_2758_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_28_i_fu_2777_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_i_reg_4389_temp: signed (28-1 downto 0);
    signal tmp_30_i_fu_2782_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_28_i_fu_2777_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_i_cast_fu_2786_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_0_i_i129_in_i_fu_2790_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_i_fu_2805_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_51_fu_2797_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_52_fu_2821_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_31_i_fu_2805_p3_temp: signed (27-1 downto 0);
    signal tmp_32_i_fu_2817_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_52_fu_2821_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal cos_adr_V_3_fu_2871_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal cos_adr_V_fu_2876_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sin_adr_V_1_fu_2882_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sin_out_V_4_i_cast_fu_2902_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal cos_out_V_4_i_cast_fu_2898_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_i_fu_2906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_i_fu_2911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_demorgan_i_fu_2933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_i_fu_2916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i_fu_2939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_i_fu_2945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_out_V_fu_2927_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp6_i_fu_2959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_i_fu_2965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_out_V_1_fu_2951_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sin_out_V_fu_2921_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_cond6_fu_2987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel8_fu_2979_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel9_fu_2993_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal cos_out_V_6_fu_2971_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sin_out_V_5_fu_3001_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_1_fu_3063_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_fu_3060_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_61_reg_4247_temp: signed (16-1 downto 0);
    signal tmp_V_1_fu_3063_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_15_fu_3069_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_33_fu_3076_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_34_fu_3086_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_3_fu_3114_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_2_fu_3111_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_63_reg_4254_temp: signed (16-1 downto 0);
    signal tmp_V_3_fu_3114_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_16_fu_3120_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_37_fu_3127_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_38_fu_3137_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_5_fu_3165_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_V_4_fu_3162_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_65_reg_4425_temp: signed (12-1 downto 0);
    signal tmp_V_5_fu_3165_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_V_17_fu_3171_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Result_41_fu_3178_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Result_42_fu_3188_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_7_fu_3216_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_V_6_fu_3213_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_67_reg_4431_temp: signed (12-1 downto 0);
    signal tmp_V_7_fu_3216_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_V_18_fu_3222_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Result_45_fu_3229_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Result_46_fu_3239_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_3259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_fu_3269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_3275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_fu_3281_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_fu_3289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_146_fu_3310_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_77_fu_3304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_3314_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal j_1_fu_3328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_3338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_3344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_fu_3350_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_fu_3358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_148_fu_3379_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_88_fu_3373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_fu_3383_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal j_2_fu_3397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_94_fu_3407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_95_fu_3413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_fu_3419_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_fu_3427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_151_fu_3448_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_98_fu_3442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_fu_3452_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal j_3_fu_3466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_fu_3476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_105_fu_3482_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_106_fu_3488_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_107_fu_3496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_154_fu_3517_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_108_fu_3511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_109_fu_3521_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Repl2_2_trunc_fu_3535_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal man_V_18_fu_3552_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_s_reg_4540_temp: signed (17-1 downto 0);
    signal man_V_18_fu_3552_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_35_fu_3540_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_36_fu_3557_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_6_trunc_fu_3573_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal man_V_19_fu_3590_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_8_reg_4555_temp: signed (17-1 downto 0);
    signal man_V_19_fu_3590_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_39_fu_3578_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_40_fu_3595_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_10_trunc_fu_3611_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal man_V_20_fu_3628_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_20_reg_4570_temp: signed (13-1 downto 0);
    signal man_V_20_fu_3628_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_43_fu_3616_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_44_fu_3633_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_14_trunc_fu_3649_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal man_V_21_fu_3666_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_25_reg_4585_temp: signed (13-1 downto 0);
    signal man_V_21_fu_3666_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_47_fu_3654_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_48_fu_3671_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_V_fu_3566_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_V_5_fu_3604_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_V_8_fu_3642_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_V_11_fu_3680_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_11_fu_3687_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_10_fu_3694_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_9_fu_3701_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_8_fu_3708_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_460_ce : STD_LOGIC;
    signal grp_fu_463_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component qam_runner_fpext_32ns_64_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component qam_runner_cos_lut IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component qam_runner_AXILiteS_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (0 downto 0);
        sourceAddress : OUT STD_LOGIC_VECTOR (31 downto 0);
        sourceAddress_ap_vld : OUT STD_LOGIC;
        destinationAddress : OUT STD_LOGIC_VECTOR (31 downto 0);
        destinationAddress_ap_vld : OUT STD_LOGIC;
        iterations : OUT STD_LOGIC_VECTOR (31 downto 0);
        iterations_ap_vld : OUT STD_LOGIC;
        control_in_qam : OUT STD_LOGIC_VECTOR (31 downto 0);
        control_in_qam_ap_vld : OUT STD_LOGIC;
        control_in_lf_p : OUT STD_LOGIC_VECTOR (7 downto 0);
        control_in_lf_p_ap_vld : OUT STD_LOGIC;
        control_in_lf_i : OUT STD_LOGIC_VECTOR (7 downto 0);
        control_in_lf_i_ap_vld : OUT STD_LOGIC;
        control_in_lf_out_gain : OUT STD_LOGIC_VECTOR (7 downto 0);
        control_in_lf_out_gain_ap_vld : OUT STD_LOGIC;
        control_in_reg_clr : OUT STD_LOGIC;
        control_in_reg_clr_ap_vld : OUT STD_LOGIC;
        control_in_reg_init : OUT STD_LOGIC_VECTOR (31 downto 0);
        control_in_reg_init_ap_vld : OUT STD_LOGIC );
    end component;


    component qam_runner_m_mm2s_ctl_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component qam_runner_m_s2mm_ctl_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    cos_lut_U : component qam_runner_cos_lut
    generic map (
        DataWidth => 15,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n,
        address0 => cos_lut_address0,
        ce0 => cos_lut_ce0,
        q0 => cos_lut_q0,
        address1 => cos_lut_address1,
        ce1 => cos_lut_ce1,
        q1 => cos_lut_q1);

    qam_runner_AXILiteS_s_axi_U : component qam_runner_AXILiteS_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        sourceAddress => sourceAddress,
        sourceAddress_ap_vld => sourceAddress_ap_vld,
        destinationAddress => destinationAddress,
        destinationAddress_ap_vld => destinationAddress_ap_vld,
        iterations => iterations,
        iterations_ap_vld => iterations_ap_vld,
        control_in_qam => control_in_qam,
        control_in_qam_ap_vld => control_in_qam_ap_vld,
        control_in_lf_p => control_in_lf_p,
        control_in_lf_p_ap_vld => control_in_lf_p_ap_vld,
        control_in_lf_i => control_in_lf_i,
        control_in_lf_i_ap_vld => control_in_lf_i_ap_vld,
        control_in_lf_out_gain => control_in_lf_out_gain,
        control_in_lf_out_gain_ap_vld => control_in_lf_out_gain_ap_vld,
        control_in_reg_clr => control_in_reg_clr,
        control_in_reg_clr_ap_vld => control_in_reg_clr_ap_vld,
        control_in_reg_init => control_in_reg_init,
        control_in_reg_init_ap_vld => control_in_reg_init_ap_vld);

    qam_runner_m_mm2s_ctl_m_axi_U : component qam_runner_m_mm2s_ctl_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 2,
        C_ID_WIDTH => C_M_AXI_M_MM2S_CTL_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_M_MM2S_CTL_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_M_MM2S_CTL_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_M_MM2S_CTL_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_M_MM2S_CTL_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_M_MM2S_CTL_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_M_MM2S_CTL_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_M_MM2S_CTL_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_M_MM2S_CTL_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_M_MM2S_CTL_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_MM2S_CTL_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_MM2S_CTL_CACHE_VALUE)
    port map (
        AWVALID => m_axi_m_mm2s_ctl_AWVALID,
        AWREADY => m_axi_m_mm2s_ctl_AWREADY,
        AWADDR => m_axi_m_mm2s_ctl_AWADDR,
        AWID => m_axi_m_mm2s_ctl_AWID,
        AWLEN => m_axi_m_mm2s_ctl_AWLEN,
        AWSIZE => m_axi_m_mm2s_ctl_AWSIZE,
        AWBURST => m_axi_m_mm2s_ctl_AWBURST,
        AWLOCK => m_axi_m_mm2s_ctl_AWLOCK,
        AWCACHE => m_axi_m_mm2s_ctl_AWCACHE,
        AWPROT => m_axi_m_mm2s_ctl_AWPROT,
        AWQOS => m_axi_m_mm2s_ctl_AWQOS,
        AWREGION => m_axi_m_mm2s_ctl_AWREGION,
        AWUSER => m_axi_m_mm2s_ctl_AWUSER,
        WVALID => m_axi_m_mm2s_ctl_WVALID,
        WREADY => m_axi_m_mm2s_ctl_WREADY,
        WDATA => m_axi_m_mm2s_ctl_WDATA,
        WSTRB => m_axi_m_mm2s_ctl_WSTRB,
        WLAST => m_axi_m_mm2s_ctl_WLAST,
        WID => m_axi_m_mm2s_ctl_WID,
        WUSER => m_axi_m_mm2s_ctl_WUSER,
        ARVALID => m_axi_m_mm2s_ctl_ARVALID,
        ARREADY => m_axi_m_mm2s_ctl_ARREADY,
        ARADDR => m_axi_m_mm2s_ctl_ARADDR,
        ARID => m_axi_m_mm2s_ctl_ARID,
        ARLEN => m_axi_m_mm2s_ctl_ARLEN,
        ARSIZE => m_axi_m_mm2s_ctl_ARSIZE,
        ARBURST => m_axi_m_mm2s_ctl_ARBURST,
        ARLOCK => m_axi_m_mm2s_ctl_ARLOCK,
        ARCACHE => m_axi_m_mm2s_ctl_ARCACHE,
        ARPROT => m_axi_m_mm2s_ctl_ARPROT,
        ARQOS => m_axi_m_mm2s_ctl_ARQOS,
        ARREGION => m_axi_m_mm2s_ctl_ARREGION,
        ARUSER => m_axi_m_mm2s_ctl_ARUSER,
        RVALID => m_axi_m_mm2s_ctl_RVALID,
        RREADY => m_axi_m_mm2s_ctl_RREADY,
        RDATA => m_axi_m_mm2s_ctl_RDATA,
        RLAST => m_axi_m_mm2s_ctl_RLAST,
        RID => m_axi_m_mm2s_ctl_RID,
        RUSER => m_axi_m_mm2s_ctl_RUSER,
        RRESP => m_axi_m_mm2s_ctl_RRESP,
        BVALID => m_axi_m_mm2s_ctl_BVALID,
        BREADY => m_axi_m_mm2s_ctl_BREADY,
        BRESP => m_axi_m_mm2s_ctl_BRESP,
        BID => m_axi_m_mm2s_ctl_BID,
        BUSER => m_axi_m_mm2s_ctl_BUSER,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        I_ARVALID => m_mm2s_ctl_ARVALID,
        I_ARREADY => m_mm2s_ctl_ARREADY,
        I_ARADDR => m_mm2s_ctl_ARADDR,
        I_ARID => m_mm2s_ctl_ARID,
        I_ARLEN => m_mm2s_ctl_ARLEN,
        I_ARSIZE => m_mm2s_ctl_ARSIZE,
        I_ARLOCK => m_mm2s_ctl_ARLOCK,
        I_ARCACHE => m_mm2s_ctl_ARCACHE,
        I_ARQOS => m_mm2s_ctl_ARQOS,
        I_ARPROT => m_mm2s_ctl_ARPROT,
        I_ARUSER => m_mm2s_ctl_ARUSER,
        I_ARBURST => m_mm2s_ctl_ARBURST,
        I_ARREGION => m_mm2s_ctl_ARREGION,
        I_RVALID => m_mm2s_ctl_RVALID,
        I_RREADY => m_mm2s_ctl_RREADY,
        I_RDATA => m_mm2s_ctl_RDATA,
        I_RID => m_mm2s_ctl_RID,
        I_RUSER => m_mm2s_ctl_RUSER,
        I_RRESP => m_mm2s_ctl_RRESP,
        I_RLAST => m_mm2s_ctl_RLAST,
        I_AWVALID => m_mm2s_ctl_AWVALID,
        I_AWREADY => m_mm2s_ctl_AWREADY,
        I_AWADDR => m_mm2s_ctl_AWADDR,
        I_AWID => m_mm2s_ctl_AWID,
        I_AWLEN => m_mm2s_ctl_AWLEN,
        I_AWSIZE => m_mm2s_ctl_AWSIZE,
        I_AWLOCK => m_mm2s_ctl_AWLOCK,
        I_AWCACHE => m_mm2s_ctl_AWCACHE,
        I_AWQOS => m_mm2s_ctl_AWQOS,
        I_AWPROT => m_mm2s_ctl_AWPROT,
        I_AWUSER => m_mm2s_ctl_AWUSER,
        I_AWBURST => m_mm2s_ctl_AWBURST,
        I_AWREGION => m_mm2s_ctl_AWREGION,
        I_WVALID => m_mm2s_ctl_WVALID,
        I_WREADY => m_mm2s_ctl_WREADY,
        I_WDATA => m_mm2s_ctl_WDATA,
        I_WID => m_mm2s_ctl_WID,
        I_WUSER => m_mm2s_ctl_WUSER,
        I_WLAST => m_mm2s_ctl_WLAST,
        I_WSTRB => m_mm2s_ctl_WSTRB,
        I_BVALID => m_mm2s_ctl_BVALID,
        I_BREADY => m_mm2s_ctl_BREADY,
        I_BRESP => m_mm2s_ctl_BRESP,
        I_BID => m_mm2s_ctl_BID,
        I_BUSER => m_mm2s_ctl_BUSER);

    qam_runner_m_s2mm_ctl_m_axi_U : component qam_runner_m_s2mm_ctl_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 2,
        C_ID_WIDTH => C_M_AXI_M_S2MM_CTL_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_M_S2MM_CTL_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_M_S2MM_CTL_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_M_S2MM_CTL_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_M_S2MM_CTL_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_M_S2MM_CTL_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_M_S2MM_CTL_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_M_S2MM_CTL_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_M_S2MM_CTL_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_M_S2MM_CTL_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_S2MM_CTL_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_S2MM_CTL_CACHE_VALUE)
    port map (
        AWVALID => m_axi_m_s2mm_ctl_AWVALID,
        AWREADY => m_axi_m_s2mm_ctl_AWREADY,
        AWADDR => m_axi_m_s2mm_ctl_AWADDR,
        AWID => m_axi_m_s2mm_ctl_AWID,
        AWLEN => m_axi_m_s2mm_ctl_AWLEN,
        AWSIZE => m_axi_m_s2mm_ctl_AWSIZE,
        AWBURST => m_axi_m_s2mm_ctl_AWBURST,
        AWLOCK => m_axi_m_s2mm_ctl_AWLOCK,
        AWCACHE => m_axi_m_s2mm_ctl_AWCACHE,
        AWPROT => m_axi_m_s2mm_ctl_AWPROT,
        AWQOS => m_axi_m_s2mm_ctl_AWQOS,
        AWREGION => m_axi_m_s2mm_ctl_AWREGION,
        AWUSER => m_axi_m_s2mm_ctl_AWUSER,
        WVALID => m_axi_m_s2mm_ctl_WVALID,
        WREADY => m_axi_m_s2mm_ctl_WREADY,
        WDATA => m_axi_m_s2mm_ctl_WDATA,
        WSTRB => m_axi_m_s2mm_ctl_WSTRB,
        WLAST => m_axi_m_s2mm_ctl_WLAST,
        WID => m_axi_m_s2mm_ctl_WID,
        WUSER => m_axi_m_s2mm_ctl_WUSER,
        ARVALID => m_axi_m_s2mm_ctl_ARVALID,
        ARREADY => m_axi_m_s2mm_ctl_ARREADY,
        ARADDR => m_axi_m_s2mm_ctl_ARADDR,
        ARID => m_axi_m_s2mm_ctl_ARID,
        ARLEN => m_axi_m_s2mm_ctl_ARLEN,
        ARSIZE => m_axi_m_s2mm_ctl_ARSIZE,
        ARBURST => m_axi_m_s2mm_ctl_ARBURST,
        ARLOCK => m_axi_m_s2mm_ctl_ARLOCK,
        ARCACHE => m_axi_m_s2mm_ctl_ARCACHE,
        ARPROT => m_axi_m_s2mm_ctl_ARPROT,
        ARQOS => m_axi_m_s2mm_ctl_ARQOS,
        ARREGION => m_axi_m_s2mm_ctl_ARREGION,
        ARUSER => m_axi_m_s2mm_ctl_ARUSER,
        RVALID => m_axi_m_s2mm_ctl_RVALID,
        RREADY => m_axi_m_s2mm_ctl_RREADY,
        RDATA => m_axi_m_s2mm_ctl_RDATA,
        RLAST => m_axi_m_s2mm_ctl_RLAST,
        RID => m_axi_m_s2mm_ctl_RID,
        RUSER => m_axi_m_s2mm_ctl_RUSER,
        RRESP => m_axi_m_s2mm_ctl_RRESP,
        BVALID => m_axi_m_s2mm_ctl_BVALID,
        BREADY => m_axi_m_s2mm_ctl_BREADY,
        BRESP => m_axi_m_s2mm_ctl_BRESP,
        BID => m_axi_m_s2mm_ctl_BID,
        BUSER => m_axi_m_s2mm_ctl_BUSER,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        I_ARVALID => m_s2mm_ctl_ARVALID,
        I_ARREADY => m_s2mm_ctl_ARREADY,
        I_ARADDR => m_s2mm_ctl_ARADDR,
        I_ARID => m_s2mm_ctl_ARID,
        I_ARLEN => m_s2mm_ctl_ARLEN,
        I_ARSIZE => m_s2mm_ctl_ARSIZE,
        I_ARLOCK => m_s2mm_ctl_ARLOCK,
        I_ARCACHE => m_s2mm_ctl_ARCACHE,
        I_ARQOS => m_s2mm_ctl_ARQOS,
        I_ARPROT => m_s2mm_ctl_ARPROT,
        I_ARUSER => m_s2mm_ctl_ARUSER,
        I_ARBURST => m_s2mm_ctl_ARBURST,
        I_ARREGION => m_s2mm_ctl_ARREGION,
        I_RVALID => m_s2mm_ctl_RVALID,
        I_RREADY => m_s2mm_ctl_RREADY,
        I_RDATA => m_s2mm_ctl_RDATA,
        I_RID => m_s2mm_ctl_RID,
        I_RUSER => m_s2mm_ctl_RUSER,
        I_RRESP => m_s2mm_ctl_RRESP,
        I_RLAST => m_s2mm_ctl_RLAST,
        I_AWVALID => m_s2mm_ctl_AWVALID,
        I_AWREADY => m_s2mm_ctl_AWREADY,
        I_AWADDR => m_s2mm_ctl_AWADDR,
        I_AWID => m_s2mm_ctl_AWID,
        I_AWLEN => m_s2mm_ctl_AWLEN,
        I_AWSIZE => m_s2mm_ctl_AWSIZE,
        I_AWLOCK => m_s2mm_ctl_AWLOCK,
        I_AWCACHE => m_s2mm_ctl_AWCACHE,
        I_AWQOS => m_s2mm_ctl_AWQOS,
        I_AWPROT => m_s2mm_ctl_AWPROT,
        I_AWUSER => m_s2mm_ctl_AWUSER,
        I_AWBURST => m_s2mm_ctl_AWBURST,
        I_AWREGION => m_s2mm_ctl_AWREGION,
        I_WVALID => m_s2mm_ctl_WVALID,
        I_WREADY => m_s2mm_ctl_WREADY,
        I_WDATA => m_s2mm_ctl_WDATA,
        I_WID => m_s2mm_ctl_WID,
        I_WUSER => m_s2mm_ctl_WUSER,
        I_WLAST => m_s2mm_ctl_WLAST,
        I_WSTRB => m_s2mm_ctl_WSTRB,
        I_BVALID => m_s2mm_ctl_BVALID,
        I_BREADY => m_s2mm_ctl_BREADY,
        I_BRESP => m_s2mm_ctl_BRESP,
        I_BID => m_s2mm_ctl_BID,
        I_BUSER => m_s2mm_ctl_BUSER);

    qam_runner_fpext_32ns_64_3_U1 : component qam_runner_fpext_32ns_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n,
        din0 => grp_fu_460_p0,
        ce => grp_fu_460_ce,
        dout => grp_fu_460_p1);

    qam_runner_fpext_32ns_64_3_U2 : component qam_runner_fpext_32ns_64_3
    generic map (
        ID => 2,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n,
        din0 => grp_fu_463_p0,
        ce => grp_fu_463_ce,
        dout => grp_fu_463_p1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_mm2s_ctl_ARREADY assign process. --
    ap_reg_ioackin_m_mm2s_ctl_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY)))) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_467))) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_522))) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_947))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_522)) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY) and not((ap_start = ap_const_logic_0))) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY) and not(ap_sig_bdd_467)) or (not(ap_sig_bdd_522) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY) and (ap_ST_st7_fsm_6 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_ARREADY) and (ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_947)) or (not(ap_sig_bdd_522) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_mm2s_ctl_AWREADY assign process. --
    ap_reg_ioackin_m_mm2s_ctl_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_522 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_522 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st15_fsm_14 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = m_mm2s_ctl_AWREADY) and (ap_ST_st3_fsm_2 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_AWREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_AWREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_AWREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_AWREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_1 = m_mm2s_ctl_AWREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_1 = m_mm2s_ctl_AWREADY)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_mm2s_ctl_WREADY assign process. --
    ap_reg_ioackin_m_mm2s_ctl_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_522 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_522 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st15_fsm_14 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_WREADY)) or ((ap_const_logic_1 = m_mm2s_ctl_WREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_WREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_WREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_WREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_1 = m_mm2s_ctl_WREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_1 = m_mm2s_ctl_WREADY)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_s2mm_ctl_ARREADY assign process. --
    ap_reg_ioackin_m_s2mm_ctl_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY)))) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_467))) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_522))) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_947))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_522)) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(ap_sig_bdd_467) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_522) and (ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_947) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_522) and (ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_s2mm_ctl_AWREADY assign process. --
    ap_reg_ioackin_m_s2mm_ctl_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_522 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_522 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st15_fsm_14 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_s2mm_ctl_WREADY assign process. --
    ap_reg_ioackin_m_s2mm_ctl_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_522 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_522 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st15_fsm_14 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_s_out_V_V_TREADY assign process. --
    ap_reg_ioackin_s_out_V_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_s_out_V_V_TREADY <= ap_const_logic_0;
            else
                if ((ap_ST_st38_fsm_37 = ap_CS_fsm)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY))) then 
                        ap_reg_ioackin_s_out_V_V_TREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = s_out_V_V_TREADY)) then 
                        ap_reg_ioackin_s_out_V_V_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- control_in_lf_i_ap_vld_preg assign process. --
    control_in_lf_i_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                control_in_lf_i_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_767_p2) and not(ap_sig_bdd_590))) then 
                    control_in_lf_i_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = control_in_lf_i_ap_vld))) then 
                    control_in_lf_i_ap_vld_preg <= control_in_lf_i_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- control_in_lf_i_preg assign process. --
    control_in_lf_i_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                control_in_lf_i_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = control_in_lf_i_ap_vld))) then 
                    control_in_lf_i_preg <= control_in_lf_i;
                end if; 
            end if;
        end if;
    end process;


    -- control_in_lf_out_gain_ap_vld_preg assign process. --
    control_in_lf_out_gain_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                control_in_lf_out_gain_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_767_p2) and not(ap_sig_bdd_590))) then 
                    control_in_lf_out_gain_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = control_in_lf_out_gain_ap_vld))) then 
                    control_in_lf_out_gain_ap_vld_preg <= control_in_lf_out_gain_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- control_in_lf_out_gain_preg assign process. --
    control_in_lf_out_gain_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                control_in_lf_out_gain_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = control_in_lf_out_gain_ap_vld))) then 
                    control_in_lf_out_gain_preg <= control_in_lf_out_gain;
                end if; 
            end if;
        end if;
    end process;


    -- control_in_lf_p_ap_vld_preg assign process. --
    control_in_lf_p_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                control_in_lf_p_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_767_p2) and not(ap_sig_bdd_590))) then 
                    control_in_lf_p_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = control_in_lf_p_ap_vld))) then 
                    control_in_lf_p_ap_vld_preg <= control_in_lf_p_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- control_in_lf_p_preg assign process. --
    control_in_lf_p_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                control_in_lf_p_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = control_in_lf_p_ap_vld))) then 
                    control_in_lf_p_preg <= control_in_lf_p;
                end if; 
            end if;
        end if;
    end process;


    -- control_in_reg_clr_ap_vld_preg assign process. --
    control_in_reg_clr_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                control_in_reg_clr_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_767_p2) and not(ap_sig_bdd_590))) then 
                    control_in_reg_clr_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = control_in_reg_clr_ap_vld))) then 
                    control_in_reg_clr_ap_vld_preg <= control_in_reg_clr_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- control_in_reg_clr_preg assign process. --
    control_in_reg_clr_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                control_in_reg_clr_preg <= ap_const_logic_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = control_in_reg_clr_ap_vld))) then 
                    control_in_reg_clr_preg <= control_in_reg_clr;
                end if; 
            end if;
        end if;
    end process;


    -- control_in_reg_init_ap_vld_preg assign process. --
    control_in_reg_init_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                control_in_reg_init_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_767_p2) and not(ap_sig_bdd_590))) then 
                    control_in_reg_init_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = control_in_reg_init_ap_vld))) then 
                    control_in_reg_init_ap_vld_preg <= control_in_reg_init_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- control_in_reg_init_preg assign process. --
    control_in_reg_init_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                control_in_reg_init_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = control_in_reg_init_ap_vld))) then 
                    control_in_reg_init_preg <= control_in_reg_init;
                end if; 
            end if;
        end if;
    end process;


    -- destinationAddress_ap_vld_preg assign process. --
    destinationAddress_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                destinationAddress_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_767_p2) and not(ap_sig_bdd_590))) then 
                    destinationAddress_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = destinationAddress_ap_vld))) then 
                    destinationAddress_ap_vld_preg <= destinationAddress_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- destinationAddress_preg assign process. --
    destinationAddress_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                destinationAddress_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = destinationAddress_ap_vld))) then 
                    destinationAddress_preg <= destinationAddress;
                end if; 
            end if;
        end if;
    end process;


    -- iterations_ap_vld_preg assign process. --
    iterations_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                iterations_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_767_p2) and not(ap_sig_bdd_590))) then 
                    iterations_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = iterations_ap_vld))) then 
                    iterations_ap_vld_preg <= iterations_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- iterations_preg assign process. --
    iterations_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                iterations_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = iterations_ap_vld))) then 
                    iterations_preg <= iterations;
                end if; 
            end if;
        end if;
    end process;


    -- sourceAddress_ap_vld_preg assign process. --
    sourceAddress_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                sourceAddress_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_767_p2) and not(ap_sig_bdd_590))) then 
                    sourceAddress_ap_vld_preg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = sourceAddress_ap_vld) and not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))))) then 
                    sourceAddress_ap_vld_preg <= sourceAddress_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- sourceAddress_preg assign process. --
    sourceAddress_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                sourceAddress_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = sourceAddress_ap_vld) and not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))))) then 
                    sourceAddress_preg <= sourceAddress;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_448 assign process. --
    i_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st38_fsm_37 = ap_CS_fsm) and not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY)))) then 
                i_reg_448 <= i_1_reg_3930;
            elsif (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_522))) then 
                i_reg_448 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st21_fsm_20 = ap_CS_fsm)) then
                F2_1_reg_4105 <= F2_1_fu_1242_p2;
                F2_reg_4080 <= F2_fu_1196_p2;
                isneg_1_reg_4088 <= ireg_V_1_fu_1202_p1(63 downto 63);
                isneg_reg_4063 <= ireg_V_fu_1156_p1(63 downto 63);
                tmp_112_reg_4094 <= tmp_112_fu_1232_p1;
                tmp_24_reg_4099 <= tmp_24_fu_1236_p2;
                tmp_62_reg_4069 <= tmp_62_fu_1186_p1;
                tmp_8_reg_4074 <= tmp_8_fu_1190_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((control_in_reg_clr_read_read_fu_359_p2 = ap_const_lv1_0)) and (ap_ST_st19_fsm_18 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_6_fu_767_p2)) and not(ap_sig_bdd_590))) then
                F2_2_reg_3960 <= F2_2_fu_863_p2;
                isneg_12_reg_3945 <= ireg_V_2_reg_3869(63 downto 63);
                man_V_17_reg_3952 <= man_V_17_fu_855_p3;
                sh_amt_2_reg_3972 <= sh_amt_2_fu_887_p3;
                tmp_119_reg_3985 <= tmp_119_fu_901_p1;
                tmp_40_reg_3967 <= tmp_40_fu_869_p2;
                tmp_43_reg_3979 <= tmp_43_fu_895_p2;
                tmp_57_reg_3991 <= tmp_57_fu_905_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((control_in_reg_clr_read_read_fu_359_p2 = ap_const_lv1_0)) and (ap_ST_st20_fsm_19 = ap_CS_fsm))) then
                Range1_all_ones_1_reg_4019 <= Range1_all_ones_1_fu_1068_p2;
                Range1_all_zeros_1_reg_4047 <= Range1_all_zeros_1_fu_1121_p2;
                Range2_all_ones_reg_4037 <= Range2_all_ones_fu_1103_p2;
                rev_reg_4014 <= rev_fu_1043_p2;
                sel_tmp25_reg_3997 <= sel_tmp25_fu_991_p3;
                sel_tmp27_reg_4002 <= sel_tmp27_fu_1005_p2;
                tmp2_reg_4052 <= tmp2_fu_1132_p2;
                tmp3_reg_4058 <= tmp3_fu_1150_p2;
                tmp_127_reg_4026 <= pos2_fu_1020_p2(11 downto 11);
                tmp_58_reg_4007 <= tmp_58_fu_1029_p2;
                tmp_61_reg_4031 <= tmp_61_fu_1082_p2;
                tmp_64_reg_4042 <= tmp_64_fu_1109_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st25_fsm_24 = ap_CS_fsm)) then
                brmerge39_i1_i_reg_4281 <= brmerge39_i1_i_fu_2092_p2;
                brmerge39_i_i_reg_4306 <= brmerge39_i_i_fu_2158_p2;
                brmerge_i1_i_reg_4276 <= brmerge_i1_i_fu_2074_p2;
                brmerge_i_i1_reg_4301 <= brmerge_i_i1_fu_2140_p2;
                isneg_13_reg_4261 <= p_Val2_7_fu_1986_p2(26 downto 26);
                isneg_14_reg_4286 <= p_Val2_10_fu_2016_p2(26 downto 26);
                p_Val2_12_reg_4270 <= p_Val2_7_fu_1986_p2(24 downto 20);
                p_Val2_14_reg_4295 <= p_Val2_10_fu_2016_p2(24 downto 20);
                p_Val2_61_reg_4247 <= p_Val2_7_fu_1986_p2(26 downto 11);
                p_Val2_63_reg_4254 <= p_Val2_10_fu_2016_p2(26 downto 11);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((control_in_reg_clr_read_read_fu_359_p2 = ap_const_lv1_0)) and (ap_ST_st21_fsm_20 = ap_CS_fsm))) then
                brmerge92_demorgan_i_reg_4132 <= brmerge92_demorgan_i_fu_1381_p2;
                neg_src_reg_4120 <= neg_src_fu_1353_p2;
                overflow_reg_4126 <= overflow_fu_1375_p2;
                p_Val2_4_reg_4113 <= p_Val2_4_fu_1255_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not(ap_sig_bdd_590))) then
                i_1_reg_3930 <= i_1_fu_772_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st31_fsm_30 = ap_CS_fsm)) then
                i_reg_V <= p_Val2_47_fu_2676_p3;
                p_Val2_42_reg_4384 <= p_Val2_42_fu_2670_p2;
                p_Val2_43_reg_4379 <= p_Val2_43_fu_2637_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_522) and not((control_in_reg_clr_read_read_fu_359_p2 = ap_const_lv1_0)))) then
                ireg_V_2_reg_3869 <= ireg_V_2_fu_652_p1;
                p_this_assign_reg_3882(27) <= p_this_assign_fu_666_p3(27);
                sel_tmp34_reg_3887 <= sel_tmp34_fu_674_p2;
                tmp_39_reg_3876 <= tmp_39_fu_660_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_522))) then
                isNeg_1_reg_3902 <= sh_assign_1_fu_707_p2(8 downto 8);
                sh_assign_3_i_cast1_reg_3907 <= sh_assign_3_i_cast1_fu_735_p1;
                sh_assign_3_i_cast_reg_3912 <= sh_assign_3_i_cast_fu_739_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_467)))) then
                isNeg_2_reg_3793 <= control_in_lf_out_gain_in_sig(7 downto 7);
                isNeg_reg_3787 <= control_in_lf_p_in_sig(7 downto 7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st27_fsm_26 = ap_CS_fsm)) then
                isneg_15_reg_4321 <= p_Val2_32_fu_2314_p2(20 downto 20);
                newsignbit_3_reg_4333 <= p_Val2_32_fu_2314_p2(18 downto 18);
                p_Result_i1_reg_4339 <= p_Val2_32_fu_2314_p2(20 downto 19);
                p_Val2_35_reg_4327 <= p_Val2_32_fu_2314_p2(18 downto 5);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st29_fsm_28 = ap_CS_fsm)) then
                isneg_16_reg_4350 <= p_Val2_37_fu_2481_p2(20 downto 20);
                newsignbit_4_reg_4362 <= p_Val2_37_fu_2481_p2(18 downto 18);
                p_Val2_38_reg_4356 <= p_Val2_37_fu_2481_p2(18 downto 5);
                tmp_69_reg_4368 <= p_Val2_37_fu_2481_p2(20 downto 19);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st35_fsm_34 = ap_CS_fsm)) then
                isneg_18_reg_4437 <= cos_out_V_6_fu_2971_p3(15 downto 15);
                isneg_19_reg_4444 <= sin_out_V_5_fu_3001_p3(15 downto 15);
                p_Val2_1_fu_326 <= sin_out_V_5_fu_3001_p3(15 downto 4);
                p_Val2_65_reg_4425 <= cos_out_V_6_fu_2971_p3(15 downto 4);
                p_Val2_67_reg_4431 <= sin_out_V_5_fu_3001_p3(15 downto 4);
                p_Val2_s_fu_322 <= cos_out_V_6_fu_2971_p3(15 downto 4);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st33_fsm_32 = ap_CS_fsm)) then
                msb_V_reg_4395 <= p_Val2_52_fu_2821_p2(26 downto 25);
                phase_angle_V <= p_Val2_52_fu_2821_p2(26 downto 11);
                sin_adr_V_reg_4408 <= p_Val2_52_fu_2821_p2(24 downto 15);
                tmp_144_reg_4402 <= p_Val2_52_fu_2821_p2(25 downto 25);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then
                newSel3_reg_4217 <= newSel3_fu_1834_p3;
                newSel7_reg_4222 <= newSel7_fu_1900_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((control_in_reg_clr_read_read_fu_359_p2 = ap_const_lv1_0)) and (ap_ST_st22_fsm_21 = ap_CS_fsm))) then
                p_5_reg_4212 <= p_5_fu_1768_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st37_fsm_36 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_91_reg_4493))) then
                p_Result_20_reg_4570 <= p_Result_20_fu_3433_p4;
                tmp_114_cast_reg_4575 <= tmp_114_cast_fu_3458_p3;
                tmp_93_reg_4565 <= tmp_93_fu_3402_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st37_fsm_36 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_101_reg_4514))) then
                p_Result_25_reg_4585 <= p_Result_25_fu_3502_p4;
                tmp_103_reg_4580 <= tmp_103_fu_3471_p2;
                tmp_127_cast_reg_4590 <= tmp_127_cast_fu_3527_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st37_fsm_36 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_81_reg_4472))) then
                p_Result_8_reg_4555 <= p_Result_8_fu_3364_p4;
                tmp_101_cast_reg_4560 <= tmp_101_cast_fu_3389_p3;
                tmp_83_reg_4550 <= tmp_83_fu_3333_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st37_fsm_36 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_70_reg_4451))) then
                p_Result_s_reg_4540 <= p_Result_s_fu_3295_p4;
                tmp_72_reg_4535 <= tmp_72_fu_3264_p2;
                tmp_88_cast_reg_4545 <= tmp_88_cast_fu_3320_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then
                p_Val2_36_reg_4345 <= p_Val2_36_fu_2430_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then
                p_Val2_6_reg_4227 <= p_Val2_6_fu_1934_p2;
                p_Val2_9_reg_4237 <= p_Val2_9_fu_1956_p2;
                tmp_111_reg_4242 <= p_Val2_8_fu_1950_p2(26 downto 11);
                tmp_68_reg_4232 <= p_Val2_5_fu_1921_p2(26 downto 11);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st30_fsm_29 = ap_CS_fsm)) then
                ph_est_V_reg_4374 <= ph_est_V_fu_2597_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then
                sel_tmp10_reg_4196 <= sel_tmp10_fu_1658_p2;
                sel_tmp12_reg_4201 <= sel_tmp12_fu_1675_p2;
                sel_tmp15_reg_4207 <= sel_tmp15_fu_1693_p2;
                sel_tmp2_reg_4159 <= sel_tmp2_fu_1502_p2;
                sel_tmp3_reg_4170 <= sel_tmp3_fu_1537_p2;
                sel_tmp7_reg_4164 <= sel_tmp7_fu_1519_p2;
                tmp_100_reg_4154 <= tmp_100_fu_1493_p1;
                tmp_113_reg_4175 <= tmp_113_fu_1599_p1;
                tmp_115_reg_4186 <= tmp_115_fu_1635_p1;
                tmp_116_reg_4191 <= tmp_116_fu_1649_p1;
                tmp_14_reg_4143 <= tmp_14_fu_1447_p2;
                tmp_30_reg_4180 <= tmp_30_fu_1603_p2;
                tmp_78_reg_4138 <= tmp_78_fu_1443_p1;
                tmp_90_reg_4149 <= tmp_90_fu_1479_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_522) and (isNeg_reg_3787 = ap_const_lv1_0))) then
                sh_assign_1_i_cast1_reg_3892(0) <= sh_assign_1_i_cast1_fu_696_p1(0);
    sh_assign_1_i_cast1_reg_3892(1) <= sh_assign_1_i_cast1_fu_696_p1(1);
    sh_assign_1_i_cast1_reg_3892(2) <= sh_assign_1_i_cast1_fu_696_p1(2);
    sh_assign_1_i_cast1_reg_3892(3) <= sh_assign_1_i_cast1_fu_696_p1(3);
    sh_assign_1_i_cast1_reg_3892(4) <= sh_assign_1_i_cast1_fu_696_p1(4);
    sh_assign_1_i_cast1_reg_3892(5) <= sh_assign_1_i_cast1_fu_696_p1(5);
    sh_assign_1_i_cast1_reg_3892(6) <= sh_assign_1_i_cast1_fu_696_p1(6);
    sh_assign_1_i_cast1_reg_3892(7) <= sh_assign_1_i_cast1_fu_696_p1(7);
    sh_assign_1_i_cast1_reg_3892(8) <= sh_assign_1_i_cast1_fu_696_p1(8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_522) and not((isNeg_reg_3787 = ap_const_lv1_0)))) then
                sh_assign_1_i_cast_reg_3897(0) <= sh_assign_1_i_cast_fu_700_p1(0);
    sh_assign_1_i_cast_reg_3897(1) <= sh_assign_1_i_cast_fu_700_p1(1);
    sh_assign_1_i_cast_reg_3897(2) <= sh_assign_1_i_cast_fu_700_p1(2);
    sh_assign_1_i_cast_reg_3897(3) <= sh_assign_1_i_cast_fu_700_p1(3);
    sh_assign_1_i_cast_reg_3897(4) <= sh_assign_1_i_cast_fu_700_p1(4);
    sh_assign_1_i_cast_reg_3897(5) <= sh_assign_1_i_cast_fu_700_p1(5);
    sh_assign_1_i_cast_reg_3897(6) <= sh_assign_1_i_cast_fu_700_p1(6);
    sh_assign_1_i_cast_reg_3897(7) <= sh_assign_1_i_cast_fu_700_p1(7);
    sh_assign_1_i_cast_reg_3897(8) <= sh_assign_1_i_cast_fu_700_p1(8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_522) and (isNeg_2_reg_3793 = ap_const_lv1_0))) then
                sh_assign_5_i_cast1_reg_3917(0) <= sh_assign_5_i_cast1_fu_759_p1(0);
    sh_assign_5_i_cast1_reg_3917(1) <= sh_assign_5_i_cast1_fu_759_p1(1);
    sh_assign_5_i_cast1_reg_3917(2) <= sh_assign_5_i_cast1_fu_759_p1(2);
    sh_assign_5_i_cast1_reg_3917(3) <= sh_assign_5_i_cast1_fu_759_p1(3);
    sh_assign_5_i_cast1_reg_3917(4) <= sh_assign_5_i_cast1_fu_759_p1(4);
    sh_assign_5_i_cast1_reg_3917(5) <= sh_assign_5_i_cast1_fu_759_p1(5);
    sh_assign_5_i_cast1_reg_3917(6) <= sh_assign_5_i_cast1_fu_759_p1(6);
    sh_assign_5_i_cast1_reg_3917(7) <= sh_assign_5_i_cast1_fu_759_p1(7);
    sh_assign_5_i_cast1_reg_3917(8) <= sh_assign_5_i_cast1_fu_759_p1(8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_522) and not((isNeg_2_reg_3793 = ap_const_lv1_0)))) then
                sh_assign_5_i_cast_reg_3922(0) <= sh_assign_5_i_cast_fu_763_p1(0);
    sh_assign_5_i_cast_reg_3922(1) <= sh_assign_5_i_cast_fu_763_p1(1);
    sh_assign_5_i_cast_reg_3922(2) <= sh_assign_5_i_cast_fu_763_p1(2);
    sh_assign_5_i_cast_reg_3922(3) <= sh_assign_5_i_cast_fu_763_p1(3);
    sh_assign_5_i_cast_reg_3922(4) <= sh_assign_5_i_cast_fu_763_p1(4);
    sh_assign_5_i_cast_reg_3922(5) <= sh_assign_5_i_cast_fu_763_p1(5);
    sh_assign_5_i_cast_reg_3922(6) <= sh_assign_5_i_cast_fu_763_p1(6);
    sh_assign_5_i_cast_reg_3922(7) <= sh_assign_5_i_cast_fu_763_p1(7);
    sh_assign_5_i_cast_reg_3922(8) <= sh_assign_5_i_cast_fu_763_p1(8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st36_fsm_35 = ap_CS_fsm)) then
                tmp_101_reg_4514 <= tmp_101_fu_3208_p2;
                tmp_102_reg_4524 <= tmp_102_fu_3247_p3;
                tmp_145_reg_4467 <= tmp_145_fu_3102_p1;
                tmp_147_reg_4488 <= tmp_147_fu_3153_p1;
                tmp_150_reg_4509 <= tmp_150_fu_3204_p1;
                tmp_153_reg_4530 <= tmp_153_fu_3255_p1;
                tmp_70_reg_4451 <= tmp_70_fu_3055_p2;
                tmp_71_reg_4461 <= tmp_71_fu_3094_p3;
                tmp_81_reg_4472 <= tmp_81_fu_3106_p2;
                tmp_82_reg_4482 <= tmp_82_fu_3145_p3;
                tmp_91_reg_4493 <= tmp_91_fu_3157_p2;
                tmp_92_reg_4503 <= tmp_92_fu_3196_p3;
                tmp_V_15_reg_4456 <= tmp_V_15_fu_3069_p3;
                tmp_V_16_reg_4477 <= tmp_V_16_fu_3120_p3;
                tmp_V_17_reg_4498 <= tmp_V_17_fu_3171_p3;
                tmp_V_18_reg_4519 <= tmp_V_18_fu_3222_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st26_fsm_25 = ap_CS_fsm)) then
                tmp_132_reg_4311 <= clip_i_V_fu_2210_p3(4 downto 4);
                tmp_133_reg_4316 <= clip_q_V_fu_2264_p3(4 downto 4);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not(ap_sig_bdd_493))) then
                tmp_13_reg_3799 <= m_mm2s_ctl_RDATA(31 downto 3);
                tmp_15_reg_3804 <= tmp_15_fu_499_p1;
                tmp_18_reg_3809 <= m_s2mm_ctl_RDATA(31 downto 3);
                tmp_21_reg_3814 <= tmp_21_fu_513_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st32_fsm_31 = ap_CS_fsm)) then
                tmp_25_i_reg_4389 <= tmp_25_i_fu_2766_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(ap_sig_bdd_493) and (ap_ST_st11_fsm_10 = ap_CS_fsm))) then
                tmp_29_reg_3819 <= m_mm2s_ctl_RDATA(31 downto 1);
                tmp_37_reg_3824 <= m_s2mm_ctl_RDATA(31 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(ap_sig_bdd_493) and (ap_ST_st14_fsm_13 = ap_CS_fsm))) then
                tmp_31_reg_3829 <= m_mm2s_ctl_RDATA(31 downto 13);
                tmp_34_reg_3834 <= tmp_34_fu_581_p1;
                tmp_44_reg_3839 <= m_s2mm_ctl_RDATA(31 downto 13);
                tmp_45_reg_3844 <= tmp_45_fu_595_p1;
            end if;
        end if;
    end process;
    m_s2mm_ctl_addr_reg_3740(31 downto 0) <= "00000000000000000000000000001100";
    p_this_assign_reg_3882(26 downto 0) <= "000000000000000000000000000";
    sh_assign_1_i_cast1_reg_3892(27 downto 9) <= "0000000000000000000";
    sh_assign_1_i_cast_reg_3897(31 downto 9) <= "00000000000000000000000";
    sh_assign_5_i_cast1_reg_3917(27 downto 9) <= "0000000000000000000";
    sh_assign_5_i_cast_reg_3922(31 downto 9) <= "00000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , ap_sig_ioackin_m_mm2s_ctl_ARREADY , ap_sig_ioackin_m_s2mm_ctl_ARREADY , ap_sig_bdd_467 , ap_sig_bdd_493 , ap_sig_bdd_522 , ap_sig_ioackin_m_mm2s_ctl_AWREADY , ap_sig_ioackin_m_mm2s_ctl_WREADY , ap_sig_ioackin_m_s2mm_ctl_AWREADY , ap_sig_ioackin_m_s2mm_ctl_WREADY , tmp_6_fu_767_p2 , ap_sig_bdd_590 , ap_sig_ioackin_s_out_V_V_TREADY , ap_sig_bdd_947)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_467))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not(ap_sig_bdd_493)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_522))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st10_fsm_9 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_947))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st11_fsm_10 => 
                if (not(ap_sig_bdd_493)) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st12_fsm_11 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st13_fsm_12 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_522))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st14_fsm_13 => 
                if (not(ap_sig_bdd_493)) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st15_fsm_14 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st16_fsm_15 => 
                if (not((ap_sig_bdd_522 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st17_fsm_16 => 
                if (not((ap_sig_bdd_522 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st18_fsm_17 => 
                if (not(ap_sig_bdd_522)) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st19_fsm_18 => 
                if (((ap_const_lv1_0 = tmp_6_fu_767_p2) and not(ap_sig_bdd_590))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif ((not((ap_const_lv1_0 = tmp_6_fu_767_p2)) and not(ap_sig_bdd_590))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                end if;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st38_fsm_37;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    F2_1_fu_1242_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_22_fu_1228_p1));
    F2_2_fu_863_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_s_fu_824_p1));
    F2_fu_1196_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_3_fu_1182_p1));
    
    newSel7_reg_4222_temp <= signed(newSel7_reg_4222);
    OP1_V_1_fu_1927_p1 <= std_logic_vector(resize(newSel7_reg_4222_temp,28));

    
    newSel3_reg_4217_temp <= signed(newSel3_reg_4217);
    OP1_V_fu_1914_p1 <= std_logic_vector(resize(newSel3_reg_4217_temp,28));

    
    p_Val2_1_fu_326_temp <= signed(p_Val2_1_fu_326);
    OP2_V_1_fu_1930_p1 <= std_logic_vector(resize(p_Val2_1_fu_326_temp,28));

    
    p_Val2_s_fu_322_temp <= signed(p_Val2_s_fu_322);
    OP2_V_fu_1917_p1 <= std_logic_vector(resize(p_Val2_s_fu_322_temp,28));

    Range1_all_ones_1_fu_1068_p2 <= (tmp1_fu_1062_p2 and tmp_58_fu_1029_p2);
    Range1_all_ones_fu_1290_p2 <= (Range2_all_ones_1_i_fu_1279_p3 and Range1_all_ones_1_reg_4019);
    Range1_all_zeros_1_fu_1121_p2 <= "1" when (man_V_17_reg_3952 = ap_const_lv54_0) else "0";
    Range1_all_zeros_fu_1295_p2 <= (Range1_all_ones_1_reg_4019 xor ap_const_lv1_1);
    Range2_V_1_fu_1092_p2 <= std_logic_vector(shift_right(unsigned(man_V_17_reg_3952),to_integer(unsigned('0' & tmp_63_fu_1088_p1(31-1 downto 0)))));
    Range2_all_ones_1_i_fu_1279_p3 <= 
        Range2_all_ones_reg_4037 when (or_cond88_i_fu_1274_p2(0) = '1') else 
        rev1_fu_1269_p2;
    Range2_all_ones_fu_1103_p2 <= "1" when (Range2_V_1_fu_1092_p2 = r_V_fu_1097_p2) else "0";

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, tmp_6_fu_767_p2, ap_sig_bdd_590)
    begin
        if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_767_p2) and not(ap_sig_bdd_590))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, tmp_6_fu_767_p2, ap_sig_bdd_590)
    begin
        if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_767_p2) and not(ap_sig_bdd_590))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv1_1;

    -- ap_sig_bdd_467 assign process. --
    ap_sig_bdd_467_assign_proc : process(sourceAddress_ap_vld_in_sig, destinationAddress_ap_vld_in_sig, iterations_ap_vld_in_sig, control_in_lf_p_ap_vld_in_sig, control_in_lf_i_ap_vld_in_sig, control_in_lf_out_gain_ap_vld_in_sig, control_in_reg_clr_ap_vld_in_sig, control_in_reg_init_ap_vld_in_sig, m_mm2s_ctl_RVALID, m_mm2s_ctl_BVALID, m_s2mm_ctl_RVALID, m_s2mm_ctl_BVALID)
    begin
                ap_sig_bdd_467 <= ((control_in_reg_init_ap_vld_in_sig = ap_const_logic_0) or (control_in_reg_clr_ap_vld_in_sig = ap_const_logic_0) or (control_in_lf_out_gain_ap_vld_in_sig = ap_const_logic_0) or (control_in_lf_i_ap_vld_in_sig = ap_const_logic_0) or (control_in_lf_p_ap_vld_in_sig = ap_const_logic_0) or (iterations_ap_vld_in_sig = ap_const_logic_0) or (destinationAddress_ap_vld_in_sig = ap_const_logic_0) or (sourceAddress_ap_vld_in_sig = ap_const_logic_0) or (m_mm2s_ctl_RVALID = ap_const_logic_0) or (m_mm2s_ctl_BVALID = ap_const_logic_0) or (m_s2mm_ctl_RVALID = ap_const_logic_0) or (m_s2mm_ctl_BVALID = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_493 assign process. --
    ap_sig_bdd_493_assign_proc : process(m_mm2s_ctl_RVALID, m_s2mm_ctl_RVALID)
    begin
                ap_sig_bdd_493 <= ((m_mm2s_ctl_RVALID = ap_const_logic_0) or (m_s2mm_ctl_RVALID = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_522 assign process. --
    ap_sig_bdd_522_assign_proc : process(m_mm2s_ctl_BVALID, m_s2mm_ctl_BVALID)
    begin
                ap_sig_bdd_522 <= ((m_mm2s_ctl_BVALID = ap_const_logic_0) or (m_s2mm_ctl_BVALID = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_590 assign process. --
    ap_sig_bdd_590_assign_proc : process(s_in_V_V_TVALID, tmp_6_fu_767_p2)
    begin
                ap_sig_bdd_590 <= ((s_in_V_V_TVALID = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_6_fu_767_p2)));
    end process;


    -- ap_sig_bdd_947 assign process. --
    ap_sig_bdd_947_assign_proc : process(m_mm2s_ctl_RVALID, m_mm2s_ctl_BVALID, m_s2mm_ctl_RVALID, m_s2mm_ctl_BVALID)
    begin
                ap_sig_bdd_947 <= ((m_mm2s_ctl_RVALID = ap_const_logic_0) or (m_mm2s_ctl_BVALID = ap_const_logic_0) or (m_s2mm_ctl_RVALID = ap_const_logic_0) or (m_s2mm_ctl_BVALID = ap_const_logic_0));
    end process;


    -- ap_sig_ioackin_m_mm2s_ctl_ARREADY assign process. --
    ap_sig_ioackin_m_mm2s_ctl_ARREADY_assign_proc : process(m_mm2s_ctl_ARREADY, ap_reg_ioackin_m_mm2s_ctl_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY)) then 
            ap_sig_ioackin_m_mm2s_ctl_ARREADY <= m_mm2s_ctl_ARREADY;
        else 
            ap_sig_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_mm2s_ctl_AWREADY assign process. --
    ap_sig_ioackin_m_mm2s_ctl_AWREADY_assign_proc : process(m_mm2s_ctl_AWREADY, ap_reg_ioackin_m_mm2s_ctl_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) then 
            ap_sig_ioackin_m_mm2s_ctl_AWREADY <= m_mm2s_ctl_AWREADY;
        else 
            ap_sig_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_mm2s_ctl_WREADY assign process. --
    ap_sig_ioackin_m_mm2s_ctl_WREADY_assign_proc : process(m_mm2s_ctl_WREADY, ap_reg_ioackin_m_mm2s_ctl_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) then 
            ap_sig_ioackin_m_mm2s_ctl_WREADY <= m_mm2s_ctl_WREADY;
        else 
            ap_sig_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_s2mm_ctl_ARREADY assign process. --
    ap_sig_ioackin_m_s2mm_ctl_ARREADY_assign_proc : process(m_s2mm_ctl_ARREADY, ap_reg_ioackin_m_s2mm_ctl_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) then 
            ap_sig_ioackin_m_s2mm_ctl_ARREADY <= m_s2mm_ctl_ARREADY;
        else 
            ap_sig_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_s2mm_ctl_AWREADY assign process. --
    ap_sig_ioackin_m_s2mm_ctl_AWREADY_assign_proc : process(m_s2mm_ctl_AWREADY, ap_reg_ioackin_m_s2mm_ctl_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) then 
            ap_sig_ioackin_m_s2mm_ctl_AWREADY <= m_s2mm_ctl_AWREADY;
        else 
            ap_sig_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_s2mm_ctl_WREADY assign process. --
    ap_sig_ioackin_m_s2mm_ctl_WREADY_assign_proc : process(m_s2mm_ctl_WREADY, ap_reg_ioackin_m_s2mm_ctl_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) then 
            ap_sig_ioackin_m_s2mm_ctl_WREADY <= m_s2mm_ctl_WREADY;
        else 
            ap_sig_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_s_out_V_V_TREADY assign process. --
    ap_sig_ioackin_s_out_V_V_TREADY_assign_proc : process(s_out_V_V_TREADY, ap_reg_ioackin_s_out_V_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_s_out_V_V_TREADY)) then 
            ap_sig_ioackin_s_out_V_V_TREADY <= s_out_V_V_TREADY;
        else 
            ap_sig_ioackin_s_out_V_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    brmerge1_i_fu_2577_p2 <= (overflow_4_fu_2538_p2 or underflow_4_not_i_fu_2571_p2);
    brmerge39_i1_i_fu_2092_p2 <= (p_not38_i1_i_fu_2086_p2 or newsignbit_0_not_i1_i_fu_2080_p2);
    brmerge39_i_i1_fu_2387_p2 <= (p_not38_i_i1_fu_2382_p2 or newsignbit_0_not_i_i1_fu_2377_p2);
    brmerge39_i_i_fu_2158_p2 <= (p_not38_i_i_fu_2152_p2 or newsignbit_0_not_i_i_fu_2146_p2);
    brmerge39_i_i_i_fu_2554_p2 <= (p_not38_i_i_i_fu_2549_p2 or newsignbit_0_not_i_i_i_fu_2544_p2);
    brmerge8_i_fu_2190_p2 <= (overflow_1_fu_2169_p2 or underflow_not_i_fu_2184_p2);
    brmerge92_demorgan_i_fu_1381_p2 <= (newsignbit_fu_1261_p3 and deleted_ones_0_i_fu_1340_p3);
    brmerge92_i_fu_1699_p2 <= (brmerge92_demorgan_i_reg_4132 xor ap_const_lv1_1);
    brmerge9_i_fu_2244_p2 <= (overflow_2_fu_2223_p2 or underflow_1_not_i_fu_2238_p2);
    brmerge_fu_1724_p2 <= (tmp4_fu_1719_p2 or brmerge92_demorgan_i_reg_4132);
    brmerge_i1_fu_2410_p2 <= (overflow_3_fu_2371_p2 or underflow_not_i1_fu_2404_p2);
    brmerge_i1_i_fu_2074_p2 <= (newsignbit_1_fu_2050_p3 or p_not_i1_i_fu_2068_p2);
    brmerge_i2_fu_2744_p2 <= (newsignbit_5_fu_2712_p3 or isneg_not_i_fu_2738_p2);
    brmerge_i_fu_1364_p2 <= (newsignbit_fu_1261_p3 or deleted_zeros_0_not_i_fu_1358_p2);
    brmerge_i_i1_fu_2140_p2 <= (newsignbit_2_fu_2116_p3 or p_not_i_i_fu_2134_p2);
    brmerge_i_i1_i_fu_2178_p2 <= (underflow_1_fu_2174_p2 or overflow_1_fu_2169_p2);
    brmerge_i_i2_fu_2361_p2 <= (newsignbit_3_reg_4333 or p_not_i_i1_fu_2356_p2);
    brmerge_i_i4_i_fu_2528_p2 <= (newsignbit_4_reg_4362 or p_not_i_i_i_fu_2523_p2);
    brmerge_i_i_fu_1709_p2 <= (underflow_fu_1704_p2 or overflow_reg_4126);
    brmerge_i_i_i1_fu_2398_p2 <= (underflow_3_fu_2393_p2 or overflow_3_fu_2371_p2);
    brmerge_i_i_i2_fu_2732_p2 <= (isneg_17_fu_2700_p3 xor newsignbit_5_fu_2712_p3);
    brmerge_i_i_i_fu_2232_p2 <= (underflow_2_fu_2228_p2 or overflow_2_fu_2223_p2);
    brmerge_i_i_i_i_fu_2565_p2 <= (underflow_4_fu_2560_p2 or overflow_4_fu_2538_p2);
    clip_i_V_fu_2210_p3 <= 
        p_Val2_34_mux_i_fu_2196_p3 when (brmerge8_i_fu_2190_p2(0) = '1') else 
        p_Val2_i_fu_2203_p3;
    clip_q_V_fu_2264_p3 <= 
        p_Val2_36_mux_i_fu_2250_p3 when (brmerge9_i_fu_2244_p2(0) = '1') else 
        p_Val2_1_i_fu_2257_p3;

    -- control_in_lf_i_ap_vld_in_sig assign process. --
    control_in_lf_i_ap_vld_in_sig_assign_proc : process(control_in_lf_i_ap_vld, control_in_lf_i_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = control_in_lf_i_ap_vld)) then 
            control_in_lf_i_ap_vld_in_sig <= control_in_lf_i_ap_vld;
        else 
            control_in_lf_i_ap_vld_in_sig <= control_in_lf_i_ap_vld_preg;
        end if; 
    end process;


    -- control_in_lf_i_in_sig assign process. --
    control_in_lf_i_in_sig_assign_proc : process(control_in_lf_i, control_in_lf_i_preg, control_in_lf_i_ap_vld)
    begin
        if ((ap_const_logic_1 = control_in_lf_i_ap_vld)) then 
            control_in_lf_i_in_sig <= control_in_lf_i;
        else 
            control_in_lf_i_in_sig <= control_in_lf_i_preg;
        end if; 
    end process;


    -- control_in_lf_out_gain_ap_vld_in_sig assign process. --
    control_in_lf_out_gain_ap_vld_in_sig_assign_proc : process(control_in_lf_out_gain_ap_vld, control_in_lf_out_gain_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = control_in_lf_out_gain_ap_vld)) then 
            control_in_lf_out_gain_ap_vld_in_sig <= control_in_lf_out_gain_ap_vld;
        else 
            control_in_lf_out_gain_ap_vld_in_sig <= control_in_lf_out_gain_ap_vld_preg;
        end if; 
    end process;


    -- control_in_lf_out_gain_in_sig assign process. --
    control_in_lf_out_gain_in_sig_assign_proc : process(control_in_lf_out_gain, control_in_lf_out_gain_preg, control_in_lf_out_gain_ap_vld)
    begin
        if ((ap_const_logic_1 = control_in_lf_out_gain_ap_vld)) then 
            control_in_lf_out_gain_in_sig <= control_in_lf_out_gain;
        else 
            control_in_lf_out_gain_in_sig <= control_in_lf_out_gain_preg;
        end if; 
    end process;


    -- control_in_lf_p_ap_vld_in_sig assign process. --
    control_in_lf_p_ap_vld_in_sig_assign_proc : process(control_in_lf_p_ap_vld, control_in_lf_p_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = control_in_lf_p_ap_vld)) then 
            control_in_lf_p_ap_vld_in_sig <= control_in_lf_p_ap_vld;
        else 
            control_in_lf_p_ap_vld_in_sig <= control_in_lf_p_ap_vld_preg;
        end if; 
    end process;


    -- control_in_lf_p_in_sig assign process. --
    control_in_lf_p_in_sig_assign_proc : process(control_in_lf_p, control_in_lf_p_preg, control_in_lf_p_ap_vld)
    begin
        if ((ap_const_logic_1 = control_in_lf_p_ap_vld)) then 
            control_in_lf_p_in_sig <= control_in_lf_p;
        else 
            control_in_lf_p_in_sig <= control_in_lf_p_preg;
        end if; 
    end process;


    -- control_in_reg_clr_ap_vld_in_sig assign process. --
    control_in_reg_clr_ap_vld_in_sig_assign_proc : process(control_in_reg_clr_ap_vld, control_in_reg_clr_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = control_in_reg_clr_ap_vld)) then 
            control_in_reg_clr_ap_vld_in_sig <= control_in_reg_clr_ap_vld;
        else 
            control_in_reg_clr_ap_vld_in_sig <= control_in_reg_clr_ap_vld_preg;
        end if; 
    end process;


    -- control_in_reg_clr_in_sig assign process. --
    control_in_reg_clr_in_sig_assign_proc : process(control_in_reg_clr, control_in_reg_clr_preg, control_in_reg_clr_ap_vld)
    begin
        if ((ap_const_logic_1 = control_in_reg_clr_ap_vld)) then 
            control_in_reg_clr_in_sig <= control_in_reg_clr;
        else 
            control_in_reg_clr_in_sig <= control_in_reg_clr_preg;
        end if; 
    end process;

    control_in_reg_clr_read_read_fu_359_p2 <= (0=>control_in_reg_clr_in_sig, others=>'-');

    -- control_in_reg_init_ap_vld_in_sig assign process. --
    control_in_reg_init_ap_vld_in_sig_assign_proc : process(control_in_reg_init_ap_vld, control_in_reg_init_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = control_in_reg_init_ap_vld)) then 
            control_in_reg_init_ap_vld_in_sig <= control_in_reg_init_ap_vld;
        else 
            control_in_reg_init_ap_vld_in_sig <= control_in_reg_init_ap_vld_preg;
        end if; 
    end process;


    -- control_in_reg_init_in_sig assign process. --
    control_in_reg_init_in_sig_assign_proc : process(control_in_reg_init, control_in_reg_init_preg, control_in_reg_init_ap_vld)
    begin
        if ((ap_const_logic_1 = control_in_reg_init_ap_vld)) then 
            control_in_reg_init_in_sig <= control_in_reg_init;
        else 
            control_in_reg_init_in_sig <= control_in_reg_init_preg;
        end if; 
    end process;

    cos_adr_V_3_fu_2871_p2 <= (sin_adr_V_reg_4408 xor ap_const_lv10_3FF);
    cos_adr_V_fu_2876_p3 <= 
        cos_adr_V_3_fu_2871_p2 when (tmp_144_reg_4402(0) = '1') else 
        sin_adr_V_reg_4408;
    cos_lut_address0 <= tmp_34_i_fu_2888_p1(10 - 1 downto 0);
    cos_lut_address1 <= tmp_35_i_fu_2893_p1(10 - 1 downto 0);

    -- cos_lut_ce0 assign process. --
    cos_lut_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st34_fsm_33 = ap_CS_fsm)) then 
            cos_lut_ce0 <= ap_const_logic_1;
        else 
            cos_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- cos_lut_ce1 assign process. --
    cos_lut_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st34_fsm_33 = ap_CS_fsm)) then 
            cos_lut_ce1 <= ap_const_logic_1;
        else 
            cos_lut_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    cos_out_V_1_fu_2951_p3 <= 
        cos_out_V_4_i_cast_fu_2898_p1 when (sel_tmp4_i_fu_2945_p2(0) = '1') else 
        cos_out_V_fu_2927_p2;
    cos_out_V_4_i_cast_fu_2898_p1 <= std_logic_vector(resize(unsigned(cos_lut_q0),16));
    cos_out_V_6_fu_2971_p3 <= 
        cos_out_V_4_i_cast_fu_2898_p1 when (sel_tmp7_i_fu_2965_p2(0) = '1') else 
        cos_out_V_1_fu_2951_p3;
    cos_out_V_fu_2927_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(cos_out_V_4_i_cast_fu_2898_p1));
    deleted_ones_0_i_fu_1340_p3 <= 
        Range1_all_ones_fu_1290_p2 when (sel_tmp33_fu_1321_p2(0) = '1') else 
        sel_tmp35_fu_1334_p3;
    deleted_zeros_0_i_fu_1326_p3 <= 
        p_93_i_fu_1300_p2 when (sel_tmp33_fu_1321_p2(0) = '1') else 
        sel_tmp32_fu_1313_p3;
    deleted_zeros_0_not_i_fu_1358_p2 <= (deleted_zeros_0_i_fu_1326_p3 xor ap_const_lv1_1);

    -- destinationAddress_ap_vld_in_sig assign process. --
    destinationAddress_ap_vld_in_sig_assign_proc : process(destinationAddress_ap_vld, destinationAddress_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = destinationAddress_ap_vld)) then 
            destinationAddress_ap_vld_in_sig <= destinationAddress_ap_vld;
        else 
            destinationAddress_ap_vld_in_sig <= destinationAddress_ap_vld_preg;
        end if; 
    end process;


    -- destinationAddress_in_sig assign process. --
    destinationAddress_in_sig_assign_proc : process(destinationAddress, destinationAddress_preg, destinationAddress_ap_vld)
    begin
        if ((ap_const_logic_1 = destinationAddress_ap_vld)) then 
            destinationAddress_in_sig <= destinationAddress;
        else 
            destinationAddress_in_sig <= destinationAddress_preg;
        end if; 
    end process;

    exp_V_fu_828_p2 <= std_logic_vector(unsigned(tmp_s_fu_824_p1) + unsigned(ap_const_lv12_C01));
    exp_tmp_V_1_fu_1218_p4 <= ireg_V_1_fu_1202_p1(62 downto 52);
    exp_tmp_V_2_fu_815_p4 <= ireg_V_2_reg_3869(62 downto 52);
    exp_tmp_V_fu_1172_p4 <= ireg_V_fu_1156_p1(62 downto 52);
    first_r_V_fu_778_p4 <= s_in_V_V_TDATA(127 downto 96);

    -- grp_fu_460_ce assign process. --
    grp_fu_460_ce_assign_proc : process(ap_CS_fsm, control_in_reg_clr_read_read_fu_359_p2, ap_sig_bdd_522, ap_sig_ioackin_m_mm2s_ctl_AWREADY, ap_sig_ioackin_m_mm2s_ctl_WREADY, ap_sig_ioackin_m_s2mm_ctl_AWREADY, ap_sig_ioackin_m_s2mm_ctl_WREADY, tmp_6_fu_767_p2, ap_sig_bdd_590)
    begin
        if ((((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_522) and not((control_in_reg_clr_read_read_fu_359_p2 = ap_const_lv1_0))) or ((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_6_fu_767_p2)) and not(ap_sig_bdd_590)) or (ap_ST_st20_fsm_19 = ap_CS_fsm) or (ap_ST_st21_fsm_20 = ap_CS_fsm) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_522 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and not((control_in_reg_clr_read_read_fu_359_p2 = ap_const_lv1_0))) or (not((ap_sig_bdd_522 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm) and not((control_in_reg_clr_read_read_fu_359_p2 = ap_const_lv1_0))))) then 
            grp_fu_460_ce <= ap_const_logic_1;
        else 
            grp_fu_460_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_460_p0 assign process. --
    grp_fu_460_p0_assign_proc : process(ap_CS_fsm, control_in_reg_init_in_sig, v_assign_fu_798_p1)
    begin
        if ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then 
            grp_fu_460_p0 <= v_assign_fu_798_p1;
        elsif ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
            grp_fu_460_p0 <= control_in_reg_init_in_sig;
        else 
            grp_fu_460_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_463_ce assign process. --
    grp_fu_463_ce_assign_proc : process(ap_CS_fsm, tmp_6_fu_767_p2, ap_sig_bdd_590)
    begin
        if ((((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_6_fu_767_p2)) and not(ap_sig_bdd_590)) or (ap_ST_st20_fsm_19 = ap_CS_fsm) or (ap_ST_st21_fsm_20 = ap_CS_fsm))) then 
            grp_fu_463_ce <= ap_const_logic_1;
        else 
            grp_fu_463_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_463_p0 <= second_r_V_fu_788_p4;
    i_1_fu_772_p2 <= std_logic_vector(unsigned(i_reg_448) + unsigned(ap_const_lv32_1));
    icmp1_fu_1619_p2 <= "1" when (tmp_114_fu_1609_p4 = ap_const_lv8_0) else "0";
    icmp_fu_1463_p2 <= "1" when (tmp_80_fu_1453_p4 = ap_const_lv8_0) else "0";
    ireg_V_1_fu_1202_p1 <= grp_fu_463_p1;
    ireg_V_2_fu_652_p1 <= grp_fu_460_p1;
    ireg_V_fu_1156_p1 <= grp_fu_460_p1;
    isNeg_1_fu_713_p3 <= sh_assign_1_fu_707_p2(8 downto 8);
    isneg_12_fu_808_p3 <= ireg_V_2_reg_3869(63 downto 63);
    isneg_17_fu_2700_p3 <= p_Val2_44_fu_2694_p2(28 downto 28);
    isneg_not_i_fu_2738_p2 <= (isneg_17_fu_2700_p3 xor ap_const_lv1_1);

    -- iterations_ap_vld_in_sig assign process. --
    iterations_ap_vld_in_sig_assign_proc : process(iterations_ap_vld, iterations_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = iterations_ap_vld)) then 
            iterations_ap_vld_in_sig <= iterations_ap_vld;
        else 
            iterations_ap_vld_in_sig <= iterations_ap_vld_preg;
        end if; 
    end process;


    -- iterations_in_sig assign process. --
    iterations_in_sig_assign_proc : process(iterations, iterations_preg, iterations_ap_vld)
    begin
        if ((ap_const_logic_1 = iterations_ap_vld)) then 
            iterations_in_sig <= iterations;
        else 
            iterations_in_sig <= iterations_preg;
        end if; 
    end process;

    j_1_fu_3328_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(tmp_82_reg_4482));
    j_2_fu_3397_p2 <= std_logic_vector(unsigned(ap_const_lv32_C) - unsigned(tmp_92_reg_4503));
    j_3_fu_3466_p2 <= std_logic_vector(unsigned(ap_const_lv32_C) - unsigned(tmp_102_reg_4524));
    j_fu_3259_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(tmp_71_reg_4461));
    lD_fu_1058_p1 <= tmp_60_fu_1053_p2(1 - 1 downto 0);
    m_mm2s_ctl_ARADDR <= ap_const_lv32_0;
    m_mm2s_ctl_ARBURST <= ap_const_lv2_0;
    m_mm2s_ctl_ARCACHE <= ap_const_lv4_0;
    m_mm2s_ctl_ARID <= ap_const_lv1_0;
    m_mm2s_ctl_ARLEN <= ap_const_lv32_1;
    m_mm2s_ctl_ARLOCK <= ap_const_lv2_0;
    m_mm2s_ctl_ARPROT <= ap_const_lv3_0;
    m_mm2s_ctl_ARQOS <= ap_const_lv4_0;
    m_mm2s_ctl_ARREGION <= ap_const_lv4_0;
    m_mm2s_ctl_ARSIZE <= ap_const_lv3_0;
    m_mm2s_ctl_ARUSER <= ap_const_lv1_0;

    -- m_mm2s_ctl_ARVALID assign process. --
    m_mm2s_ctl_ARVALID_assign_proc : process(ap_start, ap_CS_fsm, ap_sig_bdd_467, ap_sig_bdd_522, ap_reg_ioackin_m_mm2s_ctl_ARREADY, ap_sig_bdd_947)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY) and not(ap_sig_bdd_467)) or (not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY) and (ap_ST_st7_fsm_6 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY) and (ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_947)) or (not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
            m_mm2s_ctl_ARVALID <= ap_const_logic_1;
        else 
            m_mm2s_ctl_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_mm2s_ctl_AWADDR assign process. --
    m_mm2s_ctl_AWADDR_assign_proc : process(ap_CS_fsm, ap_sig_bdd_522, ap_reg_ioackin_m_mm2s_ctl_AWREADY)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY))) then 
            m_mm2s_ctl_AWADDR <= ap_const_lv64_A(32 - 1 downto 0);
        elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY))) then 
            m_mm2s_ctl_AWADDR <= ap_const_lv64_6(32 - 1 downto 0);
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)))) then 
            m_mm2s_ctl_AWADDR <= ap_const_lv32_0;
        else 
            m_mm2s_ctl_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_mm2s_ctl_AWBURST <= ap_const_lv2_0;
    m_mm2s_ctl_AWCACHE <= ap_const_lv4_0;
    m_mm2s_ctl_AWID <= ap_const_lv1_0;
    m_mm2s_ctl_AWLEN <= ap_const_lv32_1;
    m_mm2s_ctl_AWLOCK <= ap_const_lv2_0;
    m_mm2s_ctl_AWPROT <= ap_const_lv3_0;
    m_mm2s_ctl_AWQOS <= ap_const_lv4_0;
    m_mm2s_ctl_AWREGION <= ap_const_lv4_0;
    m_mm2s_ctl_AWSIZE <= ap_const_lv3_0;
    m_mm2s_ctl_AWUSER <= ap_const_lv1_0;

    -- m_mm2s_ctl_AWVALID assign process. --
    m_mm2s_ctl_AWVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_522, ap_reg_ioackin_m_mm2s_ctl_AWREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)))) then 
            m_mm2s_ctl_AWVALID <= ap_const_logic_1;
        else 
            m_mm2s_ctl_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_mm2s_ctl_BREADY assign process. --
    m_mm2s_ctl_BREADY_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_m_mm2s_ctl_ARREADY, ap_sig_ioackin_m_s2mm_ctl_ARREADY, ap_sig_bdd_467, ap_sig_bdd_522, ap_sig_ioackin_m_mm2s_ctl_AWREADY, ap_sig_ioackin_m_mm2s_ctl_WREADY, ap_sig_ioackin_m_s2mm_ctl_AWREADY, ap_sig_ioackin_m_s2mm_ctl_WREADY, ap_sig_bdd_947)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_467))) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_522 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_522 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_522)) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_522))) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_947))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_522)) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
            m_mm2s_ctl_BREADY <= ap_const_logic_1;
        else 
            m_mm2s_ctl_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_mm2s_ctl_RREADY assign process. --
    m_mm2s_ctl_RREADY_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_m_mm2s_ctl_ARREADY, ap_sig_ioackin_m_s2mm_ctl_ARREADY, ap_sig_bdd_467, ap_sig_bdd_493, ap_sig_bdd_947)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_467))) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and not(ap_sig_bdd_493)) or (not(ap_sig_bdd_493) and (ap_ST_st11_fsm_10 = ap_CS_fsm)) or (not(ap_sig_bdd_493) and (ap_ST_st14_fsm_13 = ap_CS_fsm)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_947))))) then 
            m_mm2s_ctl_RREADY <= ap_const_logic_1;
        else 
            m_mm2s_ctl_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_mm2s_ctl_WDATA assign process. --
    m_mm2s_ctl_WDATA_assign_proc : process(ap_CS_fsm, sourceAddress_in_sig, ap_sig_bdd_522, ap_reg_ioackin_m_mm2s_ctl_WREADY, m_mm2s_ctl_assign_fu_517_p4, tmp_1_fu_555_p3, tmp_2_fu_599_p4, read_length_fu_631_p2)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY))) then 
            m_mm2s_ctl_WDATA <= read_length_fu_631_p2;
        elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY))) then 
            m_mm2s_ctl_WDATA <= sourceAddress_in_sig;
        elsif (((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm))) then 
            m_mm2s_ctl_WDATA <= tmp_2_fu_599_p4;
        elsif (((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm))) then 
            m_mm2s_ctl_WDATA <= tmp_1_fu_555_p3;
        elsif (((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            m_mm2s_ctl_WDATA <= m_mm2s_ctl_assign_fu_517_p4;
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)))) then 
            m_mm2s_ctl_WDATA <= ap_const_lv32_0;
        else 
            m_mm2s_ctl_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_mm2s_ctl_WID <= ap_const_lv1_0;
    m_mm2s_ctl_WLAST <= ap_const_logic_0;
    m_mm2s_ctl_WSTRB <= ap_const_lv4_F;
    m_mm2s_ctl_WUSER <= ap_const_lv1_0;

    -- m_mm2s_ctl_WVALID assign process. --
    m_mm2s_ctl_WVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_522, ap_reg_ioackin_m_mm2s_ctl_WREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)))) then 
            m_mm2s_ctl_WVALID <= ap_const_logic_1;
        else 
            m_mm2s_ctl_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_mm2s_ctl_assign_fu_517_p4 <= ((tmp_13_reg_3799 & ap_const_lv1_1) & tmp_15_reg_3804);

    -- m_s2mm_ctl_ARADDR assign process. --
    m_s2mm_ctl_ARADDR_assign_proc : process(ap_start, ap_CS_fsm, m_s2mm_ctl_addr_reg_3740, ap_sig_bdd_467, ap_sig_bdd_522, ap_sig_bdd_947, ap_reg_ioackin_m_s2mm_ctl_ARREADY)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(ap_sig_bdd_467) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_522) and (ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_947) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_522) and (ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)))) then 
            m_s2mm_ctl_ARADDR <= m_s2mm_ctl_addr_reg_3740;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY))) then 
            m_s2mm_ctl_ARADDR <= ap_const_lv64_C(32 - 1 downto 0);
        else 
            m_s2mm_ctl_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_s2mm_ctl_ARBURST <= ap_const_lv2_0;
    m_s2mm_ctl_ARCACHE <= ap_const_lv4_0;
    m_s2mm_ctl_ARID <= ap_const_lv1_0;
    m_s2mm_ctl_ARLEN <= ap_const_lv32_1;
    m_s2mm_ctl_ARLOCK <= ap_const_lv2_0;
    m_s2mm_ctl_ARPROT <= ap_const_lv3_0;
    m_s2mm_ctl_ARQOS <= ap_const_lv4_0;
    m_s2mm_ctl_ARREGION <= ap_const_lv4_0;
    m_s2mm_ctl_ARSIZE <= ap_const_lv3_0;
    m_s2mm_ctl_ARUSER <= ap_const_lv1_0;

    -- m_s2mm_ctl_ARVALID assign process. --
    m_s2mm_ctl_ARVALID_assign_proc : process(ap_start, ap_CS_fsm, ap_sig_bdd_467, ap_sig_bdd_522, ap_sig_bdd_947, ap_reg_ioackin_m_s2mm_ctl_ARREADY)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(ap_sig_bdd_467) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_522) and (ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_947) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_522) and (ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)))) then 
            m_s2mm_ctl_ARVALID <= ap_const_logic_1;
        else 
            m_s2mm_ctl_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_s2mm_ctl_AWADDR assign process. --
    m_s2mm_ctl_AWADDR_assign_proc : process(ap_CS_fsm, m_s2mm_ctl_addr_reg_3740, ap_sig_bdd_522, ap_reg_ioackin_m_s2mm_ctl_AWREADY)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY))) then 
            m_s2mm_ctl_AWADDR <= ap_const_lv64_16(32 - 1 downto 0);
        elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY))) then 
            m_s2mm_ctl_AWADDR <= ap_const_lv64_12(32 - 1 downto 0);
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)))) then 
            m_s2mm_ctl_AWADDR <= m_s2mm_ctl_addr_reg_3740;
        else 
            m_s2mm_ctl_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_s2mm_ctl_AWBURST <= ap_const_lv2_0;
    m_s2mm_ctl_AWCACHE <= ap_const_lv4_0;
    m_s2mm_ctl_AWID <= ap_const_lv1_0;
    m_s2mm_ctl_AWLEN <= ap_const_lv32_1;
    m_s2mm_ctl_AWLOCK <= ap_const_lv2_0;
    m_s2mm_ctl_AWPROT <= ap_const_lv3_0;
    m_s2mm_ctl_AWQOS <= ap_const_lv4_0;
    m_s2mm_ctl_AWREGION <= ap_const_lv4_0;
    m_s2mm_ctl_AWSIZE <= ap_const_lv3_0;
    m_s2mm_ctl_AWUSER <= ap_const_lv1_0;

    -- m_s2mm_ctl_AWVALID assign process. --
    m_s2mm_ctl_AWVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_522, ap_reg_ioackin_m_s2mm_ctl_AWREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)))) then 
            m_s2mm_ctl_AWVALID <= ap_const_logic_1;
        else 
            m_s2mm_ctl_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_s2mm_ctl_BREADY assign process. --
    m_s2mm_ctl_BREADY_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_m_mm2s_ctl_ARREADY, ap_sig_ioackin_m_s2mm_ctl_ARREADY, ap_sig_bdd_467, ap_sig_bdd_522, ap_sig_ioackin_m_mm2s_ctl_AWREADY, ap_sig_ioackin_m_mm2s_ctl_WREADY, ap_sig_ioackin_m_s2mm_ctl_AWREADY, ap_sig_ioackin_m_s2mm_ctl_WREADY, ap_sig_bdd_947)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_467))) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_522 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_522 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_522)) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_522))) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_947))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_522)) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
            m_s2mm_ctl_BREADY <= ap_const_logic_1;
        else 
            m_s2mm_ctl_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_s2mm_ctl_RREADY assign process. --
    m_s2mm_ctl_RREADY_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_m_mm2s_ctl_ARREADY, ap_sig_ioackin_m_s2mm_ctl_ARREADY, ap_sig_bdd_467, ap_sig_bdd_493, ap_sig_bdd_947)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_467))) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and not(ap_sig_bdd_493)) or (not(ap_sig_bdd_493) and (ap_ST_st11_fsm_10 = ap_CS_fsm)) or (not(ap_sig_bdd_493) and (ap_ST_st14_fsm_13 = ap_CS_fsm)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_947))))) then 
            m_s2mm_ctl_RREADY <= ap_const_logic_1;
        else 
            m_s2mm_ctl_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_s2mm_ctl_WDATA assign process. --
    m_s2mm_ctl_WDATA_assign_proc : process(ap_CS_fsm, destinationAddress_in_sig, ap_sig_bdd_522, read_length_fu_631_p2, ap_reg_ioackin_m_s2mm_ctl_WREADY, tmp_fu_526_p4, tmp_4_fu_563_p3, tmp_5_fu_608_p4)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= read_length_fu_631_p2;
        elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= destinationAddress_in_sig;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= tmp_5_fu_608_p4;
        elsif (((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= tmp_4_fu_563_p3;
        elsif (((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= tmp_fu_526_p4;
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)))) then 
            m_s2mm_ctl_WDATA <= ap_const_lv32_0;
        else 
            m_s2mm_ctl_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_s2mm_ctl_WID <= ap_const_lv1_0;
    m_s2mm_ctl_WLAST <= ap_const_logic_0;
    m_s2mm_ctl_WSTRB <= ap_const_lv4_F;
    m_s2mm_ctl_WUSER <= ap_const_lv1_0;

    -- m_s2mm_ctl_WVALID assign process. --
    m_s2mm_ctl_WVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_522, ap_reg_ioackin_m_s2mm_ctl_WREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_522) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)))) then 
            m_s2mm_ctl_WVALID <= ap_const_logic_1;
        else 
            m_s2mm_ctl_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_s2mm_ctl_addr_fu_466_p2 <= ap_const_lv64_C(32 - 1 downto 0);
    man_V_17_fu_855_p3 <= 
        man_V_7_fu_849_p2 when (isneg_12_fu_808_p3(0) = '1') else 
        p_Result_30_fu_845_p1;
    
    p_Result_s_reg_4540_temp <= signed(p_Result_s_reg_4540);
    man_V_18_fu_3552_p0 <= std_logic_vector(resize(p_Result_s_reg_4540_temp,23));

    man_V_18_fu_3552_p2 <= std_logic_vector(shift_left(unsigned(man_V_18_fu_3552_p0),to_integer(unsigned('0' & tmp_88_cast_reg_4545(23-1 downto 0)))));
    
    p_Result_8_reg_4555_temp <= signed(p_Result_8_reg_4555);
    man_V_19_fu_3590_p0 <= std_logic_vector(resize(p_Result_8_reg_4555_temp,23));

    man_V_19_fu_3590_p2 <= std_logic_vector(shift_left(unsigned(man_V_19_fu_3590_p0),to_integer(unsigned('0' & tmp_101_cast_reg_4560(23-1 downto 0)))));
    man_V_1_fu_1398_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_28_fu_1394_p1));
    
    p_Result_20_reg_4570_temp <= signed(p_Result_20_reg_4570);
    man_V_20_fu_3628_p0 <= std_logic_vector(resize(p_Result_20_reg_4570_temp,23));

    man_V_20_fu_3628_p2 <= std_logic_vector(shift_left(unsigned(man_V_20_fu_3628_p0),to_integer(unsigned('0' & tmp_114_cast_reg_4575(23-1 downto 0)))));
    
    p_Result_25_reg_4585_temp <= signed(p_Result_25_reg_4585);
    man_V_21_fu_3666_p0 <= std_logic_vector(resize(p_Result_25_reg_4585_temp,23));

    man_V_21_fu_3666_p2 <= std_logic_vector(shift_left(unsigned(man_V_21_fu_3666_p0),to_integer(unsigned('0' & tmp_127_cast_reg_4590(23-1 downto 0)))));
    man_V_2_fu_1404_p3 <= 
        man_V_1_fu_1398_p2 when (isneg_reg_4063(0) = '1') else 
        p_Result_28_fu_1394_p1;
    man_V_4_fu_1554_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_29_fu_1550_p1));
    man_V_5_fu_1560_p3 <= 
        man_V_4_fu_1554_p2 when (isneg_1_reg_4088(0) = '1') else 
        p_Result_29_fu_1550_p1;
    man_V_7_fu_849_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_30_fu_845_p1));
    neg_src_fu_1353_p2 <= (isneg_12_reg_3945 and sel_tmp36_fu_1348_p2);
    newSel1_fu_1809_p3 <= 
        tmp_90_reg_4149 when (sel_tmp8_fu_1783_p2(0) = '1') else 
        tmp_78_reg_4138;
    newSel2_fu_1820_p3 <= 
        newSel_fu_1797_p3 when (or_cond_fu_1804_p2(0) = '1') else 
        newSel1_fu_1809_p3;
    newSel3_fu_1834_p3 <= 
        newSel2_fu_1820_p3 when (or_cond2_fu_1828_p2(0) = '1') else 
        ap_const_lv16_0;
    newSel4_fu_1863_p3 <= 
        p_1_fu_1842_p3 when (sel_tmp17_fu_1858_p2(0) = '1') else 
        tmp_116_reg_4191;
    newSel5_fu_1875_p3 <= 
        tmp_115_reg_4186 when (sel_tmp13_fu_1849_p2(0) = '1') else 
        tmp_113_reg_4175;
    newSel6_fu_1886_p3 <= 
        newSel4_fu_1863_p3 when (or_cond3_fu_1870_p2(0) = '1') else 
        newSel5_fu_1875_p3;
    newSel7_fu_1900_p3 <= 
        newSel6_fu_1886_p3 when (or_cond5_fu_1894_p2(0) = '1') else 
        ap_const_lv16_0;
    newSel8_fu_2979_p3 <= 
        sin_out_V_4_i_cast_fu_2902_p1 when (sel_tmp7_i_fu_2965_p2(0) = '1') else 
        sin_out_V_fu_2921_p2;
    newSel9_fu_2993_p3 <= 
        sin_out_V_4_i_cast_fu_2902_p1 when (tmp_36_i_fu_2906_p2(0) = '1') else 
        sin_out_V_fu_2921_p2;
    newSel_fu_1797_p3 <= 
        p_s_fu_1776_p3 when (sel_tmp5_fu_1792_p2(0) = '1') else 
        tmp_100_reg_4154;
    newsignbit_0_not_i1_i_fu_2080_p2 <= (newsignbit_1_fu_2050_p3 xor ap_const_lv1_1);
    newsignbit_0_not_i_i1_fu_2377_p2 <= (newsignbit_3_reg_4333 xor ap_const_lv1_1);
    newsignbit_0_not_i_i_fu_2146_p2 <= (newsignbit_2_fu_2116_p3 xor ap_const_lv1_1);
    newsignbit_0_not_i_i_i_fu_2544_p2 <= (newsignbit_4_reg_4362 xor ap_const_lv1_1);
    newsignbit_1_fu_2050_p3 <= p_Val2_7_fu_1986_p2(24 downto 24);
    newsignbit_2_fu_2116_p3 <= p_Val2_10_fu_2016_p2(24 downto 24);
    newsignbit_5_fu_2712_p3 <= p_Val2_44_fu_2694_p2(27 downto 27);
    newsignbit_fu_1261_p3 <= p_Val2_4_fu_1255_p3(27 downto 27);
    or_cond1_fu_1815_p2 <= (sel_tmp8_fu_1783_p2 or sel_tmp2_reg_4159);
    or_cond2_fu_1828_p2 <= (or_cond_fu_1804_p2 or or_cond1_fu_1815_p2);
    or_cond3_fu_1870_p2 <= (sel_tmp17_fu_1858_p2 or sel_tmp15_reg_4207);
    or_cond4_fu_1881_p2 <= (sel_tmp13_fu_1849_p2 or sel_tmp10_reg_4196);
    or_cond5_fu_1894_p2 <= (or_cond3_fu_1870_p2 or or_cond4_fu_1881_p2);
    or_cond6_fu_2987_p2 <= (sel_tmp7_i_fu_2965_p2 or sel_tmp4_i_fu_2945_p2);
    or_cond88_i_fu_1274_p2 <= (tmp_61_reg_4031 and rev1_fu_1269_p2);
    or_cond89_i_fu_1286_p2 <= (tmp_61_reg_4031 and rev_reg_4014);
    or_cond_fu_1804_p2 <= (sel_tmp5_fu_1792_p2 or sel_tmp3_reg_4170);
    overflow_1_fu_2169_p2 <= (brmerge_i1_i_reg_4276 and tmp_9_i_fu_2164_p2);
    overflow_2_fu_2223_p2 <= (brmerge_i_i1_reg_4301 and tmp_3_i_fu_2218_p2);
    overflow_3_fu_2371_p2 <= (brmerge_i_i2_fu_2361_p2 and tmp_4_i_fu_2366_p2);
    overflow_4_fu_2538_p2 <= (brmerge_i_i4_i_fu_2528_p2 and tmp_9_i1_fu_2533_p2);
    overflow_fu_1375_p2 <= (brmerge_i_fu_1364_p2 and tmp_67_fu_1370_p2);
    p_1_fu_1842_p3 <= 
        ap_const_lv16_FFFF when (isneg_1_reg_4088(0) = '1') else 
        ap_const_lv16_0;
    p_2_fu_1248_p3 <= 
        ap_const_lv28_FFFFFFF when (isneg_12_reg_3945(0) = '1') else 
        ap_const_lv28_0;
    p_5_fu_1768_p3 <= 
        this_assign_mux_fu_1729_p3 when (sel_tmp39_fu_1763_p2(0) = '1') else 
        sel_tmp38_fu_1751_p3;
    p_93_i_fu_1300_p2 <= (tmp_64_reg_4042 and Range1_all_zeros_fu_1295_p2);
    p_Repl2_10_fu_3694_p3 <= 
        ap_const_lv32_0 when (tmp_81_reg_4472(0) = '1') else 
        res_V_5_fu_3604_p3;
    p_Repl2_10_trunc_fu_3611_p2 <= std_logic_vector(unsigned(ap_const_lv8_80) - unsigned(tmp_150_reg_4509));
    p_Repl2_11_fu_3687_p3 <= 
        ap_const_lv32_0 when (tmp_70_reg_4451(0) = '1') else 
        res_V_fu_3566_p3;
    p_Repl2_14_trunc_fu_3649_p2 <= std_logic_vector(unsigned(ap_const_lv8_80) - unsigned(tmp_153_reg_4530));
    p_Repl2_2_trunc_fu_3535_p2 <= std_logic_vector(unsigned(ap_const_lv8_82) - unsigned(tmp_145_reg_4467));
    p_Repl2_6_trunc_fu_3573_p2 <= std_logic_vector(unsigned(ap_const_lv8_82) - unsigned(tmp_147_reg_4488));
    p_Repl2_8_fu_3708_p3 <= 
        ap_const_lv32_0 when (tmp_101_reg_4514(0) = '1') else 
        res_V_11_fu_3680_p3;
    p_Repl2_9_fu_3701_p3 <= 
        ap_const_lv32_0 when (tmp_91_reg_4493(0) = '1') else 
        res_V_8_fu_3642_p3;
    
    p_Result_20_fu_3433_p4_proc : process(tmp_V_17_reg_4498, tmp_96_fu_3419_p3, tmp_97_fu_3427_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(13+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(13+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable p_Result_20_fu_3433_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(13 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := tmp_96_fu_3419_p3(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := tmp_97_fu_3427_p2(4 - 1 downto 0);
        v0_cpy := tmp_V_17_reg_4498;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(13-1-unsigned(tmp_97_fu_3427_p2(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(13-1-unsigned(tmp_96_fu_3419_p3(4-1 downto 0)));
            for p_Result_20_fu_3433_p4_i in 0 to 13-1 loop
                v0_cpy(p_Result_20_fu_3433_p4_i) := tmp_V_17_reg_4498(13-1-p_Result_20_fu_3433_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(13-1 downto 0)))));
        res_mask := res_mask(13-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_20_fu_3433_p4 <= resvalue(13-1 downto 0);
    end process;

    
    p_Result_25_fu_3502_p4_proc : process(tmp_V_18_reg_4519, tmp_106_fu_3488_p3, tmp_107_fu_3496_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(13+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(13+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable p_Result_25_fu_3502_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(13 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := tmp_106_fu_3488_p3(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := tmp_107_fu_3496_p2(4 - 1 downto 0);
        v0_cpy := tmp_V_18_reg_4519;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(13-1-unsigned(tmp_107_fu_3496_p2(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(13-1-unsigned(tmp_106_fu_3488_p3(4-1 downto 0)));
            for p_Result_25_fu_3502_p4_i in 0 to 13-1 loop
                v0_cpy(p_Result_25_fu_3502_p4_i) := tmp_V_18_reg_4519(13-1-p_Result_25_fu_3502_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(13-1 downto 0)))));
        res_mask := res_mask(13-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_25_fu_3502_p4 <= resvalue(13-1 downto 0);
    end process;

    p_Result_28_fu_1394_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_1387_p3),54));
    p_Result_29_fu_1550_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_1543_p3),54));
    p_Result_30_fu_845_p1 <= std_logic_vector(resize(unsigned(tmp_38_fu_837_p3),54));
    p_Result_31_fu_2295_p5 <= (tmp_i_fu_2288_p3 & ap_const_lv5_0(2 downto 0));
    p_Result_32_fu_2445_p5 <= (tmp_1_i_fu_2438_p3 & ap_const_lv5_0(2 downto 0));
    
    p_Result_33_fu_3076_p4_proc : process(tmp_V_15_fu_3069_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable p_Result_33_fu_3076_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_10(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_15_fu_3069_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_10(5-1 downto 0)));
            for p_Result_33_fu_3076_p4_i in 0 to 17-1 loop
                v0_cpy(p_Result_33_fu_3076_p4_i) := tmp_V_15_fu_3069_p3(17-1-p_Result_33_fu_3076_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(17-1 downto 0)))));
        res_mask := res_mask(17-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_33_fu_3076_p4 <= resvalue(17-1 downto 0);
    end process;

    p_Result_34_fu_3086_p3 <= (ap_const_lv15_7FFF & p_Result_33_fu_3076_p4);
    p_Result_35_fu_3540_p4 <= ((isneg_13_reg_4261 & p_Repl2_2_trunc_fu_3535_p2) & ap_const_lv23_0);
    p_Result_36_fu_3557_p4 <= ((isneg_13_reg_4261 & p_Repl2_2_trunc_fu_3535_p2) & man_V_18_fu_3552_p2);
    
    p_Result_37_fu_3127_p4_proc : process(tmp_V_16_fu_3120_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable p_Result_37_fu_3127_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_10(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_16_fu_3120_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_10(5-1 downto 0)));
            for p_Result_37_fu_3127_p4_i in 0 to 17-1 loop
                v0_cpy(p_Result_37_fu_3127_p4_i) := tmp_V_16_fu_3120_p3(17-1-p_Result_37_fu_3127_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(17-1 downto 0)))));
        res_mask := res_mask(17-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_37_fu_3127_p4 <= resvalue(17-1 downto 0);
    end process;

    p_Result_38_fu_3137_p3 <= (ap_const_lv15_7FFF & p_Result_37_fu_3127_p4);
    p_Result_39_fu_3578_p4 <= ((isneg_14_reg_4286 & p_Repl2_6_trunc_fu_3573_p2) & ap_const_lv23_0);
    p_Result_3_i_fu_2124_p4 <= p_Val2_10_fu_2016_p2(26 downto 25);
    p_Result_40_fu_3595_p4 <= ((isneg_14_reg_4286 & p_Repl2_6_trunc_fu_3573_p2) & man_V_19_fu_3590_p2);
    
    p_Result_41_fu_3178_p4_proc : process(tmp_V_17_fu_3171_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(13+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(13+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable p_Result_41_fu_3178_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(13 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_C(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_17_fu_3171_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(13-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(13-1-unsigned(ap_const_lv32_C(4-1 downto 0)));
            for p_Result_41_fu_3178_p4_i in 0 to 13-1 loop
                v0_cpy(p_Result_41_fu_3178_p4_i) := tmp_V_17_fu_3171_p3(13-1-p_Result_41_fu_3178_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(13-1 downto 0)))));
        res_mask := res_mask(13-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_41_fu_3178_p4 <= resvalue(13-1 downto 0);
    end process;

    p_Result_42_fu_3188_p3 <= (ap_const_lv19_7FFFF & p_Result_41_fu_3178_p4);
    p_Result_43_fu_3616_p4 <= ((isneg_18_reg_4437 & p_Repl2_10_trunc_fu_3611_p2) & ap_const_lv23_0);
    p_Result_44_fu_3633_p4 <= ((isneg_18_reg_4437 & p_Repl2_10_trunc_fu_3611_p2) & man_V_20_fu_3628_p2);
    
    p_Result_45_fu_3229_p4_proc : process(tmp_V_18_fu_3222_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(13+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(13+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable p_Result_45_fu_3229_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(13 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_C(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_18_fu_3222_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(13-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(13-1-unsigned(ap_const_lv32_C(4-1 downto 0)));
            for p_Result_45_fu_3229_p4_i in 0 to 13-1 loop
                v0_cpy(p_Result_45_fu_3229_p4_i) := tmp_V_18_fu_3222_p3(13-1-p_Result_45_fu_3229_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(13-1 downto 0)))));
        res_mask := res_mask(13-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_45_fu_3229_p4 <= resvalue(13-1 downto 0);
    end process;

    p_Result_46_fu_3239_p3 <= (ap_const_lv19_7FFFF & p_Result_45_fu_3229_p4);
    p_Result_47_fu_3654_p4 <= ((isneg_19_reg_4444 & p_Repl2_14_trunc_fu_3649_p2) & ap_const_lv23_0);
    p_Result_48_fu_3671_p4 <= ((isneg_19_reg_4444 & p_Repl2_14_trunc_fu_3649_p2) & man_V_21_fu_3666_p2);
    
    p_Result_8_fu_3364_p4_proc : process(tmp_V_16_reg_4477, tmp_86_fu_3350_p3, tmp_87_fu_3358_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable p_Result_8_fu_3364_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := tmp_86_fu_3350_p3(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := tmp_87_fu_3358_p2(5 - 1 downto 0);
        v0_cpy := tmp_V_16_reg_4477;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(tmp_87_fu_3358_p2(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(tmp_86_fu_3350_p3(5-1 downto 0)));
            for p_Result_8_fu_3364_p4_i in 0 to 17-1 loop
                v0_cpy(p_Result_8_fu_3364_p4_i) := tmp_V_16_reg_4477(17-1-p_Result_8_fu_3364_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(17-1 downto 0)))));
        res_mask := res_mask(17-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_8_fu_3364_p4 <= resvalue(17-1 downto 0);
    end process;

    p_Result_i_fu_2058_p4 <= p_Val2_7_fu_1986_p2(26 downto 25);
    
    p_Result_s_fu_3295_p4_proc : process(tmp_V_15_reg_4456, tmp_75_fu_3281_p3, tmp_76_fu_3289_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable p_Result_s_fu_3295_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := tmp_75_fu_3281_p3(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := tmp_76_fu_3289_p2(5 - 1 downto 0);
        v0_cpy := tmp_V_15_reg_4456;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(tmp_76_fu_3289_p2(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(tmp_75_fu_3281_p3(5-1 downto 0)));
            for p_Result_s_fu_3295_p4_i in 0 to 17-1 loop
                v0_cpy(p_Result_s_fu_3295_p4_i) := tmp_V_15_reg_4456(17-1-p_Result_s_fu_3295_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(17-1 downto 0)))));
        res_mask := res_mask(17-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_3295_p4 <= resvalue(17-1 downto 0);
    end process;

    p_Val2_0_i_i121_in_i_fu_2630_p3 <= 
        tmp_12_i_fu_2616_p2 when (isNeg_reg_3787(0) = '1') else 
        tmp_14_i_cast_fu_2626_p1;
    p_Val2_0_i_i129_in_i_fu_2790_p3 <= 
        tmp_28_i_fu_2777_p2 when (isNeg_2_reg_3793(0) = '1') else 
        tmp_30_i_cast_fu_2786_p1;
    
    tmp_6_i_i_fu_2002_p3_temp <= signed(tmp_6_i_i_fu_2002_p3);
    p_Val2_10_fu_2016_p0 <= std_logic_vector(resize(tmp_6_i_i_fu_2002_p3_temp,29));

    p_Val2_10_fu_2016_p2 <= std_logic_vector(unsigned(p_Val2_10_fu_2016_p0) + unsigned(tmp_7_i_i_fu_2013_p1));
    p_Val2_11_fu_2464_p0 <= p_Val2_61_reg_4247;
    p_Val2_11_fu_2464_p1 <= p_Result_32_fu_2445_p5;
    p_Val2_11_fu_2464_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(p_Val2_11_fu_2464_p0) * signed(p_Val2_11_fu_2464_p1))), 21));
    p_Val2_1_i_fu_2257_p3 <= 
        ap_const_lv5_10 when (underflow_2_fu_2228_p2(0) = '1') else 
        p_Val2_14_reg_4295;
    p_Val2_2_i_fu_2590_p3 <= 
        ap_const_lv14_2000 when (underflow_4_fu_2560_p2(0) = '1') else 
        p_Val2_38_reg_4356;
    p_Val2_32_fu_2314_p0 <= p_Val2_63_reg_4254;
    p_Val2_32_fu_2314_p1 <= p_Result_31_fu_2295_p5;
    p_Val2_32_fu_2314_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(p_Val2_32_fu_2314_p0) * signed(p_Val2_32_fu_2314_p1))), 21));
    p_Val2_34_mux_i_fu_2196_p3 <= 
        ap_const_lv5_F when (brmerge_i_i1_i_fu_2178_p2(0) = '1') else 
        p_Val2_12_reg_4270;
    p_Val2_36_fu_2430_p3 <= 
        p_Val2_47_mux_i_fu_2416_p3 when (brmerge_i1_fu_2410_p2(0) = '1') else 
        p_Val2_i1_fu_2423_p3;
    p_Val2_36_mux_i_fu_2250_p3 <= 
        ap_const_lv5_F when (brmerge_i_i_i_fu_2232_p2(0) = '1') else 
        p_Val2_14_reg_4295;
    
    tmp_6_i_fu_2470_p3_temp <= signed(tmp_6_i_fu_2470_p3);
    p_Val2_37_fu_2481_p0 <= std_logic_vector(resize(tmp_6_i_fu_2470_p3_temp,21));

    p_Val2_37_fu_2481_p2 <= std_logic_vector(unsigned(p_Val2_37_fu_2481_p0) - unsigned(p_Val2_11_fu_2464_p2));
    p_Val2_40_fu_2662_p1 <= p_in_i_fu_2655_p3(28 - 1 downto 0);
    p_Val2_42_fu_2670_p2 <= std_logic_vector(unsigned(i_reg_V) + unsigned(p_Val2_40_fu_2662_p1));
    p_Val2_43_fu_2637_p1 <= p_Val2_0_i_i121_in_i_fu_2630_p3(28 - 1 downto 0);
    
    p_Val2_43_reg_4379_temp <= signed(p_Val2_43_reg_4379);
    p_Val2_44_fu_2694_p0 <= std_logic_vector(resize(p_Val2_43_reg_4379_temp,29));

    
    p_Val2_42_reg_4384_temp <= signed(p_Val2_42_reg_4384);
    p_Val2_44_fu_2694_p1 <= std_logic_vector(resize(p_Val2_42_reg_4384_temp,29));

    p_Val2_44_fu_2694_p2 <= std_logic_vector(unsigned(p_Val2_44_fu_2694_p0) + unsigned(p_Val2_44_fu_2694_p1));
    p_Val2_45_fu_2708_p1 <= p_Val2_44_fu_2694_p2(28 - 1 downto 0);
    p_Val2_47_fu_2676_p0 <= (0=>control_in_reg_clr_in_sig, others=>'-');
    p_Val2_47_fu_2676_p3 <= 
        p_5_reg_4212 when (p_Val2_47_fu_2676_p0(0) = '1') else 
        p_Val2_42_fu_2670_p2;
    p_Val2_47_mux_i_fu_2416_p3 <= 
        ap_const_lv14_1FFF when (brmerge_i_i_i1_fu_2398_p2(0) = '1') else 
        p_Val2_35_reg_4327;
    p_Val2_4_fu_1255_p3 <= 
        p_2_fu_1248_p3 when (sel_tmp27_reg_4002(0) = '1') else 
        sel_tmp25_reg_3997;
    p_Val2_51_fu_2797_p1 <= p_Val2_0_i_i129_in_i_fu_2790_p3(28 - 1 downto 0);
    
    tmp_31_i_fu_2805_p3_temp <= signed(tmp_31_i_fu_2805_p3);
    p_Val2_52_fu_2821_p0 <= std_logic_vector(resize(tmp_31_i_fu_2805_p3_temp,29));

    p_Val2_52_fu_2821_p2 <= std_logic_vector(unsigned(p_Val2_52_fu_2821_p0) - unsigned(tmp_32_i_fu_2817_p1));
    p_Val2_54_mux_i_fu_2750_p3 <= 
        ap_const_lv28_7FFFFFF when (brmerge_i_i_i2_fu_2732_p2(0) = '1') else 
        p_Val2_45_fu_2708_p1;
    p_Val2_5_fu_1921_p0 <= OP1_V_fu_1914_p1(16 - 1 downto 0);
    p_Val2_5_fu_1921_p1 <= OP2_V_fu_1917_p1(12 - 1 downto 0);
    p_Val2_5_fu_1921_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(p_Val2_5_fu_1921_p0) * signed(p_Val2_5_fu_1921_p1))), 28));
    p_Val2_6_fu_1934_p0 <= OP1_V_1_fu_1927_p1(16 - 1 downto 0);
    p_Val2_6_fu_1934_p1 <= OP2_V_1_fu_1930_p1(12 - 1 downto 0);
    p_Val2_6_fu_1934_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(p_Val2_6_fu_1934_p0) * signed(p_Val2_6_fu_1934_p1))), 28));
    
    tmp_1_i_i_fu_1972_p3_temp <= signed(tmp_1_i_i_fu_1972_p3);
    p_Val2_7_fu_1986_p0 <= std_logic_vector(resize(tmp_1_i_i_fu_1972_p3_temp,29));

    p_Val2_7_fu_1986_p2 <= std_logic_vector(unsigned(p_Val2_7_fu_1986_p0) - unsigned(tmp_2_i_i_fu_1983_p1));
    p_Val2_8_fu_1950_p0 <= OP1_V_fu_1914_p1(16 - 1 downto 0);
    p_Val2_8_fu_1950_p1 <= OP2_V_1_fu_1930_p1(12 - 1 downto 0);
    p_Val2_8_fu_1950_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(p_Val2_8_fu_1950_p0) * signed(p_Val2_8_fu_1950_p1))), 28));
    p_Val2_9_fu_1956_p0 <= OP1_V_1_fu_1927_p1(16 - 1 downto 0);
    p_Val2_9_fu_1956_p1 <= OP2_V_fu_1917_p1(12 - 1 downto 0);
    p_Val2_9_fu_1956_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(p_Val2_9_fu_1956_p0) * signed(p_Val2_9_fu_1956_p1))), 28));
    p_Val2_i1_fu_2423_p3 <= 
        ap_const_lv14_2000 when (underflow_3_fu_2393_p2(0) = '1') else 
        p_Val2_35_reg_4327;
    p_Val2_i2_fu_2758_p3 <= 
        ap_const_lv28_8000000 when (underflow_5_fu_2726_p2(0) = '1') else 
        p_Val2_45_fu_2708_p1;
    p_Val2_i_fu_2203_p3 <= 
        ap_const_lv5_10 when (underflow_1_fu_2174_p2(0) = '1') else 
        p_Val2_12_reg_4270;
    p_in_i_fu_2655_p3 <= 
        tmp_18_i_fu_2641_p2 when (isNeg_1_reg_3902(0) = '1') else 
        tmp_20_i_cast_fu_2651_p1;
    p_not38_i1_i_fu_2086_p2 <= "0" when (p_Result_i_fu_2058_p4 = ap_const_lv2_3) else "1";
    p_not38_i_i1_fu_2382_p2 <= "0" when (p_Result_i1_reg_4339 = ap_const_lv2_3) else "1";
    p_not38_i_i_fu_2152_p2 <= "0" when (p_Result_3_i_fu_2124_p4 = ap_const_lv2_3) else "1";
    p_not38_i_i_i_fu_2549_p2 <= "0" when (tmp_69_reg_4368 = ap_const_lv2_3) else "1";
    p_not_i1_i_fu_2068_p2 <= "0" when (p_Result_i_fu_2058_p4 = ap_const_lv2_0) else "1";
    p_not_i_i1_fu_2356_p2 <= "0" when (p_Result_i1_reg_4339 = ap_const_lv2_0) else "1";
    p_not_i_i_fu_2134_p2 <= "0" when (p_Result_3_i_fu_2124_p4 = ap_const_lv2_0) else "1";
    p_not_i_i_i_fu_2523_p2 <= "0" when (tmp_69_reg_4368 = ap_const_lv2_0) else "1";
    p_s_fu_1776_p3 <= 
        ap_const_lv16_FFFF when (isneg_reg_4063(0) = '1') else 
        ap_const_lv16_0;
    p_this_assign_fu_666_p3 <= 
        ap_const_lv28_0 when (tmp_39_fu_660_p2(0) = '1') else 
        ap_const_lv28_8000000;
    ph_est_V_fu_2597_p3 <= 
        ssdm_int_14_1024_0_true_V_write_assign_fu_2583_p3 when (brmerge1_i_fu_2577_p2(0) = '1') else 
        p_Val2_2_i_fu_2590_p3;
    pos1_fu_1011_p2 <= std_logic_vector(unsigned(F2_2_reg_3960) + unsigned(ap_const_lv12_2));
    pos2_fu_1020_p2 <= std_logic_vector(unsigned(F2_2_reg_3960) + unsigned(ap_const_lv12_3));
    r_V_fu_1097_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv54_3FFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_63_fu_1088_p1(31-1 downto 0)))));
    read_length_fu_631_p2 <= std_logic_vector(shift_left(unsigned(iterations_in_sig),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    res_V_11_fu_3680_p3 <= 
        p_Result_47_fu_3654_p4 when (tmp_103_reg_4580(0) = '1') else 
        p_Result_48_fu_3671_p4;
    res_V_5_fu_3604_p3 <= 
        p_Result_39_fu_3578_p4 when (tmp_83_reg_4550(0) = '1') else 
        p_Result_40_fu_3595_p4;
    res_V_8_fu_3642_p3 <= 
        p_Result_43_fu_3616_p4 when (tmp_93_reg_4565(0) = '1') else 
        p_Result_44_fu_3633_p4;
    res_V_fu_3566_p3 <= 
        p_Result_35_fu_3540_p4 when (tmp_72_reg_4535(0) = '1') else 
        p_Result_36_fu_3557_p4;
    rev1_fu_1269_p2 <= (tmp_127_reg_4026 xor ap_const_lv1_1);
    rev_fu_1043_p2 <= (tmp_125_fu_1035_p3 xor ap_const_lv1_1);

    -- s_in_V_V_TREADY assign process. --
    s_in_V_V_TREADY_assign_proc : process(ap_CS_fsm, tmp_6_fu_767_p2, ap_sig_bdd_590)
    begin
        if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_6_fu_767_p2)) and not(ap_sig_bdd_590))) then 
            s_in_V_V_TREADY <= ap_const_logic_1;
        else 
            s_in_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    s_out_V_V_TDATA <= (((p_Repl2_11_fu_3687_p3 & p_Repl2_10_fu_3694_p3) & p_Repl2_9_fu_3701_p3) & p_Repl2_8_fu_3708_p3);

    -- s_out_V_V_TVALID assign process. --
    s_out_V_V_TVALID_assign_proc : process(ap_CS_fsm, ap_reg_ioackin_s_out_V_V_TREADY)
    begin
        if (((ap_ST_st38_fsm_37 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_V_TREADY))) then 
            s_out_V_V_TVALID <= ap_const_logic_1;
        else 
            s_out_V_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    second_r_V_fu_788_p4 <= s_in_V_V_TDATA(95 downto 64);
    sel_tmp10_fu_1658_p2 <= (tmp_28_fu_1594_p2 and sel_tmp9_fu_1653_p2);
    sel_tmp11_fu_1669_p2 <= (sel_tmp30_demorgan_fu_1664_p2 xor ap_const_lv1_1);
    sel_tmp12_fu_1675_p2 <= (tmp_25_fu_1567_p2 and sel_tmp11_fu_1669_p2);
    sel_tmp13_fu_1849_p2 <= (sel_tmp12_reg_4201 and tmp_30_reg_4180);
    sel_tmp14_demorgan_fu_1525_p2 <= (sel_tmp6_demorgan_fu_1508_p2 or tmp_9_fu_1411_p2);
    sel_tmp14_fu_1687_p2 <= (sel_tmp38_demorgan_fu_1681_p2 xor ap_const_lv1_1);
    sel_tmp15_fu_1693_p2 <= (icmp1_fu_1619_p2 and sel_tmp14_fu_1687_p2);
    sel_tmp16_fu_1853_p2 <= (tmp_30_reg_4180 xor ap_const_lv1_1);
    sel_tmp17_fu_1858_p2 <= (sel_tmp12_reg_4201 and sel_tmp16_fu_1853_p2);
    sel_tmp18_fu_950_p3 <= 
        tmp_119_reg_3985 when (tmp_43_reg_3979(0) = '1') else 
        ap_const_lv28_0;
    sel_tmp19_fu_956_p2 <= (tmp_43_reg_3979 xor ap_const_lv1_1);
    sel_tmp1_fu_1497_p2 <= (tmp_8_reg_4074 xor ap_const_lv1_1);
    sel_tmp20_fu_961_p2 <= (tmp_40_reg_3967 and sel_tmp19_fu_956_p2);
    sel_tmp21_fu_966_p2 <= (sel_tmp20_fu_961_p2 and tmp_49_fu_914_p2);
    sel_tmp22_fu_972_p3 <= 
        tmp_120_fu_933_p1 when (sel_tmp21_fu_966_p2(0) = '1') else 
        sel_tmp18_fu_950_p3;
    sel_tmp23_fu_980_p2 <= "1" when (signed(F2_2_reg_3960) < signed(ap_const_lv12_1A)) else "0";
    sel_tmp24_fu_985_p2 <= (sel_tmp23_fu_980_p2 and tmp_50_fu_919_p2);
    sel_tmp25_fu_991_p3 <= 
        tmp_123_fu_946_p1 when (sel_tmp24_fu_985_p2(0) = '1') else 
        sel_tmp22_fu_972_p3;
    sel_tmp26_fu_999_p2 <= (tmp_49_fu_914_p2 xor ap_const_lv1_1);
    sel_tmp27_fu_1005_p2 <= (sel_tmp20_fu_961_p2 and sel_tmp26_fu_999_p2);
    sel_tmp28_fu_1126_p2 <= (tmp_58_fu_1029_p2 xor ap_const_lv1_1);
    sel_tmp29_fu_1305_p2 <= (tmp2_reg_4052 or Range1_all_zeros_1_reg_4047);
    sel_tmp2_fu_1502_p2 <= (tmp_12_fu_1438_p2 and sel_tmp1_fu_1497_p2);
    sel_tmp30_demorgan_fu_1664_p2 <= (tmp_24_reg_4099 or tmp_28_fu_1594_p2);
    sel_tmp30_fu_1144_p2 <= (tmp_125_fu_1035_p3 or tmp_63_not_fu_1138_p2);
    sel_tmp31_fu_1309_p2 <= (tmp3_reg_4058 and tmp_58_reg_4007);
    sel_tmp32_fu_1313_p3 <= 
        Range1_all_zeros_fu_1295_p2 when (sel_tmp31_fu_1309_p2(0) = '1') else 
        sel_tmp29_fu_1305_p2;
    sel_tmp33_fu_1321_p2 <= (tmp_58_reg_4007 and or_cond89_i_fu_1286_p2);
    sel_tmp34_fu_674_p2 <= (tmp_39_fu_660_p2 xor ap_const_lv1_1);
    sel_tmp35_fu_1334_p3 <= 
        Range1_all_ones_1_reg_4019 when (sel_tmp31_fu_1309_p2(0) = '1') else 
        tmp2_reg_4052;
    sel_tmp36_fu_1348_p2 <= (tmp_58_reg_4007 or newsignbit_fu_1261_p3);
    sel_tmp37_fu_1741_p3 <= 
        p_this_assign_reg_3882 when (tmp_66_fu_1736_p2(0) = '1') else 
        p_Val2_4_reg_4113;
    sel_tmp38_demorgan_fu_1681_p2 <= (sel_tmp30_demorgan_fu_1664_p2 or tmp_25_fu_1567_p2);
    sel_tmp38_fu_1751_p3 <= 
        sel_tmp37_fu_1741_p3 when (sel_tmp93_demorgan_fu_1747_p2(0) = '1') else 
        p_Val2_4_reg_4113;
    sel_tmp39_fu_1763_p2 <= (tmp67_fu_1758_p2 and tmp_57_reg_3991);
    sel_tmp3_demorgan_i_fu_2933_p2 <= (tmp_36_i_fu_2906_p2 or tmp_37_i_fu_2911_p2);
    sel_tmp3_fu_1537_p2 <= (icmp_fu_1463_p2 and sel_tmp_fu_1531_p2);
    sel_tmp3_i_fu_2939_p2 <= (sel_tmp3_demorgan_i_fu_2933_p2 xor ap_const_lv1_1);
    sel_tmp4_fu_1787_p2 <= (tmp_14_reg_4143 xor ap_const_lv1_1);
    sel_tmp4_i_fu_2945_p2 <= (tmp_38_i_fu_2916_p2 and sel_tmp3_i_fu_2939_p2);
    sel_tmp5_fu_1792_p2 <= (sel_tmp7_reg_4164 and sel_tmp4_fu_1787_p2);
    sel_tmp6_demorgan_fu_1508_p2 <= (tmp_8_reg_4074 or tmp_12_fu_1438_p2);
    sel_tmp6_fu_1513_p2 <= (sel_tmp6_demorgan_fu_1508_p2 xor ap_const_lv1_1);
    sel_tmp6_i_fu_2959_p2 <= (tmp_36_i_fu_2906_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_1519_p2 <= (tmp_9_fu_1411_p2 and sel_tmp6_fu_1513_p2);
    sel_tmp7_i_fu_2965_p2 <= (tmp_37_i_fu_2911_p2 and sel_tmp6_i_fu_2959_p2);
    sel_tmp8_fu_1783_p2 <= (sel_tmp7_reg_4164 and tmp_14_reg_4143);
    sel_tmp93_demorgan_fu_1747_p2 <= (tmp_39_reg_3876 or tmp_57_reg_3991);
    sel_tmp9_fu_1653_p2 <= (tmp_24_reg_4099 xor ap_const_lv1_1);
    sel_tmp_fu_1531_p2 <= (sel_tmp14_demorgan_fu_1525_p2 xor ap_const_lv1_1);
    
    control_in_lf_out_gain_in_sig_temp <= signed(control_in_lf_out_gain_in_sig);
    sh_1_i_cast_fu_743_p1 <= std_logic_vector(resize(control_in_lf_out_gain_in_sig_temp,9));

    
    sh_amt_1_fu_1582_p3_temp <= signed(sh_amt_1_fu_1582_p3);
    sh_amt_1_cast_fu_1590_p1 <= std_logic_vector(resize(sh_amt_1_fu_1582_p3_temp,32));

    sh_amt_1_fu_1582_p3 <= 
        tmp_26_fu_1572_p2 when (tmp_25_fu_1567_p2(0) = '1') else 
        tmp_27_fu_1577_p2;
    
    sh_amt_2_reg_3972_temp <= signed(sh_amt_2_reg_3972);
    sh_amt_2_cast_fu_911_p1 <= std_logic_vector(resize(sh_amt_2_reg_3972_temp,32));

    sh_amt_2_fu_887_p3 <= 
        tmp_41_fu_875_p2 when (tmp_40_fu_869_p2(0) = '1') else 
        tmp_42_fu_881_p2;
    
    sh_amt_fu_1426_p3_temp <= signed(sh_amt_fu_1426_p3);
    sh_amt_cast_fu_1434_p1 <= std_logic_vector(resize(sh_amt_fu_1426_p3_temp,32));

    sh_amt_fu_1426_p3 <= 
        tmp_10_fu_1416_p2 when (tmp_9_fu_1411_p2(0) = '1') else 
        tmp_11_fu_1421_p2;
    sh_assign_1_fu_707_p0 <= tmp_15_i_cast_fu_704_p1;
    sh_assign_1_fu_707_p2 <= std_logic_vector(unsigned(sh_assign_1_fu_707_p0) + unsigned(ap_const_lv9_9));
    sh_assign_1_i_cast1_fu_696_p1 <= std_logic_vector(resize(unsigned(sh_assign_fu_689_p3),28));
    sh_assign_1_i_cast_fu_700_p1 <= std_logic_vector(resize(unsigned(sh_assign_fu_689_p3),32));
    sh_assign_2_fu_727_p3 <= 
        tmp_16_i_fu_721_p2 when (isNeg_1_fu_713_p3(0) = '1') else 
        sh_assign_1_fu_707_p2;
    sh_assign_3_fu_752_p2 <= sh_1_i_cast_fu_743_p1;
    sh_assign_3_fu_752_p3 <= 
        tmp_26_i_fu_746_p2 when (isNeg_2_reg_3793(0) = '1') else 
        sh_assign_3_fu_752_p2;
    
    sh_assign_2_fu_727_p3_temp <= signed(sh_assign_2_fu_727_p3);
    sh_assign_3_i_cast1_fu_735_p1 <= std_logic_vector(resize(sh_assign_2_fu_727_p3_temp,28));

    
    sh_assign_2_fu_727_p3_temp <= signed(sh_assign_2_fu_727_p3);
    sh_assign_3_i_cast_fu_739_p1 <= std_logic_vector(resize(sh_assign_2_fu_727_p3_temp,32));

    sh_assign_5_i_cast1_fu_759_p1 <= std_logic_vector(resize(unsigned(sh_assign_3_fu_752_p3),28));
    sh_assign_5_i_cast_fu_763_p1 <= std_logic_vector(resize(unsigned(sh_assign_3_fu_752_p3),32));
    sh_assign_fu_689_p2 <= sh_i_cast_fu_680_p1;
    sh_assign_fu_689_p3 <= 
        tmp_10_i_fu_683_p2 when (isNeg_reg_3787(0) = '1') else 
        sh_assign_fu_689_p2;
    
    control_in_lf_p_in_sig_temp <= signed(control_in_lf_p_in_sig);
    sh_i_cast_fu_680_p1 <= std_logic_vector(resize(control_in_lf_p_in_sig_temp,9));

    sign_assign_not_fu_1714_p2 <= (neg_src_reg_4120 xor ap_const_lv1_1);
    sin_adr_V_1_fu_2882_p3 <= 
        sin_adr_V_reg_4408 when (tmp_144_reg_4402(0) = '1') else 
        cos_adr_V_3_fu_2871_p2;
    sin_out_V_4_i_cast_fu_2902_p1 <= std_logic_vector(resize(unsigned(cos_lut_q1),16));
    sin_out_V_5_fu_3001_p3 <= 
        newSel8_fu_2979_p3 when (or_cond6_fu_2987_p2(0) = '1') else 
        newSel9_fu_2993_p3;
    sin_out_V_fu_2921_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(sin_out_V_4_i_cast_fu_2902_p1));

    -- sourceAddress_ap_vld_in_sig assign process. --
    sourceAddress_ap_vld_in_sig_assign_proc : process(sourceAddress_ap_vld, sourceAddress_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = sourceAddress_ap_vld)) then 
            sourceAddress_ap_vld_in_sig <= sourceAddress_ap_vld;
        else 
            sourceAddress_ap_vld_in_sig <= sourceAddress_ap_vld_preg;
        end if; 
    end process;


    -- sourceAddress_in_sig assign process. --
    sourceAddress_in_sig_assign_proc : process(sourceAddress, sourceAddress_preg, sourceAddress_ap_vld)
    begin
        if ((ap_const_logic_1 = sourceAddress_ap_vld)) then 
            sourceAddress_in_sig <= sourceAddress;
        else 
            sourceAddress_in_sig <= sourceAddress_preg;
        end if; 
    end process;

    ssdm_int_14_1024_0_true_V_write_assign_fu_2583_p3 <= 
        ap_const_lv14_1FFF when (brmerge_i_i_i_i_fu_2565_p2(0) = '1') else 
        p_Val2_38_reg_4356;
    this_assign_mux_fu_1729_p3 <= 
        ap_const_lv28_7FFFFFF when (brmerge_i_i_fu_1709_p2(0) = '1') else 
        p_Val2_4_reg_4113;
    tmp1_fu_1062_p2 <= (lD_fu_1058_p1 and rev_fu_1043_p2);
    tmp2_fu_1132_p2 <= (rev_fu_1043_p2 or sel_tmp28_fu_1126_p2);
    tmp3_fu_1150_p2 <= (tmp_65_fu_1115_p2 and sel_tmp30_fu_1144_p2);
    tmp4_fu_1719_p2 <= (overflow_reg_4126 or sign_assign_not_fu_1714_p2);
    tmp67_fu_1758_p2 <= (brmerge_fu_1724_p2 and sel_tmp34_reg_3887);
    tmp_100_fu_1493_p1 <= tmp_20_fu_1487_p2(16 - 1 downto 0);
    tmp_101_cast_fu_3389_p3 <= 
        tmp_89_fu_3383_p2 when (tmp_88_fu_3373_p2(0) = '1') else 
        ap_const_lv23_0;
    tmp_101_fu_3208_p2 <= "1" when (p_Val2_67_reg_4431 = ap_const_lv12_0) else "0";
    
    tmp_102_fu_3247_p3_proc : process(p_Result_46_fu_3239_p3)
    begin
        tmp_102_fu_3247_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_46_fu_3239_p3(i) = '1' then
                tmp_102_fu_3247_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_103_fu_3471_p2 <= "1" when (tmp_102_reg_4524 = ap_const_lv32_C) else "0";
    tmp_104_fu_3476_p2 <= "1" when (signed(j_3_fu_3466_p2) > signed(ap_const_lv32_17)) else "0";
    tmp_105_fu_3482_p2 <= std_logic_vector(unsigned(j_3_fu_3466_p2) + unsigned(ap_const_lv32_FFFFFFE9));
    tmp_106_fu_3488_p3 <= 
        tmp_105_fu_3482_p2 when (tmp_104_fu_3476_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_107_fu_3496_p2 <= std_logic_vector(unsigned(j_3_fu_3466_p2) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_108_fu_3511_p2 <= "1" when (signed(j_3_fu_3466_p2) < signed(ap_const_lv32_17)) else "0";
    tmp_109_fu_3521_p2 <= std_logic_vector(unsigned(ap_const_lv23_17) - unsigned(tmp_154_fu_3517_p1));
    tmp_10_fu_1416_p2 <= std_logic_vector(unsigned(F2_reg_4080) + unsigned(ap_const_lv12_FF3));
    tmp_10_i_fu_683_p1 <= sh_i_cast_fu_680_p1;
    tmp_10_i_fu_683_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_10_i_fu_683_p1));
    tmp_110_fu_1206_p1 <= ireg_V_1_fu_1202_p1(63 - 1 downto 0);
    tmp_112_fu_1232_p1 <= ireg_V_1_fu_1202_p1(52 - 1 downto 0);
    tmp_113_fu_1599_p1 <= man_V_5_fu_1560_p3(16 - 1 downto 0);
    tmp_114_cast_fu_3458_p3 <= 
        tmp_99_fu_3452_p2 when (tmp_98_fu_3442_p2(0) = '1') else 
        ap_const_lv23_0;
    tmp_114_fu_1609_p4 <= sh_amt_1_fu_1582_p3(11 downto 4);
    tmp_115_fu_1635_p1 <= tmp_33_fu_1629_p2(16 - 1 downto 0);
    tmp_116_fu_1649_p1 <= tmp_36_fu_1643_p2(16 - 1 downto 0);
    tmp_118_fu_834_p1 <= ireg_V_2_reg_3869(52 - 1 downto 0);
    tmp_119_fu_901_p1 <= man_V_17_fu_855_p3(28 - 1 downto 0);
    tmp_11_fu_1421_p2 <= std_logic_vector(unsigned(ap_const_lv12_D) - unsigned(F2_reg_4080));
    
    tmp_i2_fu_2605_p3_temp <= signed(tmp_i2_fu_2605_p3);
    tmp_11_i_fu_2612_p1 <= std_logic_vector(resize(tmp_i2_fu_2605_p3_temp,32));

    tmp_120_fu_933_p1 <= tmp_52_fu_928_p2(28 - 1 downto 0);
    tmp_123_fu_946_p1 <= tmp_55_fu_940_p2(28 - 1 downto 0);
    tmp_125_fu_1035_p3 <= pos1_fu_1011_p2(11 downto 11);
    tmp_127_cast_fu_3527_p3 <= 
        tmp_109_fu_3521_p2 when (tmp_108_fu_3511_p2(0) = '1') else 
        ap_const_lv23_0;
    tmp_12_fu_1438_p2 <= "1" when (F2_reg_4080 = ap_const_lv12_D) else "0";
    tmp_12_i_fu_2616_p0 <= tmp_11_i_fu_2612_p1;
    tmp_12_i_fu_2616_p2 <= std_logic_vector(shift_left(unsigned(tmp_12_i_fu_2616_p0),to_integer(unsigned('0' & sh_assign_1_i_cast_reg_3897(31-1 downto 0)))));
    tmp_145_fu_3102_p1 <= tmp_71_fu_3094_p3(8 - 1 downto 0);
    tmp_146_fu_3310_p1 <= j_fu_3259_p2(23 - 1 downto 0);
    tmp_147_fu_3153_p1 <= tmp_82_fu_3145_p3(8 - 1 downto 0);
    tmp_148_fu_3379_p1 <= j_1_fu_3328_p2(23 - 1 downto 0);
    tmp_14_fu_1447_p2 <= "1" when (unsigned(sh_amt_fu_1426_p3) < unsigned(ap_const_lv12_36)) else "0";
    tmp_14_i_cast_fu_2626_p1 <= std_logic_vector(resize(unsigned(tmp_14_i_fu_2621_p2),32));
    tmp_14_i_fu_2621_p2 <= std_logic_vector(shift_right(signed(tmp_i2_fu_2605_p3),to_integer(unsigned('0' & sh_assign_1_i_cast1_reg_3892(28-1 downto 0)))));
    tmp_150_fu_3204_p1 <= tmp_92_fu_3196_p3(8 - 1 downto 0);
    tmp_151_fu_3448_p1 <= j_2_fu_3397_p2(23 - 1 downto 0);
    tmp_153_fu_3255_p1 <= tmp_102_fu_3247_p3(8 - 1 downto 0);
    tmp_154_fu_3517_p1 <= j_3_fu_3466_p2(23 - 1 downto 0);
    tmp_15_fu_499_p1 <= m_mm2s_ctl_RDATA(2 - 1 downto 0);
    
    control_in_lf_i_in_sig_temp <= signed(control_in_lf_i_in_sig);
    tmp_15_i_cast_fu_704_p1 <= std_logic_vector(resize(control_in_lf_i_in_sig_temp,9));

    tmp_16_fu_1469_p0 <= sh_amt_cast_fu_1434_p1;
    tmp_16_fu_1469_p1 <= std_logic_vector(resize(unsigned(tmp_16_fu_1469_p0),54));
    tmp_16_i_fu_721_p1 <= tmp_15_i_cast_fu_704_p1;
    tmp_16_i_fu_721_p2 <= std_logic_vector(unsigned(ap_const_lv9_1F7) - unsigned(tmp_16_i_fu_721_p1));
    tmp_17_fu_1473_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_1404_p3),to_integer(unsigned('0' & tmp_16_fu_1469_p1(31-1 downto 0)))));
    tmp_18_i_fu_2641_p0 <= tmp_11_i_fu_2612_p1;
    tmp_18_i_fu_2641_p2 <= std_logic_vector(shift_left(unsigned(tmp_18_i_fu_2641_p0),to_integer(unsigned('0' & sh_assign_3_i_cast_reg_3912(31-1 downto 0)))));
    tmp_1_fu_555_p3 <= (tmp_29_reg_3819 & ap_const_lv1_1);
    tmp_1_i_fu_2438_p3 <= (tmp_133_reg_4316 & ap_const_lv1_1);
    tmp_1_i_i_fu_1972_p3 <= (tmp_68_reg_4232 & ap_const_lv11_0);
    
    tmp_78_fu_1443_p1_temp <= signed(tmp_78_fu_1443_p1);
    tmp_20_fu_1487_p0 <= std_logic_vector(resize(tmp_78_fu_1443_p1_temp,32));

    tmp_20_fu_1487_p1 <= sh_amt_cast_fu_1434_p1;
    tmp_20_fu_1487_p2 <= std_logic_vector(shift_left(unsigned(tmp_20_fu_1487_p0),to_integer(unsigned('0' & tmp_20_fu_1487_p1(31-1 downto 0)))));
    tmp_20_i_cast_fu_2651_p1 <= std_logic_vector(resize(unsigned(tmp_20_i_fu_2646_p2),32));
    tmp_20_i_fu_2646_p2 <= std_logic_vector(shift_right(signed(tmp_i2_fu_2605_p3),to_integer(unsigned('0' & sh_assign_3_i_cast1_reg_3907(28-1 downto 0)))));
    tmp_21_fu_513_p1 <= m_s2mm_ctl_RDATA(2 - 1 downto 0);
    tmp_22_fu_1228_p1 <= std_logic_vector(resize(unsigned(exp_tmp_V_1_fu_1218_p4),12));
    tmp_23_fu_1543_p3 <= (ap_const_lv1_1 & tmp_112_reg_4094);
    tmp_24_fu_1236_p2 <= "1" when (tmp_110_fu_1206_p1 = ap_const_lv63_0) else "0";
    tmp_24_i_fu_2720_p2 <= (newsignbit_5_fu_2712_p3 xor ap_const_lv1_1);
    tmp_25_fu_1567_p2 <= "1" when (signed(F2_1_reg_4105) > signed(ap_const_lv12_D)) else "0";
    tmp_25_i_fu_2766_p3 <= 
        p_Val2_54_mux_i_fu_2750_p3 when (brmerge_i2_fu_2744_p2(0) = '1') else 
        p_Val2_i2_fu_2758_p3;
    tmp_26_fu_1572_p2 <= std_logic_vector(unsigned(F2_1_reg_4105) + unsigned(ap_const_lv12_FF3));
    tmp_26_i_fu_746_p1 <= sh_1_i_cast_fu_743_p1;
    tmp_26_i_fu_746_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_26_i_fu_746_p1));
    tmp_27_fu_1577_p2 <= std_logic_vector(unsigned(ap_const_lv12_D) - unsigned(F2_1_reg_4105));
    tmp_28_fu_1594_p2 <= "1" when (F2_1_reg_4105 = ap_const_lv12_D) else "0";
    
    tmp_25_i_reg_4389_temp <= signed(tmp_25_i_reg_4389);
    tmp_28_i_fu_2777_p0 <= std_logic_vector(resize(tmp_25_i_reg_4389_temp,32));

    tmp_28_i_fu_2777_p2 <= std_logic_vector(shift_left(unsigned(tmp_28_i_fu_2777_p0),to_integer(unsigned('0' & sh_assign_5_i_cast_reg_3922(31-1 downto 0)))));
    tmp_2_fu_599_p4 <= ((tmp_31_reg_3829 & ap_const_lv1_1) & tmp_34_reg_3834);
    tmp_2_i_i_fu_1983_p1 <= std_logic_vector(resize(unsigned(p_Val2_6_reg_4227),29));
    tmp_30_fu_1603_p2 <= "1" when (unsigned(sh_amt_1_fu_1582_p3) < unsigned(ap_const_lv12_36)) else "0";
    tmp_30_i_cast_fu_2786_p1 <= std_logic_vector(resize(unsigned(tmp_30_i_fu_2782_p2),32));
    tmp_30_i_fu_2782_p2 <= std_logic_vector(shift_right(signed(tmp_25_i_reg_4389),to_integer(unsigned('0' & sh_assign_5_i_cast1_reg_3917(28-1 downto 0)))));
    tmp_31_i_fu_2805_p3 <= (phase_angle_V & ap_const_lv11_0);
    tmp_32_fu_1625_p0 <= sh_amt_1_cast_fu_1590_p1;
    tmp_32_fu_1625_p1 <= std_logic_vector(resize(unsigned(tmp_32_fu_1625_p0),54));
    tmp_32_i_fu_2817_p1 <= std_logic_vector(resize(unsigned(p_Val2_51_fu_2797_p1),29));
    tmp_33_fu_1629_p2 <= std_logic_vector(shift_right(signed(man_V_5_fu_1560_p3),to_integer(unsigned('0' & tmp_32_fu_1625_p1(31-1 downto 0)))));
    tmp_34_fu_581_p1 <= m_mm2s_ctl_RDATA(12 - 1 downto 0);
    tmp_34_i_fu_2888_p1 <= std_logic_vector(resize(unsigned(cos_adr_V_fu_2876_p3),64));
    tmp_35_i_fu_2893_p1 <= std_logic_vector(resize(unsigned(sin_adr_V_1_fu_2882_p3),64));
    
    tmp_113_fu_1599_p1_temp <= signed(tmp_113_fu_1599_p1);
    tmp_36_fu_1643_p0 <= std_logic_vector(resize(tmp_113_fu_1599_p1_temp,32));

    tmp_36_fu_1643_p1 <= sh_amt_1_cast_fu_1590_p1;
    tmp_36_fu_1643_p2 <= std_logic_vector(shift_left(unsigned(tmp_36_fu_1643_p0),to_integer(unsigned('0' & tmp_36_fu_1643_p1(31-1 downto 0)))));
    tmp_36_i_fu_2906_p2 <= "1" when (msb_V_reg_4395 = ap_const_lv2_1) else "0";
    tmp_37_i_fu_2911_p2 <= "1" when (msb_V_reg_4395 = ap_const_lv2_0) else "0";
    tmp_38_fu_837_p3 <= (ap_const_lv1_1 & tmp_118_fu_834_p1);
    tmp_38_i_fu_2916_p2 <= "1" when (msb_V_reg_4395 = ap_const_lv2_3) else "0";
    tmp_39_fu_660_p2 <= "1" when (tmp_46_fu_656_p1 = ap_const_lv63_0) else "0";
    tmp_3_fu_1182_p1 <= std_logic_vector(resize(unsigned(exp_tmp_V_fu_1172_p4),12));
    tmp_3_i_fu_2218_p2 <= (isneg_14_reg_4286 xor ap_const_lv1_1);
    tmp_40_fu_869_p2 <= "1" when (signed(F2_2_fu_863_p2) > signed(ap_const_lv12_1A)) else "0";
    tmp_41_fu_875_p2 <= std_logic_vector(unsigned(F2_2_fu_863_p2) + unsigned(ap_const_lv12_FE6));
    tmp_42_fu_881_p2 <= std_logic_vector(unsigned(ap_const_lv12_1A) - unsigned(F2_2_fu_863_p2));
    tmp_43_fu_895_p2 <= "1" when (F2_2_fu_863_p2 = ap_const_lv12_1A) else "0";
    tmp_45_fu_595_p1 <= m_s2mm_ctl_RDATA(12 - 1 downto 0);
    tmp_46_fu_656_p1 <= ireg_V_2_fu_652_p1(63 - 1 downto 0);
    tmp_49_fu_914_p2 <= "1" when (unsigned(sh_amt_2_reg_3972) < unsigned(ap_const_lv12_36)) else "0";
    tmp_4_fu_563_p3 <= (tmp_37_reg_3824 & ap_const_lv1_1);
    tmp_4_i_fu_2366_p2 <= (isneg_15_reg_4321 xor ap_const_lv1_1);
    tmp_50_fu_919_p2 <= "1" when (unsigned(sh_amt_2_reg_3972) < unsigned(ap_const_lv12_1C)) else "0";
    tmp_51_fu_924_p0 <= sh_amt_2_cast_fu_911_p1;
    tmp_51_fu_924_p1 <= std_logic_vector(resize(unsigned(tmp_51_fu_924_p0),54));
    tmp_52_fu_928_p2 <= std_logic_vector(shift_right(signed(man_V_17_reg_3952),to_integer(unsigned('0' & tmp_51_fu_924_p1(31-1 downto 0)))));
    
    tmp_119_reg_3985_temp <= signed(tmp_119_reg_3985);
    tmp_55_fu_940_p0 <= std_logic_vector(resize(tmp_119_reg_3985_temp,32));

    tmp_55_fu_940_p1 <= sh_amt_2_cast_fu_911_p1;
    tmp_55_fu_940_p2 <= std_logic_vector(shift_left(unsigned(tmp_55_fu_940_p0),to_integer(unsigned('0' & tmp_55_fu_940_p1(31-1 downto 0)))));
    tmp_56_fu_1160_p1 <= ireg_V_fu_1156_p1(63 - 1 downto 0);
    tmp_57_fu_905_p2 <= "1" when (signed(exp_V_fu_828_p2) > signed(ap_const_lv12_0)) else "0";
    tmp_58_fu_1029_p2 <= "1" when (signed(pos1_fu_1011_p2) < signed(ap_const_lv12_36)) else "0";
    
    pos1_fu_1011_p2_temp <= signed(pos1_fu_1011_p2);
    tmp_59_fu_1049_p0 <= std_logic_vector(resize(pos1_fu_1011_p2_temp,32));

    tmp_59_fu_1049_p1 <= std_logic_vector(resize(unsigned(tmp_59_fu_1049_p0),54));
    tmp_5_fu_608_p4 <= ((tmp_44_reg_3839 & ap_const_lv1_1) & tmp_45_reg_3844);
    tmp_60_fu_1053_p2 <= std_logic_vector(shift_right(signed(man_V_17_reg_3952),to_integer(unsigned('0' & tmp_59_fu_1049_p1(31-1 downto 0)))));
    tmp_61_fu_1082_p2 <= "1" when (signed(pos2_fu_1020_p2) < signed(ap_const_lv12_36)) else "0";
    tmp_62_fu_1186_p1 <= ireg_V_fu_1156_p1(52 - 1 downto 0);
    
    pos2_fu_1020_p2_temp <= signed(pos2_fu_1020_p2);
    tmp_63_fu_1088_p0 <= std_logic_vector(resize(pos2_fu_1020_p2_temp,32));

    tmp_63_fu_1088_p1 <= std_logic_vector(resize(unsigned(tmp_63_fu_1088_p0),54));
    tmp_63_not_fu_1138_p2 <= (tmp_61_fu_1082_p2 xor ap_const_lv1_1);
    tmp_64_fu_1109_p2 <= "1" when (Range2_V_1_fu_1092_p2 = ap_const_lv54_0) else "0";
    tmp_65_fu_1115_p2 <= "1" when (pos2_fu_1020_p2 = ap_const_lv12_36) else "0";
    tmp_66_fu_1736_p2 <= (tmp_39_reg_3876 or underflow_fu_1704_p2);
    tmp_67_fu_1370_p2 <= (isneg_12_reg_3945 xor ap_const_lv1_1);
    tmp_6_fu_767_p2 <= "1" when (signed(i_reg_448) < signed(iterations_in_sig)) else "0";
    tmp_6_i_fu_2470_p3 <= (p_Val2_36_reg_4345 & ap_const_lv5_0);
    tmp_6_i_i_fu_2002_p3 <= (tmp_111_reg_4242 & ap_const_lv11_0);
    tmp_70_fu_3055_p2 <= "1" when (p_Val2_61_reg_4247 = ap_const_lv16_0) else "0";
    
    tmp_71_fu_3094_p3_proc : process(p_Result_34_fu_3086_p3)
    begin
        tmp_71_fu_3094_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_34_fu_3086_p3(i) = '1' then
                tmp_71_fu_3094_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_72_fu_3264_p2 <= "1" when (tmp_71_reg_4461 = ap_const_lv32_10) else "0";
    tmp_73_fu_3269_p2 <= "1" when (signed(j_fu_3259_p2) > signed(ap_const_lv32_17)) else "0";
    tmp_74_fu_3275_p2 <= std_logic_vector(unsigned(j_fu_3259_p2) + unsigned(ap_const_lv32_FFFFFFE9));
    tmp_75_fu_3281_p3 <= 
        tmp_74_fu_3275_p2 when (tmp_73_fu_3269_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_76_fu_3289_p2 <= std_logic_vector(unsigned(j_fu_3259_p2) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_77_fu_3304_p2 <= "1" when (signed(j_fu_3259_p2) < signed(ap_const_lv32_17)) else "0";
    tmp_78_fu_1443_p1 <= man_V_2_fu_1404_p3(16 - 1 downto 0);
    tmp_79_fu_3314_p2 <= std_logic_vector(unsigned(ap_const_lv23_17) - unsigned(tmp_146_fu_3310_p1));
    tmp_7_fu_1387_p3 <= (ap_const_lv1_1 & tmp_62_reg_4069);
    tmp_7_i_i_fu_2013_p1 <= std_logic_vector(resize(unsigned(p_Val2_9_reg_4237),29));
    tmp_80_fu_1453_p4 <= sh_amt_fu_1426_p3(11 downto 4);
    tmp_81_fu_3106_p2 <= "1" when (p_Val2_63_reg_4254 = ap_const_lv16_0) else "0";
    
    tmp_82_fu_3145_p3_proc : process(p_Result_38_fu_3137_p3)
    begin
        tmp_82_fu_3145_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_38_fu_3137_p3(i) = '1' then
                tmp_82_fu_3145_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_83_fu_3333_p2 <= "1" when (tmp_82_reg_4482 = ap_const_lv32_10) else "0";
    tmp_84_fu_3338_p2 <= "1" when (signed(j_1_fu_3328_p2) > signed(ap_const_lv32_17)) else "0";
    tmp_85_fu_3344_p2 <= std_logic_vector(unsigned(j_1_fu_3328_p2) + unsigned(ap_const_lv32_FFFFFFE9));
    tmp_86_fu_3350_p3 <= 
        tmp_85_fu_3344_p2 when (tmp_84_fu_3338_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_87_fu_3358_p2 <= std_logic_vector(unsigned(j_1_fu_3328_p2) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_88_cast_fu_3320_p3 <= 
        tmp_79_fu_3314_p2 when (tmp_77_fu_3304_p2(0) = '1') else 
        ap_const_lv23_0;
    tmp_88_fu_3373_p2 <= "1" when (signed(j_1_fu_3328_p2) < signed(ap_const_lv32_17)) else "0";
    tmp_89_fu_3383_p2 <= std_logic_vector(unsigned(ap_const_lv23_17) - unsigned(tmp_148_fu_3379_p1));
    tmp_8_fu_1190_p2 <= "1" when (tmp_56_fu_1160_p1 = ap_const_lv63_0) else "0";
    tmp_90_fu_1479_p1 <= tmp_17_fu_1473_p2(16 - 1 downto 0);
    tmp_91_fu_3157_p2 <= "1" when (p_Val2_65_reg_4425 = ap_const_lv12_0) else "0";
    
    tmp_92_fu_3196_p3_proc : process(p_Result_42_fu_3188_p3)
    begin
        tmp_92_fu_3196_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_42_fu_3188_p3(i) = '1' then
                tmp_92_fu_3196_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_93_fu_3402_p2 <= "1" when (tmp_92_reg_4503 = ap_const_lv32_C) else "0";
    tmp_94_fu_3407_p2 <= "1" when (signed(j_2_fu_3397_p2) > signed(ap_const_lv32_17)) else "0";
    tmp_95_fu_3413_p2 <= std_logic_vector(unsigned(j_2_fu_3397_p2) + unsigned(ap_const_lv32_FFFFFFE9));
    tmp_96_fu_3419_p3 <= 
        tmp_95_fu_3413_p2 when (tmp_94_fu_3407_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_97_fu_3427_p2 <= std_logic_vector(unsigned(j_2_fu_3397_p2) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_98_fu_3442_p2 <= "1" when (signed(j_2_fu_3397_p2) < signed(ap_const_lv32_17)) else "0";
    tmp_99_fu_3452_p2 <= std_logic_vector(unsigned(ap_const_lv23_17) - unsigned(tmp_151_fu_3448_p1));
    tmp_9_fu_1411_p2 <= "1" when (signed(F2_reg_4080) > signed(ap_const_lv12_D)) else "0";
    tmp_9_i1_fu_2533_p2 <= (isneg_16_reg_4350 xor ap_const_lv1_1);
    tmp_9_i_fu_2164_p2 <= (isneg_13_reg_4261 xor ap_const_lv1_1);
    tmp_V_15_fu_3069_p2 <= tmp_V_fu_3060_p1;
    tmp_V_15_fu_3069_p3 <= 
        tmp_V_1_fu_3063_p2 when (isneg_13_reg_4261(0) = '1') else 
        tmp_V_15_fu_3069_p2;
    tmp_V_16_fu_3120_p2 <= tmp_V_2_fu_3111_p1;
    tmp_V_16_fu_3120_p3 <= 
        tmp_V_3_fu_3114_p2 when (isneg_14_reg_4286(0) = '1') else 
        tmp_V_16_fu_3120_p2;
    tmp_V_17_fu_3171_p2 <= tmp_V_4_fu_3162_p1;
    tmp_V_17_fu_3171_p3 <= 
        tmp_V_5_fu_3165_p2 when (isneg_18_reg_4437(0) = '1') else 
        tmp_V_17_fu_3171_p2;
    tmp_V_18_fu_3222_p2 <= tmp_V_6_fu_3213_p1;
    tmp_V_18_fu_3222_p3 <= 
        tmp_V_7_fu_3216_p2 when (isneg_19_reg_4444(0) = '1') else 
        tmp_V_18_fu_3222_p2;
    tmp_V_1_fu_3063_p1 <= tmp_V_fu_3060_p1;
    tmp_V_1_fu_3063_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(tmp_V_1_fu_3063_p1));
    
    p_Val2_63_reg_4254_temp <= signed(p_Val2_63_reg_4254);
    tmp_V_2_fu_3111_p1 <= std_logic_vector(resize(p_Val2_63_reg_4254_temp,17));

    tmp_V_3_fu_3114_p1 <= tmp_V_2_fu_3111_p1;
    tmp_V_3_fu_3114_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(tmp_V_3_fu_3114_p1));
    
    p_Val2_65_reg_4425_temp <= signed(p_Val2_65_reg_4425);
    tmp_V_4_fu_3162_p1 <= std_logic_vector(resize(p_Val2_65_reg_4425_temp,13));

    tmp_V_5_fu_3165_p1 <= tmp_V_4_fu_3162_p1;
    tmp_V_5_fu_3165_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(tmp_V_5_fu_3165_p1));
    
    p_Val2_67_reg_4431_temp <= signed(p_Val2_67_reg_4431);
    tmp_V_6_fu_3213_p1 <= std_logic_vector(resize(p_Val2_67_reg_4431_temp,13));

    tmp_V_7_fu_3216_p1 <= tmp_V_6_fu_3213_p1;
    tmp_V_7_fu_3216_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(tmp_V_7_fu_3216_p1));
    
    p_Val2_61_reg_4247_temp <= signed(p_Val2_61_reg_4247);
    tmp_V_fu_3060_p1 <= std_logic_vector(resize(p_Val2_61_reg_4247_temp,17));

    tmp_fu_526_p4 <= ((tmp_18_reg_3809 & ap_const_lv1_1) & tmp_21_reg_3814);
    tmp_i2_fu_2605_p3 <= (ph_est_V_reg_4374 & ap_const_lv14_0);
    tmp_i_fu_2288_p3 <= (tmp_132_reg_4311 & ap_const_lv1_1);
    tmp_s_fu_824_p1 <= std_logic_vector(resize(unsigned(exp_tmp_V_2_fu_815_p4),12));
    underflow_1_fu_2174_p2 <= (brmerge39_i1_i_reg_4281 and isneg_13_reg_4261);
    underflow_1_not_i_fu_2238_p2 <= (underflow_2_fu_2228_p2 xor ap_const_lv1_1);
    underflow_2_fu_2228_p2 <= (brmerge39_i_i_reg_4306 and isneg_14_reg_4286);
    underflow_3_fu_2393_p2 <= (brmerge39_i_i1_fu_2387_p2 and isneg_15_reg_4321);
    underflow_4_fu_2560_p2 <= (brmerge39_i_i_i_fu_2554_p2 and isneg_16_reg_4350);
    underflow_4_not_i_fu_2571_p2 <= (underflow_4_fu_2560_p2 xor ap_const_lv1_1);
    underflow_5_fu_2726_p2 <= (isneg_17_fu_2700_p3 and tmp_24_i_fu_2720_p2);
    underflow_fu_1704_p2 <= (neg_src_reg_4120 and brmerge92_i_fu_1699_p2);
    underflow_not_i1_fu_2404_p2 <= (underflow_3_fu_2393_p2 xor ap_const_lv1_1);
    underflow_not_i_fu_2184_p2 <= (underflow_1_fu_2174_p2 xor ap_const_lv1_1);
    v_assign_fu_798_p1 <= first_r_V_fu_778_p4;
end behav;
