// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module AESL_axi_s_s_out_V (
    clk,
    reset,
    TRAN_s_out_V_TDATA,
    TRAN_s_out_V_TVALID,
    TRAN_s_out_V_TREADY,
    ready,
    done
    );

//------------------------Parameter----------------------
`define TV_IN_s_out_V_TDATA "../tv/cdatafile/c.aes.autotvin_s_out_V.dat"
`define TV_OUT_s_out_V_TDATA "../tv/rtldatafile/rtl.aes.autotvout_s_out_V.dat"
// Input and Output
input clk;
input reset;
input [127 : 0] TRAN_s_out_V_TDATA;
input  TRAN_s_out_V_TVALID;
output  TRAN_s_out_V_TREADY;
input ready;
input done;

//------------------------Local signal-------------------
reg [127 : 0] mem_s_out_V_TDATA [999 : 0];
initial begin : initialize_mem_s_out_V_TDATA
  integer i;
  for (i = 0; i < 1000; i = i + 1) begin
      mem_s_out_V_TDATA[i] = 0;
  end
end
wire s_out_V_TDATA_empty_n;
wire s_out_V_TDATA_full_n;
reg [11 : 0]  s_out_V_TDATA_mInPtr  =   0;
reg [11 : 0]  s_out_V_TDATA_mOutPtr =   0;
reg  s_out_V_TDATA_mFlag_nEF_hint;  // 0: empty hint, 1: full hint

assign s_out_V_TDATA_empty_n	=	((s_out_V_TDATA_mInPtr == s_out_V_TDATA_mOutPtr) && s_out_V_TDATA_mFlag_nEF_hint == 1'b0)? 1'b 0: 1'b 1;
assign s_out_V_TDATA_full_n	=	((s_out_V_TDATA_mInPtr == s_out_V_TDATA_mOutPtr) && s_out_V_TDATA_mFlag_nEF_hint == 1'b1)? 1'b 0: 1'b 1;
// Inner signals
assign TRAN_s_out_V_TREADY = 1 & 
    s_out_V_TDATA_full_n &
      1;
//------------------------Task and function--------------
task read_token;
	input integer fp;
  output reg [279 : 0] token;
	reg [7:0] c;
	reg intoken;
	reg done;
	begin
	    token = "";
	    intoken = 0;
	    done = 0;
	    while (!done) begin
		c = $fgetc(fp);
		if (c == 8'hff) begin	// EOF
		    done = 1;
		end
		else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank
		    if (intoken) begin
			done = 1;
		    end
		end
		else begin			// valid character
		    intoken = 1;
		    token = (token << 8) | c;
		end
	    end
	end
endtask

//------------------------Write-only axi_s-------------------

// Write operation for write-only axi_s
always @ (posedge clk) begin
    if (reset === 0) begin
	    s_out_V_TDATA_mInPtr = 0;
  end
  else if(TRAN_s_out_V_TVALID && TRAN_s_out_V_TREADY) begin
	    if(s_out_V_TDATA_mInPtr < 1000) begin
          mem_s_out_V_TDATA[s_out_V_TDATA_mInPtr] = TRAN_s_out_V_TDATA;
	        s_out_V_TDATA_mInPtr <= s_out_V_TDATA_mInPtr + 1;
	    end
  end
end

// Reset mInPtr when done is pulled up
initial begin : done_reset_s_out_V_TDATA_mInPtr_process
  while(1) begin
      @(posedge clk);
      # 0.2;
      while(done !== 1) begin
          @(posedge clk);
          # 0.2;
      end
      s_out_V_TDATA_mInPtr = 0;
  end
end

// Read operation for write-only axi_s signal s_out_V_TDATA
initial begin : s_out_V_TDATA_write_file_process
  integer fp;
  integer transaction_idx;
  reg [ 8*5 : 1] str;
  integer idx;
  transaction_idx = 0;
  s_out_V_TDATA_mOutPtr = 1000;
  s_out_V_TDATA_mFlag_nEF_hint = 1;
  while(1) begin
      @(posedge clk);
      # 0.1;
      while(done !== 1) begin
          @(posedge clk);
          # 0.1;
      end
	    fp = $fopen(`TV_OUT_s_out_V_TDATA, "a");
	    if(fp == 0) begin       // Failed to open file
	        $display("Failed to open file \"%s\"!", `TV_OUT_s_out_V_TDATA);
	        $finish;
	    end
	    $fdisplay(fp, "[[transaction]] %d", transaction_idx);
	    for (idx = 0; idx < s_out_V_TDATA_mInPtr; idx = idx + 1) begin
	        $fdisplay(fp,"0x%x",mem_s_out_V_TDATA[idx]);
	    end
	    $fdisplay(fp, "[[/transaction]]");
	    transaction_idx = transaction_idx + 1;
	    $fclose(fp);
  end
end

endmodule
