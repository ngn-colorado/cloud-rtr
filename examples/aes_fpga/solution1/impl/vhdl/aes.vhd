-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_MM2S_CTL_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_MM2S_CTL_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_MM2S_CTL_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_S2MM_CTL_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_S2MM_CTL_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_S2MM_CTL_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_MM2S_CTL_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_S2MM_CTL_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_M_MM2S_CTL_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_S2MM_CTL_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_M_MM2S_CTL_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_M_S2MM_CTL_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_MM2S_CTL_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_M_S2MM_CTL_PROT_VALUE : INTEGER := 0 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_AWVALID : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_AWREADY : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ADDR_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_mm2s_ctl_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_mm2s_ctl_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_mm2s_ctl_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_AWUSER_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_WVALID : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_WREADY : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_DATA_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_DATA_WIDTH/8-1 downto 0);
    m_axi_m_mm2s_ctl_WLAST : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_WUSER_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_ARVALID : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_ARREADY : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ADDR_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_mm2s_ctl_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_mm2s_ctl_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_mm2s_ctl_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_mm2s_ctl_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ARUSER_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_RVALID : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_RREADY : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_DATA_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_RLAST : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_RUSER_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_BVALID : IN STD_LOGIC;
    m_axi_m_mm2s_ctl_BREADY : OUT STD_LOGIC;
    m_axi_m_mm2s_ctl_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_mm2s_ctl_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_mm2s_ctl_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_MM2S_CTL_BUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_AWVALID : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_AWREADY : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ADDR_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_s2mm_ctl_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_s2mm_ctl_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_s2mm_ctl_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_AWUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_WVALID : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_WREADY : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_DATA_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_DATA_WIDTH/8-1 downto 0);
    m_axi_m_s2mm_ctl_WLAST : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_WUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_ARVALID : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_ARREADY : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ADDR_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_s2mm_ctl_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_s2mm_ctl_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_s2mm_ctl_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_s2mm_ctl_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ARUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_RVALID : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_RREADY : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_DATA_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_RLAST : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_RUSER_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_BVALID : IN STD_LOGIC;
    m_axi_m_s2mm_ctl_BREADY : OUT STD_LOGIC;
    m_axi_m_s2mm_ctl_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_s2mm_ctl_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_ID_WIDTH-1 downto 0);
    m_axi_m_s2mm_ctl_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_S2MM_CTL_BUSER_WIDTH-1 downto 0);
    s_in_V_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    s_in_V_V_TVALID : IN STD_LOGIC;
    s_in_V_V_TREADY : OUT STD_LOGIC;
    s_out_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_out_V_V_TVALID : OUT STD_LOGIC;
    s_out_V_V_TREADY : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of aes is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_ready : STD_LOGIC;
    signal sourceAddress : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddress_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddress_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sourceAddress_ap_vld : STD_LOGIC;
    signal sourceAddress_ap_vld_in_sig : STD_LOGIC;
    signal sourceAddress_ap_vld_preg : STD_LOGIC := '0';
    signal key_in_V : STD_LOGIC_VECTOR (127 downto 0);
    signal key_in_V_in_sig : STD_LOGIC_VECTOR (127 downto 0);
    signal key_in_V_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal key_in_V_ap_vld : STD_LOGIC;
    signal key_in_V_ap_vld_in_sig : STD_LOGIC;
    signal key_in_V_ap_vld_preg : STD_LOGIC := '0';
    signal iv_V : STD_LOGIC_VECTOR (127 downto 0);
    signal iv_V_in_sig : STD_LOGIC_VECTOR (127 downto 0);
    signal iv_V_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal iv_V_ap_vld : STD_LOGIC;
    signal iv_V_ap_vld_in_sig : STD_LOGIC;
    signal iv_V_ap_vld_preg : STD_LOGIC := '0';
    signal destinationAddress : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal destinationAddress_ap_vld : STD_LOGIC;
    signal destinationAddress_ap_vld_in_sig : STD_LOGIC;
    signal destinationAddress_ap_vld_preg : STD_LOGIC := '0';
    signal numBytes : STD_LOGIC_VECTOR (31 downto 0);
    signal numBytes_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal numBytes_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal numBytes_ap_vld : STD_LOGIC;
    signal numBytes_ap_vld_in_sig : STD_LOGIC;
    signal numBytes_ap_vld_preg : STD_LOGIC := '0';
    signal mode : STD_LOGIC_VECTOR (31 downto 0);
    signal mode_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal mode_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal mode_ap_vld : STD_LOGIC;
    signal mode_ap_vld_in_sig : STD_LOGIC;
    signal mode_ap_vld_preg : STD_LOGIC := '0';
    signal ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_AWVALID : STD_LOGIC;
    signal m_mm2s_ctl_AWREADY : STD_LOGIC;
    signal m_mm2s_ctl_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mm2s_ctl_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mm2s_ctl_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_WVALID : STD_LOGIC;
    signal m_mm2s_ctl_WREADY : STD_LOGIC;
    signal m_mm2s_ctl_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_WLAST : STD_LOGIC;
    signal m_mm2s_ctl_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_ARVALID : STD_LOGIC;
    signal m_mm2s_ctl_ARREADY : STD_LOGIC;
    signal m_mm2s_ctl_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mm2s_ctl_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mm2s_ctl_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mm2s_ctl_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_RVALID : STD_LOGIC;
    signal m_mm2s_ctl_RREADY : STD_LOGIC;
    signal m_mm2s_ctl_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mm2s_ctl_RLAST : STD_LOGIC;
    signal m_mm2s_ctl_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_BVALID : STD_LOGIC;
    signal m_mm2s_ctl_BREADY : STD_LOGIC;
    signal m_mm2s_ctl_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_mm2s_ctl_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mm2s_ctl_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_AWVALID : STD_LOGIC;
    signal m_s2mm_ctl_AWREADY : STD_LOGIC;
    signal m_s2mm_ctl_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal m_s2mm_ctl_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal m_s2mm_ctl_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_WVALID : STD_LOGIC;
    signal m_s2mm_ctl_WREADY : STD_LOGIC;
    signal m_s2mm_ctl_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_WLAST : STD_LOGIC;
    signal m_s2mm_ctl_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_ARVALID : STD_LOGIC;
    signal m_s2mm_ctl_ARREADY : STD_LOGIC;
    signal m_s2mm_ctl_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal m_s2mm_ctl_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal m_s2mm_ctl_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s2mm_ctl_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_RVALID : STD_LOGIC;
    signal m_s2mm_ctl_RREADY : STD_LOGIC;
    signal m_s2mm_ctl_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_RLAST : STD_LOGIC;
    signal m_s2mm_ctl_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_BVALID : STD_LOGIC;
    signal m_s2mm_ctl_BREADY : STD_LOGIC;
    signal m_s2mm_ctl_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_s2mm_ctl_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s2mm_ctl_addr_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s2mm_ctl_addr_reg_1331 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_mm2s_ctl_ARREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_s2mm_ctl_ARREADY : STD_LOGIC;
    signal tmp_reg_1337 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_sig_bdd_431 : BOOLEAN;
    signal tmp_3_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1342 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_331_fu_458_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_331_reg_1347 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_332_fu_462_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_332_reg_1352 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_reg_1357 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_1_reg_1362 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_reg_1367 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_2_reg_1372 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_reg_1377 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_3_reg_1382 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_reg_1387 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_4_reg_1392 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_5_reg_1397 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_5_reg_1402 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_reg_1407 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_6_reg_1412 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_reg_1417 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_7_reg_1422 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_8_reg_1427 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_8_reg_1432 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_reg_1437 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_9_reg_1442 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_10_reg_1447 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_s_reg_1452 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_11_reg_1457 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_10_reg_1462 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_12_reg_1467 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_11_reg_1472 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_13_reg_1477 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_12_reg_1482 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_14_reg_1487 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_13_reg_1492 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_15_reg_1497 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_14_reg_1502 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1507 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1512 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_1519 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_sig_bdd_509 : BOOLEAN;
    signal tmp_326_fu_788_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_326_reg_1524 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_40_reg_1529 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_327_fu_802_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_327_reg_1534 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_41_reg_1539 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_43_reg_1544 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_42_reg_1549 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_328_fu_870_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_328_reg_1554 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_44_reg_1559 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_330_fu_884_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_330_reg_1564 : STD_LOGIC_VECTOR (11 downto 0);
    signal numIterations_fu_912_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal numIterations_reg_1569 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_sig_bdd_538 : BOOLEAN;
    signal ap_sig_ioackin_m_mm2s_ctl_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_mm2s_ctl_WREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_s2mm_ctl_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_s2mm_ctl_WREADY : STD_LOGIC;
    signal tmp_329_fu_925_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_329_reg_1579 : STD_LOGIC_VECTOR (27 downto 0);
    signal key_local_V_0_s_fu_959_p17 : STD_LOGIC_VECTOR (127 downto 0);
    signal key_local_V_0_s_reg_1599 : STD_LOGIC_VECTOR (127 downto 0);
    signal iv_local_V_s_fu_979_p17 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_1_fu_999_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_1_reg_1609 : STD_LOGIC_VECTOR (127 downto 0);
    signal iterations_V_fu_1007_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal iterations_V_reg_1617 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_10_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_583 : BOOLEAN;
    signal p_Repl2_3_fu_1013_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_3_reg_1622 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_391_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_2_reg_1627 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_401_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_1_reg_1632 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_411_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_s_reg_1637 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1642 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_7_fu_1023_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_7_reg_1647 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_6_reg_1652 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_5_reg_1657 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_4_reg_1662 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_11_fu_1027_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_11_reg_1667 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_10_reg_1672 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_9_reg_1677 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_8_reg_1682 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_1_fu_1096_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal r_V_1_reg_1687 : STD_LOGIC_VECTOR (127 downto 0);
    signal iv_local_V_1_fu_1103_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal iv_local_V_1_reg_1692 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aestest_fu_337_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal encrypted_data_V_reg_1697 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Repl2_23_reg_1702 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_ioackin_s_out_V_V_TREADY : STD_LOGIC;
    signal p_Repl2_20_reg_1707 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_21_reg_1712 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_22_reg_1717 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_27_reg_1722 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_24_reg_1727 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_25_reg_1732 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_26_reg_1737 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_31_fu_1247_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_31_reg_1742 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_30_reg_1747 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_28_reg_1752 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_29_reg_1757 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aestest_fu_337_ap_rst : STD_LOGIC;
    signal grp_aestest_fu_337_ap_start : STD_LOGIC;
    signal grp_aestest_fu_337_ap_done : STD_LOGIC;
    signal grp_aestest_fu_337_ap_idle : STD_LOGIC;
    signal grp_aestest_fu_337_ap_ready : STD_LOGIC;
    signal grp_aestest_fu_337_ap_ce : STD_LOGIC;
    signal grp_aestest_fu_337_inptext_V_read : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aestest_fu_337_key_V_read : STD_LOGIC_VECTOR (127 downto 0);
    signal aes_data_V_3_reg_315 : STD_LOGIC_VECTOR (127 downto 0);
    signal t_V_1_reg_325 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aestest_fu_337_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ioackin_m_mm2s_ctl_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_mm2s_ctl_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_mm2s_ctl_WREADY : STD_LOGIC := '0';
    signal tmp_5_fu_806_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_2232 : BOOLEAN;
    signal tmp_7_fu_844_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_888_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_length_fu_936_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_s2mm_ctl_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_s2mm_ctl_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_s2mm_ctl_WREADY : STD_LOGIC := '0';
    signal tmp_6_fu_815_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_852_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_897_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_fu_220 : STD_LOGIC_VECTOR (127 downto 0);
    signal encrypted_data_V_1_fu_1110_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sourceAddress_assign_fu_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_assign_fu_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_fu_1154_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_16_fu_1286_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_17_fu_1295_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_18_fu_1304_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_s_out_V_V_TREADY : STD_LOGIC := '0';
    signal tmp_325_fu_448_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_fu_906_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_4_cast_fu_909_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Repl2_15_fu_1034_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_101_fu_1038_p17 : STD_LOGIC_VECTOR (127 downto 0);
    signal storemerge_v_fu_1062_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal r_V_fu_1069_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal rhs_V_Result_s_fu_1075_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal iv_local_V_fu_1090_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Repl2_19_fu_1114_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_16_fu_1124_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_17_fu_1134_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_18_fu_1144_p4 : STD_LOGIC_VECTOR (7 downto 0);

    component aestest IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        inptext_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        key_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component aes_AXILiteS_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (0 downto 0);
        sourceAddress : OUT STD_LOGIC_VECTOR (31 downto 0);
        sourceAddress_ap_vld : OUT STD_LOGIC;
        key_in_V : OUT STD_LOGIC_VECTOR (127 downto 0);
        key_in_V_ap_vld : OUT STD_LOGIC;
        iv_V : OUT STD_LOGIC_VECTOR (127 downto 0);
        iv_V_ap_vld : OUT STD_LOGIC;
        destinationAddress : OUT STD_LOGIC_VECTOR (31 downto 0);
        destinationAddress_ap_vld : OUT STD_LOGIC;
        numBytes : OUT STD_LOGIC_VECTOR (31 downto 0);
        numBytes_ap_vld : OUT STD_LOGIC;
        mode : OUT STD_LOGIC_VECTOR (31 downto 0);
        mode_ap_vld : OUT STD_LOGIC );
    end component;


    component aes_ddr_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    aes_AXILiteS_s_axi_U : component aes_AXILiteS_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        sourceAddress => sourceAddress,
        sourceAddress_ap_vld => sourceAddress_ap_vld,
        key_in_V => key_in_V,
        key_in_V_ap_vld => key_in_V_ap_vld,
        iv_V => iv_V,
        iv_V_ap_vld => iv_V_ap_vld,
        destinationAddress => destinationAddress,
        destinationAddress_ap_vld => destinationAddress_ap_vld,
        numBytes => numBytes,
        numBytes_ap_vld => numBytes_ap_vld,
        mode => mode,
        mode_ap_vld => mode_ap_vld);

    aes_ddr_m_axi_U : component aes_ddr_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 2,
        C_ID_WIDTH => C_M_AXI_DDR_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_DDR_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_DDR_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_DDR_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_DDR_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_DDR_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_DDR_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_DDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_DDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_DDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ddr_AWVALID,
        AWREADY => m_axi_ddr_AWREADY,
        AWADDR => m_axi_ddr_AWADDR,
        AWID => m_axi_ddr_AWID,
        AWLEN => m_axi_ddr_AWLEN,
        AWSIZE => m_axi_ddr_AWSIZE,
        AWBURST => m_axi_ddr_AWBURST,
        AWLOCK => m_axi_ddr_AWLOCK,
        AWCACHE => m_axi_ddr_AWCACHE,
        AWPROT => m_axi_ddr_AWPROT,
        AWQOS => m_axi_ddr_AWQOS,
        AWREGION => m_axi_ddr_AWREGION,
        AWUSER => m_axi_ddr_AWUSER,
        WVALID => m_axi_ddr_WVALID,
        WREADY => m_axi_ddr_WREADY,
        WDATA => m_axi_ddr_WDATA,
        WSTRB => m_axi_ddr_WSTRB,
        WLAST => m_axi_ddr_WLAST,
        WID => m_axi_ddr_WID,
        WUSER => m_axi_ddr_WUSER,
        ARVALID => m_axi_ddr_ARVALID,
        ARREADY => m_axi_ddr_ARREADY,
        ARADDR => m_axi_ddr_ARADDR,
        ARID => m_axi_ddr_ARID,
        ARLEN => m_axi_ddr_ARLEN,
        ARSIZE => m_axi_ddr_ARSIZE,
        ARBURST => m_axi_ddr_ARBURST,
        ARLOCK => m_axi_ddr_ARLOCK,
        ARCACHE => m_axi_ddr_ARCACHE,
        ARPROT => m_axi_ddr_ARPROT,
        ARQOS => m_axi_ddr_ARQOS,
        ARREGION => m_axi_ddr_ARREGION,
        ARUSER => m_axi_ddr_ARUSER,
        RVALID => m_axi_ddr_RVALID,
        RREADY => m_axi_ddr_RREADY,
        RDATA => m_axi_ddr_RDATA,
        RLAST => m_axi_ddr_RLAST,
        RID => m_axi_ddr_RID,
        RUSER => m_axi_ddr_RUSER,
        RRESP => m_axi_ddr_RRESP,
        BVALID => m_axi_ddr_BVALID,
        BREADY => m_axi_ddr_BREADY,
        BRESP => m_axi_ddr_BRESP,
        BID => m_axi_ddr_BID,
        BUSER => m_axi_ddr_BUSER,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        I_ARVALID => ddr_ARVALID,
        I_ARREADY => ddr_ARREADY,
        I_ARADDR => ddr_ARADDR,
        I_ARID => ddr_ARID,
        I_ARLEN => ddr_ARLEN,
        I_ARSIZE => ddr_ARSIZE,
        I_ARLOCK => ddr_ARLOCK,
        I_ARCACHE => ddr_ARCACHE,
        I_ARQOS => ddr_ARQOS,
        I_ARPROT => ddr_ARPROT,
        I_ARUSER => ddr_ARUSER,
        I_ARBURST => ddr_ARBURST,
        I_ARREGION => ddr_ARREGION,
        I_RVALID => ddr_RVALID,
        I_RREADY => ddr_RREADY,
        I_RDATA => ddr_RDATA,
        I_RID => ddr_RID,
        I_RUSER => ddr_RUSER,
        I_RRESP => ddr_RRESP,
        I_RLAST => ddr_RLAST,
        I_AWVALID => ddr_AWVALID,
        I_AWREADY => ddr_AWREADY,
        I_AWADDR => ddr_AWADDR,
        I_AWID => ddr_AWID,
        I_AWLEN => ddr_AWLEN,
        I_AWSIZE => ddr_AWSIZE,
        I_AWLOCK => ddr_AWLOCK,
        I_AWCACHE => ddr_AWCACHE,
        I_AWQOS => ddr_AWQOS,
        I_AWPROT => ddr_AWPROT,
        I_AWUSER => ddr_AWUSER,
        I_AWBURST => ddr_AWBURST,
        I_AWREGION => ddr_AWREGION,
        I_WVALID => ddr_WVALID,
        I_WREADY => ddr_WREADY,
        I_WDATA => ddr_WDATA,
        I_WID => ddr_WID,
        I_WUSER => ddr_WUSER,
        I_WLAST => ddr_WLAST,
        I_WSTRB => ddr_WSTRB,
        I_BVALID => ddr_BVALID,
        I_BREADY => ddr_BREADY,
        I_BRESP => ddr_BRESP,
        I_BID => ddr_BID,
        I_BUSER => ddr_BUSER);

    grp_aestest_fu_303 : component aestest
    port map (
        ap_clk => ap_clk,
        ap_rst => grp_aestest_fu_303_ap_rst,
        ap_start => grp_aestest_fu_303_ap_start,
        ap_done => grp_aestest_fu_303_ap_done,
        ap_idle => grp_aestest_fu_303_ap_idle,
        ap_ready => grp_aestest_fu_303_ap_ready,
        ap_ce => grp_aestest_fu_303_ap_ce,
        inptext_V_read => grp_aestest_fu_303_inptext_V_read,
        key_V_read => grp_aestest_fu_303_key_V_read,
        ap_return => grp_aestest_fu_303_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_mm2s_ctl_ARREADY assign process. --
    ap_reg_ioackin_m_mm2s_ctl_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY)))) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_431))) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_538))) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2232))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_538)) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY) and not((ap_start = ap_const_logic_0))) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY) and not(ap_sig_bdd_431)) or (not(ap_sig_bdd_538) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY) and (ap_ST_st7_fsm_6 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_ARREADY) and (ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_2232)) or (not(ap_sig_bdd_538) and (ap_const_logic_1 = m_mm2s_ctl_ARREADY) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_mm2s_ctl_AWREADY assign process. --
    ap_reg_ioackin_m_mm2s_ctl_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_538 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_538 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st15_fsm_14 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = m_mm2s_ctl_AWREADY) and (ap_ST_st3_fsm_2 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_AWREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_AWREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_AWREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_AWREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_1 = m_mm2s_ctl_AWREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_1 = m_mm2s_ctl_AWREADY)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_mm2s_ctl_WREADY assign process. --
    ap_reg_ioackin_m_mm2s_ctl_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_538 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_538 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st15_fsm_14 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = m_mm2s_ctl_WREADY)) or ((ap_const_logic_1 = m_mm2s_ctl_WREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_WREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_WREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or ((ap_const_logic_1 = m_mm2s_ctl_WREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_1 = m_mm2s_ctl_WREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_1 = m_mm2s_ctl_WREADY)))) then 
                    ap_reg_ioackin_m_mm2s_ctl_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_s2mm_ctl_ARREADY assign process. --
    ap_reg_ioackin_m_s2mm_ctl_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY)))) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_431))) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_538))) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2232))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_538)) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(ap_sig_bdd_431) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_538) and (ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_2232) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_538) and (ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_ARREADY)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_s2mm_ctl_AWREADY assign process. --
    ap_reg_ioackin_m_s2mm_ctl_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_ddr_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_538 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_538 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st15_fsm_14 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_1 = m_s2mm_ctl_AWREADY)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_ddr_AWREADY assign process. --
    ap_reg_ioackin_ddr_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_ddr_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_538 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_538 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st15_fsm_14 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_1 = m_s2mm_ctl_WREADY)))) then 
                    ap_reg_ioackin_m_s2mm_ctl_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_s_out_V_V_TREADY assign process. --
    ap_reg_ioackin_s_out_V_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_s_out_V_V_TREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st42_fsm_41 = ap_CS_fsm) and not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY))) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY)) and (ap_ST_st45_fsm_44 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY)) and (ap_ST_st43_fsm_42 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY)) and (ap_ST_st44_fsm_43 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_s_out_V_V_TREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st42_fsm_41 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_V_TREADY)) or ((ap_ST_st43_fsm_42 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_V_TREADY)) or ((ap_ST_st44_fsm_43 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_V_TREADY)) or ((ap_ST_st45_fsm_44 = ap_CS_fsm) and (ap_const_logic_1 = s_out_V_V_TREADY)))) then 
                    ap_reg_ioackin_s_out_V_V_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- destinationAddress_ap_vld_preg assign process. --
    destinationAddress_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                destinationAddress_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (tmp_10_fu_1002_p2 = ap_const_lv1_0) and not(ap_sig_bdd_583))) then 
                    destinationAddress_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = destinationAddress_ap_vld))) then 
                    destinationAddress_ap_vld_preg <= destinationAddress_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- destinationAddress_preg assign process. --
    destinationAddress_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                destinationAddress_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = destinationAddress_ap_vld))) then 
                    destinationAddress_preg <= destinationAddress;
                end if; 
            end if;
        end if;
    end process;


    -- grp_aestest_fu_303_ap_start_ap_start_reg assign process. --
    grp_aestest_fu_303_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                grp_aestest_fu_303_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st21_fsm_20 = ap_CS_fsm) and (ap_ST_st22_fsm_21 = ap_NS_fsm))) then 
                    grp_aestest_fu_337_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aestest_fu_337_ap_ready)) then 
                    grp_aestest_fu_337_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- iv_V_ap_vld_preg assign process. --
    iv_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                iv_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (tmp_10_fu_1002_p2 = ap_const_lv1_0) and not(ap_sig_bdd_583))) then 
                    iv_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = iv_V_ap_vld))) then 
                    iv_V_ap_vld_preg <= iv_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- iv_V_preg assign process. --
    iv_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                iv_V_preg <= ap_const_lv128_lc_1;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = iv_V_ap_vld))) then 
                    iv_V_preg <= iv_V;
                end if; 
            end if;
        end if;
    end process;


    -- key_in_V_ap_vld_preg assign process. --
    key_in_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                key_in_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (tmp_10_fu_1002_p2 = ap_const_lv1_0) and not(ap_sig_bdd_583))) then 
                    key_in_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = key_in_V_ap_vld))) then 
                    key_in_V_ap_vld_preg <= key_in_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- key_in_V_preg assign process. --
    key_in_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                key_in_V_preg <= ap_const_lv128_lc_1;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = key_in_V_ap_vld))) then 
                    key_in_V_preg <= key_in_V;
                end if; 
            end if;
        end if;
    end process;


    -- mode_ap_vld_preg assign process. --
    mode_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                mode_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (tmp_10_fu_1002_p2 = ap_const_lv1_0) and not(ap_sig_bdd_583))) then 
                    mode_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = mode_ap_vld))) then 
                    mode_ap_vld_preg <= mode_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- mode_preg assign process. --
    mode_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                mode_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = mode_ap_vld))) then 
                    mode_preg <= mode;
                end if; 
            end if;
        end if;
    end process;


    -- numBytes_ap_vld_preg assign process. --
    numBytes_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                numBytes_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (tmp_10_fu_1002_p2 = ap_const_lv1_0) and not(ap_sig_bdd_583))) then 
                    numBytes_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = numBytes_ap_vld))) then 
                    numBytes_ap_vld_preg <= numBytes_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- numBytes_preg assign process. --
    numBytes_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                numBytes_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = numBytes_ap_vld))) then 
                    numBytes_preg <= numBytes;
                end if; 
            end if;
        end if;
    end process;


    -- sourceAddress_ap_vld_preg assign process. --
    sourceAddress_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                sourceAddress_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (tmp_10_fu_1002_p2 = ap_const_lv1_0) and not(ap_sig_bdd_583))) then 
                    sourceAddress_ap_vld_preg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = sourceAddress_ap_vld) and not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))))) then 
                    sourceAddress_ap_vld_preg <= sourceAddress_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- sourceAddress_preg assign process. --
    sourceAddress_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                sourceAddress_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = sourceAddress_ap_vld) and not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))))) then 
                    sourceAddress_preg <= sourceAddress;
                end if; 
            end if;
        end if;
    end process;


    -- aes_data_V_3_reg_315 assign process. --
    aes_data_V_3_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY)) and (ap_ST_st45_fsm_44 = ap_CS_fsm))) then 
                aes_data_V_3_reg_315 <= iv_local_V_1_reg_1692;
            elsif (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_538))) then 
                aes_data_V_3_reg_315 <= iv_local_V_s_fu_979_p17;
            end if; 
        end if;
    end process;

    -- t_V_1_reg_325 assign process. --
    t_V_1_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY)) and (ap_ST_st45_fsm_44 = ap_CS_fsm))) then 
                t_V_1_reg_325 <= iterations_V_reg_1617;
            elsif (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_538))) then 
                t_V_1_reg_325 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_431)))) then
                destinationAddress_assign_fu_228 <= destinationAddress_in_sig;
                p_Result_10_reg_1447 <= key_in_V_in_sig(87 downto 80);
                p_Result_11_reg_1457 <= key_in_V_in_sig(95 downto 88);
                p_Result_12_reg_1467 <= key_in_V_in_sig(103 downto 96);
                p_Result_13_reg_1477 <= key_in_V_in_sig(111 downto 104);
                p_Result_14_reg_1487 <= key_in_V_in_sig(119 downto 112);
                p_Result_15_reg_1497 <= key_in_V_in_sig(127 downto 120);
                p_Result_1_reg_1357 <= key_in_V_in_sig(15 downto 8);
                p_Result_2_reg_1367 <= key_in_V_in_sig(23 downto 16);
                p_Result_3_reg_1377 <= key_in_V_in_sig(31 downto 24);
                p_Result_4_reg_1387 <= key_in_V_in_sig(39 downto 32);
                p_Result_5_reg_1397 <= key_in_V_in_sig(47 downto 40);
                p_Result_6_reg_1407 <= key_in_V_in_sig(55 downto 48);
                p_Result_7_reg_1417 <= key_in_V_in_sig(63 downto 56);
                p_Result_8_reg_1427 <= key_in_V_in_sig(71 downto 64);
                p_Result_9_10_reg_1462 <= iv_V_in_sig(95 downto 88);
                p_Result_9_11_reg_1472 <= iv_V_in_sig(103 downto 96);
                p_Result_9_12_reg_1482 <= iv_V_in_sig(111 downto 104);
                p_Result_9_13_reg_1492 <= iv_V_in_sig(119 downto 112);
                p_Result_9_14_reg_1502 <= iv_V_in_sig(127 downto 120);
                p_Result_9_1_reg_1362 <= iv_V_in_sig(15 downto 8);
                p_Result_9_2_reg_1372 <= iv_V_in_sig(23 downto 16);
                p_Result_9_3_reg_1382 <= iv_V_in_sig(31 downto 24);
                p_Result_9_4_reg_1392 <= iv_V_in_sig(39 downto 32);
                p_Result_9_5_reg_1402 <= iv_V_in_sig(47 downto 40);
                p_Result_9_6_reg_1412 <= iv_V_in_sig(55 downto 48);
                p_Result_9_7_reg_1422 <= iv_V_in_sig(63 downto 56);
                p_Result_9_8_reg_1432 <= iv_V_in_sig(71 downto 64);
                p_Result_9_9_reg_1442 <= iv_V_in_sig(79 downto 72);
                p_Result_9_s_reg_1452 <= iv_V_in_sig(87 downto 80);
                p_Result_s_reg_1437 <= key_in_V_in_sig(79 downto 72);
                sourceAddress_assign_fu_224 <= sourceAddress_in_sig;
                tmp_11_reg_1507 <= tmp_11_fu_766_p2;
                tmp_14_reg_1512 <= tmp_14_fu_772_p2;
                tmp_331_reg_1347 <= tmp_331_fu_458_p1;
                tmp_332_reg_1352 <= tmp_332_fu_462_p1;
                tmp_3_reg_1342 <= tmp_3_fu_452_p2;
                tmp_reg_1337 <= numBytes_in_sig(31 downto 4);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st41_fsm_40 = ap_CS_fsm)) then
                encrypted_data_V_reg_1697 <= grp_aestest_fu_337_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not(ap_sig_bdd_583))) then
                iterations_V_reg_1617 <= iterations_V_fu_1007_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((s_in_V_V_TVALID = ap_const_logic_0)) and (ap_ST_st22_fsm_21 = ap_CS_fsm))) then
                iv_local_V_1_reg_1692 <= iv_local_V_1_fu_1103_p3;
                r_V_1_reg_1687 <= r_V_1_fu_1096_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_538))) then
                key_local_V_0_s_reg_1599 <= key_local_V_0_s_fu_959_p17;
                tmp_1_reg_1609(0) <= tmp_1_fu_999_p1(0);
    tmp_1_reg_1609(1) <= tmp_1_fu_999_p1(1);
    tmp_1_reg_1609(2) <= tmp_1_fu_999_p1(2);
    tmp_1_reg_1609(3) <= tmp_1_fu_999_p1(3);
    tmp_1_reg_1609(4) <= tmp_1_fu_999_p1(4);
    tmp_1_reg_1609(5) <= tmp_1_fu_999_p1(5);
    tmp_1_reg_1609(6) <= tmp_1_fu_999_p1(6);
    tmp_1_reg_1609(7) <= tmp_1_fu_999_p1(7);
    tmp_1_reg_1609(8) <= tmp_1_fu_999_p1(8);
    tmp_1_reg_1609(9) <= tmp_1_fu_999_p1(9);
    tmp_1_reg_1609(10) <= tmp_1_fu_999_p1(10);
    tmp_1_reg_1609(11) <= tmp_1_fu_999_p1(11);
    tmp_1_reg_1609(12) <= tmp_1_fu_999_p1(12);
    tmp_1_reg_1609(13) <= tmp_1_fu_999_p1(13);
    tmp_1_reg_1609(14) <= tmp_1_fu_999_p1(14);
    tmp_1_reg_1609(15) <= tmp_1_fu_999_p1(15);
    tmp_1_reg_1609(16) <= tmp_1_fu_999_p1(16);
    tmp_1_reg_1609(17) <= tmp_1_fu_999_p1(17);
    tmp_1_reg_1609(18) <= tmp_1_fu_999_p1(18);
    tmp_1_reg_1609(19) <= tmp_1_fu_999_p1(19);
    tmp_1_reg_1609(20) <= tmp_1_fu_999_p1(20);
    tmp_1_reg_1609(21) <= tmp_1_fu_999_p1(21);
    tmp_1_reg_1609(22) <= tmp_1_fu_999_p1(22);
    tmp_1_reg_1609(23) <= tmp_1_fu_999_p1(23);
    tmp_1_reg_1609(24) <= tmp_1_fu_999_p1(24);
    tmp_1_reg_1609(25) <= tmp_1_fu_999_p1(25);
    tmp_1_reg_1609(26) <= tmp_1_fu_999_p1(26);
    tmp_1_reg_1609(27) <= tmp_1_fu_999_p1(27);
    tmp_1_reg_1609(28) <= tmp_1_fu_999_p1(28);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_538 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))))) then
                numIterations_reg_1569 <= numIterations_fu_912_p2;
                tmp_329_reg_1579 <= tmp_329_fu_925_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((s_in_V_V_TVALID = ap_const_logic_0)) and (ap_ST_st21_fsm_20 = ap_CS_fsm))) then
                p_Repl2_10_reg_1672 <= s_in_V_V_TDATA(15 downto 8);
                p_Repl2_11_reg_1667 <= p_Repl2_11_fu_1027_p1;
                p_Repl2_8_reg_1682 <= s_in_V_V_TDATA(31 downto 24);
                p_Repl2_9_reg_1677 <= s_in_V_V_TDATA(23 downto 16);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((tmp_10_fu_1002_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_583))) then
                p_Repl2_1_reg_1632 <= s_in_V_V_TDATA(23 downto 16);
                p_Repl2_2_reg_1627 <= s_in_V_V_TDATA(15 downto 8);
                p_Repl2_3_reg_1622 <= p_Repl2_3_fu_1013_p1;
                p_Repl2_s_reg_1637 <= s_in_V_V_TDATA(31 downto 24);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st42_fsm_41 = ap_CS_fsm) and not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY)))) then
                p_Repl2_20_reg_1707 <= encrypted_data_V_1_fu_1110_p2(79 downto 72);
                p_Repl2_21_reg_1712 <= encrypted_data_V_1_fu_1110_p2(87 downto 80);
                p_Repl2_22_reg_1717 <= encrypted_data_V_1_fu_1110_p2(95 downto 88);
                p_Repl2_23_reg_1702 <= encrypted_data_V_1_fu_1110_p2(71 downto 64);
                p_Repl2_24_reg_1727 <= encrypted_data_V_1_fu_1110_p2(47 downto 40);
                p_Repl2_25_reg_1732 <= encrypted_data_V_1_fu_1110_p2(55 downto 48);
                p_Repl2_26_reg_1737 <= encrypted_data_V_1_fu_1110_p2(63 downto 56);
                p_Repl2_27_reg_1722 <= encrypted_data_V_1_fu_1110_p2(39 downto 32);
                p_Repl2_28_reg_1752 <= encrypted_data_V_1_fu_1110_p2(23 downto 16);
                p_Repl2_29_reg_1757 <= encrypted_data_V_1_fu_1110_p2(31 downto 24);
                p_Repl2_30_reg_1747 <= encrypted_data_V_1_fu_1110_p2(15 downto 8);
                p_Repl2_31_reg_1742 <= p_Repl2_31_fu_1247_p1;
                rhs_V_fu_220 <= encrypted_data_V_1_fu_1110_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((s_in_V_V_TVALID = ap_const_logic_0)))) then
                p_Repl2_4_reg_1662 <= s_in_V_V_TDATA(31 downto 24);
                p_Repl2_5_reg_1657 <= s_in_V_V_TDATA(23 downto 16);
                p_Repl2_6_reg_1652 <= s_in_V_V_TDATA(15 downto 8);
                p_Repl2_7_reg_1647 <= p_Repl2_7_fu_1023_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((tmp_10_fu_1002_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_583) and not((tmp_11_reg_1507 = ap_const_lv1_0)))) then
                tmp_13_reg_1642 <= tmp_13_fu_1017_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not(ap_sig_bdd_509))) then
                tmp_326_reg_1524 <= tmp_326_fu_788_p1;
                tmp_327_reg_1534 <= tmp_327_fu_802_p1;
                tmp_39_reg_1519 <= m_mm2s_ctl_RDATA(31 downto 3);
                tmp_40_reg_1529 <= m_s2mm_ctl_RDATA(31 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(ap_sig_bdd_509) and (ap_ST_st14_fsm_13 = ap_CS_fsm))) then
                tmp_328_reg_1554 <= tmp_328_fu_870_p1;
                tmp_330_reg_1564 <= tmp_330_fu_884_p1;
                tmp_42_reg_1549 <= m_mm2s_ctl_RDATA(31 downto 13);
                tmp_44_reg_1559 <= m_s2mm_ctl_RDATA(31 downto 13);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(ap_sig_bdd_509) and (ap_ST_st11_fsm_10 = ap_CS_fsm))) then
                tmp_41_reg_1539 <= m_mm2s_ctl_RDATA(31 downto 1);
                tmp_43_reg_1544 <= m_s2mm_ctl_RDATA(31 downto 1);
            end if;
        end if;
    end process;
    m_s2mm_ctl_addr_reg_1331(31 downto 0) <= "00000000000000000000000000001100";
    tmp_1_reg_1609(127 downto 29) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , s_in_V_V_TVALID , ap_sig_ioackin_m_mm2s_ctl_ARREADY , ap_sig_ioackin_m_s2mm_ctl_ARREADY , ap_sig_bdd_431 , ap_sig_bdd_509 , ap_sig_bdd_538 , ap_sig_ioackin_m_mm2s_ctl_AWREADY , ap_sig_ioackin_m_mm2s_ctl_WREADY , ap_sig_ioackin_m_s2mm_ctl_AWREADY , ap_sig_ioackin_m_s2mm_ctl_WREADY , tmp_10_fu_1002_p2 , ap_sig_bdd_583 , ap_sig_ioackin_s_out_V_V_TREADY , ap_sig_bdd_2232)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_431))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not(ap_sig_bdd_509)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_538))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st10_fsm_9 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2232))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st11_fsm_10 => 
                if (not(ap_sig_bdd_509)) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st12_fsm_11 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st13_fsm_12 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_538))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st14_fsm_13 => 
                if (not(ap_sig_bdd_509)) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st15_fsm_14 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st16_fsm_15 => 
                if (not((ap_sig_bdd_538 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st17_fsm_16 => 
                if (not((ap_sig_bdd_538 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st18_fsm_17 => 
                if (not(ap_sig_bdd_538)) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st19_fsm_18 => 
                if (((tmp_10_fu_1002_p2 = ap_const_lv1_0) and not(ap_sig_bdd_583))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif ((not((tmp_10_fu_1002_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_583))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st20_fsm_19 => 
                if (not((s_in_V_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st21_fsm_20 => 
                if (not((s_in_V_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st22_fsm_21 => 
                if (not((s_in_V_V_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st81_fsm_80;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st43_fsm_42;
                else
                    ap_NS_fsm <= ap_ST_st42_fsm_41;
                end if;
            when ap_ST_st43_fsm_42 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st44_fsm_43;
                else
                    ap_NS_fsm <= ap_ST_st43_fsm_42;
                end if;
            when ap_ST_st44_fsm_43 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st45_fsm_44;
                else
                    ap_NS_fsm <= ap_ST_st44_fsm_43;
                end if;
            when ap_ST_st45_fsm_44 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st45_fsm_44;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, tmp_10_fu_1002_p2, ap_sig_bdd_583)
    begin
        if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (tmp_10_fu_1002_p2 = ap_const_lv1_0) and not(ap_sig_bdd_583))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, tmp_10_fu_1002_p2, ap_sig_bdd_583)
    begin
        if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (tmp_10_fu_1002_p2 = ap_const_lv1_0) and not(ap_sig_bdd_583))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv1_1;

    -- ap_sig_bdd_2232 assign process. --
    ap_sig_bdd_2232_assign_proc : process(m_mm2s_ctl_RVALID, m_mm2s_ctl_BVALID, m_s2mm_ctl_RVALID, m_s2mm_ctl_BVALID)
    begin
                ap_sig_bdd_2232 <= ((m_mm2s_ctl_RVALID = ap_const_logic_0) or (m_mm2s_ctl_BVALID = ap_const_logic_0) or (m_s2mm_ctl_RVALID = ap_const_logic_0) or (m_s2mm_ctl_BVALID = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_431 assign process. --
    ap_sig_bdd_431_assign_proc : process(sourceAddress_ap_vld_in_sig, key_in_V_ap_vld_in_sig, iv_V_ap_vld_in_sig, destinationAddress_ap_vld_in_sig, numBytes_ap_vld_in_sig, mode_ap_vld_in_sig, m_mm2s_ctl_RVALID, m_mm2s_ctl_BVALID, m_s2mm_ctl_RVALID, m_s2mm_ctl_BVALID)
    begin
                ap_sig_bdd_431 <= ((mode_ap_vld_in_sig = ap_const_logic_0) or (numBytes_ap_vld_in_sig = ap_const_logic_0) or (destinationAddress_ap_vld_in_sig = ap_const_logic_0) or (sourceAddress_ap_vld_in_sig = ap_const_logic_0) or (m_mm2s_ctl_RVALID = ap_const_logic_0) or (m_mm2s_ctl_BVALID = ap_const_logic_0) or (m_s2mm_ctl_RVALID = ap_const_logic_0) or (m_s2mm_ctl_BVALID = ap_const_logic_0) or (key_in_V_ap_vld_in_sig = ap_const_logic_0) or (iv_V_ap_vld_in_sig = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_509 assign process. --
    ap_sig_bdd_509_assign_proc : process(m_mm2s_ctl_RVALID, m_s2mm_ctl_RVALID)
    begin
                ap_sig_bdd_509 <= ((m_mm2s_ctl_RVALID = ap_const_logic_0) or (m_s2mm_ctl_RVALID = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_538 assign process. --
    ap_sig_bdd_538_assign_proc : process(m_mm2s_ctl_BVALID, m_s2mm_ctl_BVALID)
    begin
                ap_sig_bdd_538 <= ((m_mm2s_ctl_BVALID = ap_const_logic_0) or (m_s2mm_ctl_BVALID = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_583 assign process. --
    ap_sig_bdd_583_assign_proc : process(s_in_V_V_TVALID, tmp_10_fu_1002_p2)
    begin
                ap_sig_bdd_583 <= ((s_in_V_V_TVALID = ap_const_logic_0) and not((tmp_10_fu_1002_p2 = ap_const_lv1_0)));
    end process;


    -- ap_sig_bdd_2393 assign process. --
    ap_sig_bdd_2393_assign_proc : process(ap_CS_fsm, ddr_RVALID)
    begin
                ap_sig_bdd_2393 <= ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_2399 assign process. --
    ap_sig_bdd_2399_assign_proc : process(ap_CS_fsm, ddr_RVALID)
    begin
                ap_sig_bdd_2399 <= ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_2405 assign process. --
    ap_sig_bdd_2405_assign_proc : process(ap_CS_fsm, ddr_RVALID)
    begin
                ap_sig_bdd_2405 <= ((ap_ST_st12_fsm_11 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_2411 assign process. --
    ap_sig_bdd_2411_assign_proc : process(ap_CS_fsm, ddr_RVALID)
    begin
                ap_sig_bdd_2411 <= ((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_2417 assign process. --
    ap_sig_bdd_2417_assign_proc : process(ap_CS_fsm, ddr_RVALID)
    begin
                ap_sig_bdd_2417 <= ((ap_ST_st14_fsm_13 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_2423 assign process. --
    ap_sig_bdd_2423_assign_proc : process(ap_CS_fsm, ddr_RVALID)
    begin
                ap_sig_bdd_2423 <= ((ap_ST_st15_fsm_14 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)));
    end process;


    -- ap_sig_ioackin_s_out_V_V_TREADY assign process. --
    ap_sig_ioackin_s_out_V_V_TREADY_assign_proc : process(s_out_V_V_TREADY, ap_reg_ioackin_s_out_V_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_s_out_V_V_TREADY)) then 
            ap_sig_ioackin_s_out_V_V_TREADY <= s_out_V_V_TREADY;
        else 
            ap_sig_ioackin_s_out_V_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_bdd_2435 assign process. --
    ap_sig_bdd_2435_assign_proc : process(ap_CS_fsm, ddr_RVALID)
    begin
                ap_sig_bdd_2435 <= ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_2441 assign process. --
    ap_sig_bdd_2441_assign_proc : process(ap_CS_fsm, ddr_RVALID)
    begin
                ap_sig_bdd_2441 <= ((ap_ST_st18_fsm_17 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)));
    end process;

    encrypted_data_V_1_fu_1110_p2 <= (encrypted_data_V_reg_1697 xor r_V_1_reg_1687);

    -- grp_aestest_fu_337_ap_ce assign process. --
    grp_aestest_fu_337_ap_ce_assign_proc : process(ap_CS_fsm, s_in_V_V_TVALID)
    begin
        if (((not((s_in_V_V_TVALID = ap_const_logic_0)) and (ap_ST_st22_fsm_21 = ap_CS_fsm)) or (ap_ST_st41_fsm_40 = ap_CS_fsm) or (ap_ST_st23_fsm_22 = ap_CS_fsm) or (ap_ST_st24_fsm_23 = ap_CS_fsm) or (ap_ST_st25_fsm_24 = ap_CS_fsm) or (ap_ST_st26_fsm_25 = ap_CS_fsm) or (ap_ST_st27_fsm_26 = ap_CS_fsm) or (ap_ST_st28_fsm_27 = ap_CS_fsm) or (ap_ST_st29_fsm_28 = ap_CS_fsm) or (ap_ST_st30_fsm_29 = ap_CS_fsm) or (ap_ST_st31_fsm_30 = ap_CS_fsm) or (ap_ST_st32_fsm_31 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm) or (ap_ST_st34_fsm_33 = ap_CS_fsm) or (ap_ST_st35_fsm_34 = ap_CS_fsm) or (ap_ST_st36_fsm_35 = ap_CS_fsm) or (ap_ST_st37_fsm_36 = ap_CS_fsm) or (ap_ST_st38_fsm_37 = ap_CS_fsm) or (ap_ST_st39_fsm_38 = ap_CS_fsm) or (ap_ST_st40_fsm_39 = ap_CS_fsm))) then 
            grp_aestest_fu_337_ap_ce <= ap_const_logic_1;
        else 
            grp_aestest_fu_337_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_2472 assign process. --
    ap_sig_bdd_2472_assign_proc : process(ap_CS_fsm, ddr_BVALID)
    begin
                ap_sig_bdd_2472 <= ((ap_ST_st83_fsm_82 = ap_CS_fsm) and not((ddr_BVALID = ap_const_logic_0)));
    end process;

    grp_aestest_fu_337_ap_start <= grp_aestest_fu_337_ap_start_ap_start_reg;
    grp_aestest_fu_337_inptext_V_read <= 
        r_V_fu_1069_p2 when (tmp_11_reg_1507(0) = '1') else 
        rhs_V_Result_s_fu_1075_p3;
    grp_aestest_fu_337_key_V_read <= key_local_V_0_s_reg_1599;
    grp_fu_391_p4 <= s_in_V_V_TDATA(15 downto 8);
    grp_fu_401_p4 <= s_in_V_V_TDATA(23 downto 16);
    grp_fu_411_p4 <= s_in_V_V_TDATA(31 downto 24);
    iterations_V_fu_1007_p2 <= std_logic_vector(unsigned(t_V_1_reg_325) + unsigned(ap_const_lv128_lc_2));

    -- ap_sig_ioackin_ddr_AWREADY assign process. --
    ap_sig_ioackin_ddr_AWREADY_assign_proc : process(ddr_AWREADY, ap_reg_ioackin_ddr_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_ddr_AWREADY)) then 
            ap_sig_ioackin_ddr_AWREADY <= ddr_AWREADY;
        else 
            ap_sig_ioackin_ddr_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_ddr_WREADY assign process. --
    ap_sig_ioackin_ddr_WREADY_assign_proc : process(ddr_WREADY, ap_reg_ioackin_ddr_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_ddr_WREADY)) then 
            ap_sig_ioackin_ddr_WREADY <= ddr_WREADY;
        else 
            ap_sig_ioackin_ddr_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    iv_local_V_1_fu_1103_p3 <= 
        iv_local_V_fu_1090_p2 when (tmp_14_reg_1512(0) = '1') else 
        aes_data_V_3_reg_315;
    iv_local_V_fu_1090_p2 <= std_logic_vector(unsigned(aes_data_V_3_reg_315) + unsigned(ap_const_lv128_lc_2));
    iv_local_V_s_fu_979_p17 <= (((((((((((((((tmp_332_reg_1352 & p_Result_9_1_reg_1362) & p_Result_9_2_reg_1372) & p_Result_9_3_reg_1382) & p_Result_9_4_reg_1392) & p_Result_9_5_reg_1402) & p_Result_9_6_reg_1412) & p_Result_9_7_reg_1422) & p_Result_9_8_reg_1432) & p_Result_9_9_reg_1442) & p_Result_9_s_reg_1452) & p_Result_9_10_reg_1462) & p_Result_9_11_reg_1472) & p_Result_9_12_reg_1482) & p_Result_9_13_reg_1492) & p_Result_9_14_reg_1502);

    -- ddr_ARADDR assign process. --
    ddr_ARADDR_assign_proc : process(ddr_addr_1_reg_1761, ddr_addr_2_reg_1772, ddr_addr_3_reg_1783, ddr_addr_4_reg_1794, ddr_addr_5_reg_1805, ddr_addr_6_reg_1816, ddr_addr_7_reg_1827, ddr_addr_8_reg_1838, ddr_addr_9_reg_1849, ddr_addr_10_reg_1860, ddr_addr_11_reg_1871, ddr_addr_12_reg_1882, ddr_addr_13_reg_1893, ddr_addr_14_reg_1904, ddr_addr_15_reg_1915, tmp_s_fu_791_p1, ap_reg_ioackin_ddr_ARREADY, ap_sig_bdd_2315, ap_sig_bdd_2357, ap_sig_bdd_2363, ap_sig_bdd_2369, ap_sig_bdd_2375, ap_sig_bdd_2381, ap_sig_bdd_2387, ap_sig_bdd_2393, ap_sig_bdd_2399, ap_sig_bdd_2405, ap_sig_bdd_2411, ap_sig_bdd_2417, ap_sig_bdd_2423, ap_sig_bdd_2429, ap_sig_bdd_2435, ap_sig_bdd_2441)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) then
            if (ap_sig_bdd_2441) then 
                ddr_ARADDR <= ddr_addr_15_reg_1915;
            elsif (ap_sig_bdd_2435) then 
                ddr_ARADDR <= ddr_addr_14_reg_1904;
            elsif (ap_sig_bdd_2429) then 
                ddr_ARADDR <= ddr_addr_13_reg_1893;
            elsif (ap_sig_bdd_2423) then 
                ddr_ARADDR <= ddr_addr_12_reg_1882;
            elsif (ap_sig_bdd_2417) then 
                ddr_ARADDR <= ddr_addr_11_reg_1871;
            elsif (ap_sig_bdd_2411) then 
                ddr_ARADDR <= ddr_addr_10_reg_1860;
            elsif (ap_sig_bdd_2405) then 
                ddr_ARADDR <= ddr_addr_9_reg_1849;
            elsif (ap_sig_bdd_2399) then 
                ddr_ARADDR <= ddr_addr_8_reg_1838;
            elsif (ap_sig_bdd_2393) then 
                ddr_ARADDR <= ddr_addr_7_reg_1827;
            elsif (ap_sig_bdd_2387) then 
                ddr_ARADDR <= ddr_addr_6_reg_1816;
            elsif (ap_sig_bdd_2381) then 
                ddr_ARADDR <= ddr_addr_5_reg_1805;
            elsif (ap_sig_bdd_2375) then 
                ddr_ARADDR <= ddr_addr_4_reg_1794;
            elsif (ap_sig_bdd_2369) then 
                ddr_ARADDR <= ddr_addr_3_reg_1783;
            elsif (ap_sig_bdd_2363) then 
                ddr_ARADDR <= ddr_addr_2_reg_1772;
            elsif (ap_sig_bdd_2357) then 
                ddr_ARADDR <= ddr_addr_1_reg_1761;
            elsif (ap_sig_bdd_2315) then 
                ddr_ARADDR <= tmp_s_fu_791_p1(32 - 1 downto 0);
            else 
                ddr_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ddr_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ddr_ARBURST <= ap_const_lv2_0;
    ddr_ARCACHE <= ap_const_lv4_0;
    ddr_ARID <= ap_const_lv1_0;
    ddr_ARLEN <= ap_const_lv32_1;
    ddr_ARLOCK <= ap_const_lv2_0;
    ddr_ARPROT <= ap_const_lv3_0;
    ddr_ARQOS <= ap_const_lv4_0;
    ddr_ARREGION <= ap_const_lv4_0;
    ddr_ARSIZE <= ap_const_lv3_0;
    ddr_ARUSER <= ap_const_lv1_0;

    -- ddr_ARVALID assign process. --
    ddr_ARVALID_assign_proc : process(ap_CS_fsm, ddr_RVALID, exitcond_fu_780_p2, ap_reg_ioackin_ddr_ARREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond_fu_780_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) or ((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) or ((ap_ST_st14_fsm_13 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) or ((ap_ST_st18_fsm_17 = ap_CS_fsm) and not((ddr_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)))) then 
            ddr_ARVALID <= ap_const_logic_1;
        else 
            ddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    key_local_V_0_s_fu_959_p17 <= (((((((((((((((tmp_331_reg_1347 & p_Result_1_reg_1357) & p_Result_2_reg_1367) & p_Result_3_reg_1377) & p_Result_4_reg_1387) & p_Result_5_reg_1397) & p_Result_6_reg_1407) & p_Result_7_reg_1417) & p_Result_8_reg_1427) & p_Result_s_reg_1437) & p_Result_10_reg_1447) & p_Result_11_reg_1457) & p_Result_12_reg_1467) & p_Result_13_reg_1477) & p_Result_14_reg_1487) & p_Result_15_reg_1497);
    m_mm2s_ctl_ARADDR <= ap_const_lv32_0;
    m_mm2s_ctl_ARBURST <= ap_const_lv2_0;
    m_mm2s_ctl_ARCACHE <= ap_const_lv4_0;
    m_mm2s_ctl_ARID <= ap_const_lv1_0;
    m_mm2s_ctl_ARLEN <= ap_const_lv32_1;
    m_mm2s_ctl_ARLOCK <= ap_const_lv2_0;
    m_mm2s_ctl_ARPROT <= ap_const_lv3_0;
    m_mm2s_ctl_ARQOS <= ap_const_lv4_0;
    m_mm2s_ctl_ARREGION <= ap_const_lv4_0;
    m_mm2s_ctl_ARSIZE <= ap_const_lv3_0;
    m_mm2s_ctl_ARUSER <= ap_const_lv1_0;

    -- m_mm2s_ctl_ARVALID assign process. --
    m_mm2s_ctl_ARVALID_assign_proc : process(ap_start, ap_CS_fsm, ap_sig_bdd_431, ap_sig_bdd_538, ap_reg_ioackin_m_mm2s_ctl_ARREADY, ap_sig_bdd_2232)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY) and not(ap_sig_bdd_431)) or (not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY) and (ap_ST_st7_fsm_6 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY) and (ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_2232)) or (not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_ARREADY) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
            m_mm2s_ctl_ARVALID <= ap_const_logic_1;
        else 
            ddr_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ddr_AWBURST <= ap_const_lv2_0;
    ddr_AWCACHE <= ap_const_lv4_0;
    ddr_AWID <= ap_const_lv1_0;
    ddr_AWLEN <= ap_const_lv32_1;
    ddr_AWLOCK <= ap_const_lv2_0;
    ddr_AWPROT <= ap_const_lv3_0;
    ddr_AWQOS <= ap_const_lv4_0;
    ddr_AWREGION <= ap_const_lv4_0;
    ddr_AWSIZE <= ap_const_lv3_0;
    ddr_AWUSER <= ap_const_lv1_0;

    -- m_mm2s_ctl_AWADDR assign process. --
    m_mm2s_ctl_AWADDR_assign_proc : process(ap_CS_fsm, ap_sig_bdd_538, ap_reg_ioackin_m_mm2s_ctl_AWREADY)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY))) then 
            m_mm2s_ctl_AWADDR <= ap_const_lv64_A(32 - 1 downto 0);
        elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY))) then 
            m_mm2s_ctl_AWADDR <= ap_const_lv64_6(32 - 1 downto 0);
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)))) then 
            m_mm2s_ctl_AWADDR <= ap_const_lv32_0;
        else 
            ddr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_mm2s_ctl_AWVALID assign process. --
    m_mm2s_ctl_AWVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_538, ap_reg_ioackin_m_mm2s_ctl_AWREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_AWREADY)))) then 
            m_mm2s_ctl_AWVALID <= ap_const_logic_1;
        else 
            ddr_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_mm2s_ctl_BREADY assign process. --
    m_mm2s_ctl_BREADY_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_m_mm2s_ctl_ARREADY, ap_sig_ioackin_m_s2mm_ctl_ARREADY, ap_sig_bdd_431, ap_sig_bdd_538, ap_sig_ioackin_m_mm2s_ctl_AWREADY, ap_sig_ioackin_m_mm2s_ctl_WREADY, ap_sig_ioackin_m_s2mm_ctl_AWREADY, ap_sig_ioackin_m_s2mm_ctl_WREADY, ap_sig_bdd_2232)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_431))) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_538 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_538 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_538)) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_538))) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2232))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_538)) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
            m_mm2s_ctl_BREADY <= ap_const_logic_1;
        else 
            ddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_mm2s_ctl_RREADY assign process. --
    m_mm2s_ctl_RREADY_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_m_mm2s_ctl_ARREADY, ap_sig_ioackin_m_s2mm_ctl_ARREADY, ap_sig_bdd_431, ap_sig_bdd_509, ap_sig_bdd_2232)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_431))) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and not(ap_sig_bdd_509)) or (not(ap_sig_bdd_509) and (ap_ST_st11_fsm_10 = ap_CS_fsm)) or (not(ap_sig_bdd_509) and (ap_ST_st14_fsm_13 = ap_CS_fsm)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2232))))) then 
            m_mm2s_ctl_RREADY <= ap_const_logic_1;
        else 
            ddr_WDATA <= "XXXXXXXX";
        end if; 
    end process;

    ddr_WID <= ap_const_lv1_0;
    ddr_WLAST <= ap_const_logic_0;
    ddr_WSTRB <= ap_const_lv1_1;
    ddr_WUSER <= ap_const_lv1_0;

    -- m_mm2s_ctl_WDATA assign process. --
    m_mm2s_ctl_WDATA_assign_proc : process(ap_CS_fsm, ap_sig_bdd_538, ap_reg_ioackin_m_mm2s_ctl_WREADY, tmp_5_fu_806_p4, tmp_7_fu_844_p3, tmp_8_fu_888_p4, read_length_fu_936_p3, sourceAddress_assign_fu_224)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY))) then 
            m_mm2s_ctl_WDATA <= read_length_fu_936_p3;
        elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY))) then 
            m_mm2s_ctl_WDATA <= sourceAddress_assign_fu_224;
        elsif (((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm))) then 
            m_mm2s_ctl_WDATA <= tmp_8_fu_888_p4;
        elsif (((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm))) then 
            m_mm2s_ctl_WDATA <= tmp_7_fu_844_p3;
        elsif (((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            m_mm2s_ctl_WDATA <= tmp_5_fu_806_p4;
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)))) then 
            m_mm2s_ctl_WDATA <= ap_const_lv32_0;
        else 
            ddr_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    destinationAddressLocal_1_fu_1511_p2 <= std_logic_vector(unsigned(destinationAddressLocal1_reg_292) + unsigned(ap_const_lv32_10));

    -- m_mm2s_ctl_WVALID assign process. --
    m_mm2s_ctl_WVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_538, ap_reg_ioackin_m_mm2s_ctl_WREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st12_fsm_11 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_mm2s_ctl_WREADY)))) then 
            m_mm2s_ctl_WVALID <= ap_const_logic_1;
        else 
            destinationAddress_ap_vld_in_sig <= destinationAddress_ap_vld_preg;
        end if; 
    end process;


    -- m_s2mm_ctl_ARADDR assign process. --
    m_s2mm_ctl_ARADDR_assign_proc : process(ap_start, ap_CS_fsm, m_s2mm_ctl_addr_reg_1331, ap_sig_bdd_431, ap_sig_bdd_538, ap_sig_bdd_2232, ap_reg_ioackin_m_s2mm_ctl_ARREADY)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(ap_sig_bdd_431) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_538) and (ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_2232) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_538) and (ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)))) then 
            m_s2mm_ctl_ARADDR <= m_s2mm_ctl_addr_reg_1331;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY))) then 
            m_s2mm_ctl_ARADDR <= ap_const_lv64_C(32 - 1 downto 0);
        else 
            destinationAddress_in_sig <= destinationAddress_preg;
        end if; 
    end process;

    exitcond_fu_780_p2 <= "1" when (iterations_reg_271 = tmp_42_reg_1742) else "0";

    -- m_s2mm_ctl_ARVALID assign process. --
    m_s2mm_ctl_ARVALID_assign_proc : process(ap_start, ap_CS_fsm, ap_sig_bdd_431, ap_sig_bdd_538, ap_sig_bdd_2232, ap_reg_ioackin_m_s2mm_ctl_ARREADY)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(ap_sig_bdd_431) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_538) and (ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_2232) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)) or (not(ap_sig_bdd_538) and (ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_ARREADY)))) then 
            m_s2mm_ctl_ARVALID <= ap_const_logic_1;
        else 
            grp_aestest_fu_303_ap_ce <= ap_const_logic_1;
        end if; 
    end process;


    -- m_s2mm_ctl_AWADDR assign process. --
    m_s2mm_ctl_AWADDR_assign_proc : process(ap_CS_fsm, m_s2mm_ctl_addr_reg_1331, ap_sig_bdd_538, ap_reg_ioackin_m_s2mm_ctl_AWREADY)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY))) then 
            m_s2mm_ctl_AWADDR <= ap_const_lv64_16(32 - 1 downto 0);
        elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY))) then 
            m_s2mm_ctl_AWADDR <= ap_const_lv64_12(32 - 1 downto 0);
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)))) then 
            m_s2mm_ctl_AWADDR <= m_s2mm_ctl_addr_reg_1331;
        else 
            m_s2mm_ctl_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_aestest_fu_303_ap_start <= grp_aestest_fu_303_ap_start_ap_start_reg;

    -- m_s2mm_ctl_AWVALID assign process. --
    m_s2mm_ctl_AWVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_538, ap_reg_ioackin_m_s2mm_ctl_AWREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_AWREADY)))) then 
            m_s2mm_ctl_AWVALID <= ap_const_logic_1;
        else 
            grp_aestest_fu_303_inptext_V_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_aestest_fu_303_key_V_read <= key_local_V_0_s_reg_1732;
    grp_fu_353_p2 <= std_logic_vector(unsigned(t_V_fu_208) + unsigned(ap_const_lv128_lc_2));
    iterations_1_fu_785_p2 <= std_logic_vector(unsigned(iterations_reg_271) + unsigned(ap_const_lv29_1));

    -- m_s2mm_ctl_BREADY assign process. --
    m_s2mm_ctl_BREADY_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_m_mm2s_ctl_ARREADY, ap_sig_ioackin_m_s2mm_ctl_ARREADY, ap_sig_bdd_431, ap_sig_bdd_538, ap_sig_ioackin_m_mm2s_ctl_AWREADY, ap_sig_ioackin_m_mm2s_ctl_WREADY, ap_sig_ioackin_m_s2mm_ctl_AWREADY, ap_sig_ioackin_m_s2mm_ctl_WREADY, ap_sig_bdd_2232)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_431))) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_538 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY)))) or (not((ap_sig_bdd_538 or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_ST_st18_fsm_17 = ap_CS_fsm) and not(ap_sig_bdd_538)) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_538))) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2232))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_538)) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
            m_s2mm_ctl_BREADY <= ap_const_logic_1;
        else 
            iv_V_ap_vld_in_sig <= iv_V_ap_vld_preg;
        end if; 
    end process;


    -- m_s2mm_ctl_RREADY assign process. --
    m_s2mm_ctl_RREADY_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_m_mm2s_ctl_ARREADY, ap_sig_ioackin_m_s2mm_ctl_ARREADY, ap_sig_bdd_431, ap_sig_bdd_509, ap_sig_bdd_2232)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_431))) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and not(ap_sig_bdd_509)) or (not(ap_sig_bdd_509) and (ap_ST_st11_fsm_10 = ap_CS_fsm)) or (not(ap_sig_bdd_509) and (ap_ST_st14_fsm_13 = ap_CS_fsm)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_mm2s_ctl_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_s2mm_ctl_ARREADY) or ap_sig_bdd_2232))))) then 
            m_s2mm_ctl_RREADY <= ap_const_logic_1;
        else 
            iv_V_in_sig <= iv_V_preg;
        end if; 
    end process;

    iv_local_V_s_fu_748_p17 <= (((((((((((((((tmp_327_reg_1554 & p_Result_6_1_reg_1564) & p_Result_6_2_reg_1574) & p_Result_6_3_reg_1584) & p_Result_6_4_reg_1594) & p_Result_6_5_reg_1604) & p_Result_6_6_reg_1614) & p_Result_6_7_reg_1624) & p_Result_6_8_reg_1634) & p_Result_6_9_reg_1644) & p_Result_6_s_reg_1654) & p_Result_6_10_reg_1664) & p_Result_6_11_reg_1674) & p_Result_6_12_reg_1684) & p_Result_6_13_reg_1694) & p_Result_6_14_reg_1704);

    -- m_s2mm_ctl_WDATA assign process. --
    m_s2mm_ctl_WDATA_assign_proc : process(ap_CS_fsm, ap_sig_bdd_538, read_length_fu_936_p3, ap_reg_ioackin_m_s2mm_ctl_WREADY, tmp_6_fu_815_p4, tmp_9_fu_852_p3, tmp_s_fu_897_p4, destinationAddress_assign_fu_228)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= read_length_fu_936_p3;
        elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= destinationAddress_assign_fu_228;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= tmp_s_fu_897_p4;
        elsif (((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= tmp_9_fu_852_p3;
        elsif (((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY))) then 
            m_s2mm_ctl_WDATA <= tmp_6_fu_815_p4;
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)))) then 
            m_s2mm_ctl_WDATA <= ap_const_lv32_0;
        else 
            key_in_V_ap_vld_in_sig <= key_in_V_ap_vld_preg;
        end if; 
    end process;


    -- m_s2mm_ctl_WVALID assign process. --
    m_s2mm_ctl_WVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_538, ap_reg_ioackin_m_s2mm_ctl_WREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not(ap_sig_bdd_538) and (ap_const_logic_0 = ap_reg_ioackin_m_s2mm_ctl_WREADY)))) then 
            m_s2mm_ctl_WVALID <= ap_const_logic_1;
        else 
            key_in_V_in_sig <= key_in_V_preg;
        end if; 
    end process;

    m_s2mm_ctl_addr_fu_421_p2 <= ap_const_lv64_C(32 - 1 downto 0);

    -- mode_ap_vld_in_sig assign process. --
    mode_ap_vld_in_sig_assign_proc : process(mode_ap_vld, mode_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = mode_ap_vld)) then 
            mode_ap_vld_in_sig <= mode_ap_vld;
        else 
            mode_ap_vld_in_sig <= mode_ap_vld_preg;
        end if; 
    end process;


    -- mode_in_sig assign process. --
    mode_in_sig_assign_proc : process(mode, mode_preg, mode_ap_vld)
    begin
        if ((ap_const_logic_1 = mode_ap_vld)) then 
            mode_in_sig <= mode;
        else 
            mode_in_sig <= mode_preg;
        end if; 
    end process;


    -- numBytes_ap_vld_in_sig assign process. --
    numBytes_ap_vld_in_sig_assign_proc : process(numBytes_ap_vld, numBytes_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = numBytes_ap_vld)) then 
            numBytes_ap_vld_in_sig <= numBytes_ap_vld;
        else 
            numBytes_ap_vld_in_sig <= numBytes_ap_vld_preg;
        end if; 
    end process;


    -- numBytes_in_sig assign process. --
    numBytes_in_sig_assign_proc : process(numBytes, numBytes_preg, numBytes_ap_vld)
    begin
        if ((ap_const_logic_1 = numBytes_ap_vld)) then 
            numBytes_in_sig <= numBytes;
        else 
            numBytes_in_sig <= numBytes_preg;
        end if; 
    end process;

    numIterations_fu_912_p2 <= std_logic_vector(unsigned(tmp_cast_fu_906_p1) + unsigned(tmp_4_cast_fu_909_p1));
    p_Repl2_11_fu_1027_p1 <= s_in_V_V_TDATA(8 - 1 downto 0);
    p_Repl2_15_fu_1034_p1 <= s_in_V_V_TDATA(8 - 1 downto 0);
    p_Repl2_16_fu_1124_p4 <= encrypted_data_V_1_fu_1110_p2(111 downto 104);
    p_Repl2_17_fu_1134_p4 <= encrypted_data_V_1_fu_1110_p2(119 downto 112);
    p_Repl2_18_fu_1144_p4 <= encrypted_data_V_1_fu_1110_p2(127 downto 120);
    p_Repl2_19_fu_1114_p4 <= encrypted_data_V_1_fu_1110_p2(103 downto 96);
    p_Repl2_31_fu_1247_p1 <= encrypted_data_V_1_fu_1110_p2(8 - 1 downto 0);
    p_Repl2_3_fu_1013_p1 <= s_in_V_V_TDATA(8 - 1 downto 0);
    p_Repl2_7_fu_1023_p1 <= s_in_V_V_TDATA(8 - 1 downto 0);
    p_Result_16_fu_1286_p5 <= (((p_Repl2_23_reg_1702 & p_Repl2_20_reg_1707) & p_Repl2_21_reg_1712) & p_Repl2_22_reg_1717);
    p_Result_17_fu_1295_p5 <= (((p_Repl2_27_reg_1722 & p_Repl2_24_reg_1727) & p_Repl2_25_reg_1732) & p_Repl2_26_reg_1737);
    p_Result_18_fu_1304_p5 <= (((p_Repl2_31_reg_1742 & p_Repl2_30_reg_1747) & p_Repl2_28_reg_1752) & p_Repl2_29_reg_1757);
    p_Result_9_fu_1154_p5 <= (((p_Repl2_19_fu_1114_p4 & p_Repl2_16_fu_1124_p4) & p_Repl2_17_fu_1134_p4) & p_Repl2_18_fu_1144_p4);
    p_Result_s_101_fu_1038_p17 <= (((((((((((((((p_Repl2_3_reg_1622 & p_Repl2_2_reg_1627) & p_Repl2_1_reg_1632) & p_Repl2_s_reg_1637) & p_Repl2_7_reg_1647) & p_Repl2_6_reg_1652) & p_Repl2_5_reg_1657) & p_Repl2_4_reg_1662) & p_Repl2_11_reg_1667) & p_Repl2_10_reg_1672) & p_Repl2_9_reg_1677) & p_Repl2_8_reg_1682) & p_Repl2_15_fu_1034_p1) & grp_fu_391_p4) & grp_fu_401_p4) & grp_fu_411_p4);
    r_V_1_fu_1096_p3 <= 
        p_Result_s_101_fu_1038_p17 when (tmp_14_reg_1512(0) = '1') else 
        ap_const_lv128_lc_1;
    r_V_fu_1069_p2 <= (p_Result_s_101_fu_1038_p17 xor storemerge_v_fu_1062_p3);
    read_length_fu_936_p3 <= (tmp_329_reg_1579 & ap_const_lv4_0);
    rhs_V_Result_s_fu_1075_p3 <= 
        aes_data_V_3_reg_315 when (tmp_14_reg_1512(0) = '1') else 
        p_Result_s_101_fu_1038_p17;

    -- s_in_V_V_TREADY assign process. --
    s_in_V_V_TREADY_assign_proc : process(ap_CS_fsm, s_in_V_V_TVALID, tmp_10_fu_1002_p2, ap_sig_bdd_583)
    begin
        if ((((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((tmp_10_fu_1002_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_583)) or ((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((s_in_V_V_TVALID = ap_const_logic_0))) or (not((s_in_V_V_TVALID = ap_const_logic_0)) and (ap_ST_st21_fsm_20 = ap_CS_fsm)) or (not((s_in_V_V_TVALID = ap_const_logic_0)) and (ap_ST_st22_fsm_21 = ap_CS_fsm)))) then 
            s_in_V_V_TREADY <= ap_const_logic_1;
        else 
            s_in_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- s_out_V_V_TDATA assign process. --
    s_out_V_V_TDATA_assign_proc : process(ap_CS_fsm, ap_sig_ioackin_s_out_V_V_TREADY, p_Result_9_fu_1154_p5, p_Result_16_fu_1286_p5, p_Result_17_fu_1295_p5, p_Result_18_fu_1304_p5)
    begin
        if (not((ap_const_logic_0 = ap_sig_ioackin_s_out_V_V_TREADY))) then
            if ((ap_ST_st45_fsm_44 = ap_CS_fsm)) then 
                s_out_V_V_TDATA <= p_Result_18_fu_1304_p5;
            elsif ((ap_ST_st44_fsm_43 = ap_CS_fsm)) then 
                s_out_V_V_TDATA <= p_Result_17_fu_1295_p5;
            elsif ((ap_ST_st43_fsm_42 = ap_CS_fsm)) then 
                s_out_V_V_TDATA <= p_Result_16_fu_1286_p5;
            elsif ((ap_ST_st42_fsm_41 = ap_CS_fsm)) then 
                s_out_V_V_TDATA <= p_Result_9_fu_1154_p5;
            else 
                s_out_V_V_TDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            s_out_V_V_TDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- s_out_V_V_TVALID assign process. --
    s_out_V_V_TVALID_assign_proc : process(ap_CS_fsm, ap_reg_ioackin_s_out_V_V_TREADY)
    begin
        if ((((ap_ST_st42_fsm_41 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_V_TREADY)) or ((ap_ST_st43_fsm_42 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_V_TREADY)) or ((ap_ST_st44_fsm_43 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_V_TREADY)) or ((ap_ST_st45_fsm_44 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_s_out_V_V_TREADY)))) then 
            s_out_V_V_TVALID <= ap_const_logic_1;
        else 
            s_out_V_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- sourceAddress_ap_vld_in_sig assign process. --
    sourceAddress_ap_vld_in_sig_assign_proc : process(sourceAddress_ap_vld, sourceAddress_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = sourceAddress_ap_vld)) then 
            sourceAddress_ap_vld_in_sig <= sourceAddress_ap_vld;
        else 
            sourceAddress_ap_vld_in_sig <= sourceAddress_ap_vld_preg;
        end if; 
    end process;


    -- sourceAddress_in_sig assign process. --
    sourceAddress_in_sig_assign_proc : process(sourceAddress, sourceAddress_preg, sourceAddress_ap_vld)
    begin
        if ((ap_const_logic_1 = sourceAddress_ap_vld)) then 
            sourceAddress_in_sig <= sourceAddress;
        else 
            sourceAddress_in_sig <= sourceAddress_preg;
        end if; 
    end process;

    storemerge_v_fu_1062_p3 <= 
        aes_data_V_3_reg_315 when (tmp_13_reg_1642(0) = '1') else 
        rhs_V_fu_220;
    tmp_10_fu_1002_p2 <= "1" when (unsigned(t_V_1_reg_325) < unsigned(tmp_1_reg_1609)) else "0";
    tmp_11_fu_766_p2 <= "1" when (mode_in_sig = ap_const_lv32_1) else "0";
    tmp_13_fu_1017_p2 <= "1" when (t_V_1_reg_325 = ap_const_lv128_lc_1) else "0";
    tmp_14_fu_772_p2 <= "1" when (mode_in_sig = ap_const_lv32_2) else "0";
    tmp_1_fu_999_p1 <= std_logic_vector(resize(unsigned(numIterations_reg_1569),128));
    tmp_325_fu_448_p1 <= numBytes_in_sig(4 - 1 downto 0);
    tmp_326_fu_788_p1 <= m_mm2s_ctl_RDATA(2 - 1 downto 0);
    tmp_327_fu_802_p1 <= m_s2mm_ctl_RDATA(2 - 1 downto 0);
    tmp_328_fu_870_p1 <= m_mm2s_ctl_RDATA(12 - 1 downto 0);
    tmp_329_fu_925_p1 <= numIterations_fu_912_p2(28 - 1 downto 0);
    tmp_330_fu_884_p1 <= m_s2mm_ctl_RDATA(12 - 1 downto 0);
    tmp_331_fu_458_p1 <= key_in_V_in_sig(8 - 1 downto 0);
    tmp_332_fu_462_p1 <= iv_V_in_sig(8 - 1 downto 0);
    tmp_3_fu_452_p2 <= "0" when (tmp_325_fu_448_p1 = ap_const_lv4_0) else "1";
    tmp_4_cast_fu_909_p1 <= std_logic_vector(resize(unsigned(tmp_3_reg_1342),29));
    tmp_5_fu_806_p4 <= ((tmp_39_reg_1519 & ap_const_lv1_1) & tmp_326_reg_1524);
    tmp_6_fu_815_p4 <= ((tmp_40_reg_1529 & ap_const_lv1_1) & tmp_327_reg_1534);
    tmp_7_fu_844_p3 <= (tmp_41_reg_1539 & ap_const_lv1_1);
    tmp_8_fu_888_p4 <= ((tmp_42_reg_1549 & ap_const_lv1_1) & tmp_328_reg_1554);
    tmp_9_fu_852_p3 <= (tmp_43_reg_1544 & ap_const_lv1_1);
    tmp_cast_fu_906_p1 <= std_logic_vector(resize(unsigned(tmp_reg_1337),29));
    tmp_s_fu_897_p4 <= ((tmp_44_reg_1559 & ap_const_lv1_1) & tmp_330_reg_1564);
end behav;
