// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="qam_runner,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.227000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module qam_runner (
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        ap_clk,
        ap_rst_n,
        qam_d_i_V,
        qam_d_q_V,
        qam_ph_i_V,
        qam_ph_q_V,
        qam_d_out_i_V,
        qam_d_out_i_V_ap_vld,
        qam_d_out_q_V,
        qam_d_out_q_V_ap_vld,
        qam_ph_out_i_V,
        qam_ph_out_i_V_ap_vld,
        qam_ph_out_q_V,
        qam_ph_out_q_V_ap_vld,
        qam_loop_out_V,
        qam_loop_out_V_ap_vld,
        control_out_qam_V,
        control_out_lf_p,
        control_out_lf_i,
        control_out_lf_out_gain,
        control_out_reg_clr,
        control_out_reg_init_V,
        ap_start_out,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b1;
parameter    ap_ST_st3_fsm_2 = 3'b10;
parameter    ap_ST_st4_fsm_3 = 3'b11;
parameter    ap_ST_st5_fsm_4 = 3'b100;
parameter    ap_ST_st6_fsm_5 = 3'b101;
parameter    ap_ST_st7_fsm_6 = 3'b110;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv28_0 = 28'b0000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 8;
parameter    C_DATA_WIDTH = 32;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv15_7FFF = 15'b111111111111111;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv19_7FFFF = 19'b1111111111111111111;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv3_7 = 3'b111;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv63_0 = 63'b000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv12_433 = 12'b10000110011;
parameter    ap_const_lv11_433 = 11'b10000110011;
parameter    ap_const_lv12_C01 = 12'b110000000001;
parameter    ap_const_lv54_0 = 54'b000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv12_1A = 12'b11010;
parameter    ap_const_lv12_FE6 = 12'b111111100110;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_FFFFFFE9 = 32'b11111111111111111111111111101001;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv23_17 = 23'b10111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv12_D = 12'b1101;
parameter    ap_const_lv12_FF3 = 12'b111111110011;
parameter    ap_const_lv12_36 = 12'b110110;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv12_B = 12'b1011;
parameter    ap_const_lv12_FF5 = 12'b111111110101;
parameter    ap_const_lv12_C = 12'b1100;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv12_1C = 12'b11100;
parameter    ap_const_lv12_2 = 12'b10;
parameter    ap_const_lv12_3 = 12'b11;
parameter    ap_const_lv54_3FFFFFFFFFFFFF = 54'b111111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv8_82 = 8'b10000010;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv8_81 = 8'b10000001;
parameter    ap_const_lv16_FFFF = 16'b1111111111111111;
parameter    ap_const_lv12_FFF = 12'b111111111111;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv28_FFFFFFF = 28'b1111111111111111111111111111;
parameter    ap_const_lv28_7FFFFFF = 28'b111111111111111111111111111;
parameter    ap_const_lv28_8000000 = 28'b1000000000000000000000000000;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter    C_WSTRB_WIDTH = (C_DATA_WIDTH / ap_const_int64_8);

input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   ap_clk;
input   ap_rst_n;
output  [15:0] qam_d_i_V;
output  [15:0] qam_d_q_V;
output  [11:0] qam_ph_i_V;
output  [11:0] qam_ph_q_V;
input  [15:0] qam_d_out_i_V;
input   qam_d_out_i_V_ap_vld;
input  [15:0] qam_d_out_q_V;
input   qam_d_out_q_V_ap_vld;
input  [11:0] qam_ph_out_i_V;
input   qam_ph_out_i_V_ap_vld;
input  [11:0] qam_ph_out_q_V;
input   qam_ph_out_q_V_ap_vld;
input  [27:0] qam_loop_out_V;
input   qam_loop_out_V_ap_vld;
output  [1:0] control_out_qam_V;
output  [7:0] control_out_lf_p;
output  [7:0] control_out_lf_i;
output  [7:0] control_out_lf_out_gain;
output   control_out_reg_clr;
output  [27:0] control_out_reg_init_V;
output   ap_start_out;
output   interrupt;

reg[15:0] qam_d_i_V;
reg[15:0] qam_d_q_V;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
reg   [2:0] ap_CS_fsm = 3'b000;
reg    ap_ready;
wire   [31:0] input_d_i;
reg   [31:0] input_d_i_in_sig;
reg   [31:0] input_d_i_preg = 32'b00000000000000000000000000000000;
wire    input_d_i_ap_vld;
reg    input_d_i_ap_vld_in_sig;
reg    input_d_i_ap_vld_preg = 1'b0;
wire   [31:0] input_d_q;
reg   [31:0] input_d_q_in_sig;
reg   [31:0] input_d_q_preg = 32'b00000000000000000000000000000000;
wire    input_d_q_ap_vld;
reg    input_d_q_ap_vld_in_sig;
reg    input_d_q_ap_vld_preg = 1'b0;
reg   [31:0] output_d_i;
reg   [31:0] output_d_q;
wire   [31:0] input_ph_i;
reg   [31:0] input_ph_i_in_sig;
reg   [31:0] input_ph_i_preg = 32'b00000000000000000000000000000000;
wire    input_ph_i_ap_vld;
reg    input_ph_i_ap_vld_in_sig;
reg    input_ph_i_ap_vld_preg = 1'b0;
wire   [31:0] input_ph_q;
reg   [31:0] input_ph_q_in_sig;
reg   [31:0] input_ph_q_preg = 32'b00000000000000000000000000000000;
wire    input_ph_q_ap_vld;
reg    input_ph_q_ap_vld_in_sig;
reg    input_ph_q_ap_vld_preg = 1'b0;
reg   [31:0] output_ph_i;
reg   [31:0] output_ph_q;
wire   [31:0] loop_out;
reg    loop_out_ap_vld;
wire   [31:0] control_in_qam;
reg   [31:0] control_in_qam_in_sig;
reg   [31:0] control_in_qam_preg = 32'b00000000000000000000000000000000;
wire    control_in_qam_ap_vld;
reg    control_in_qam_ap_vld_in_sig;
reg    control_in_qam_ap_vld_preg = 1'b0;
wire   [7:0] control_in_lf_p;
reg   [7:0] control_in_lf_p_in_sig;
reg   [7:0] control_in_lf_p_preg = 8'b00000000;
wire    control_in_lf_p_ap_vld;
reg    control_in_lf_p_ap_vld_in_sig;
reg    control_in_lf_p_ap_vld_preg = 1'b0;
wire   [7:0] control_in_lf_i;
reg   [7:0] control_in_lf_i_in_sig;
reg   [7:0] control_in_lf_i_preg = 8'b00000000;
wire    control_in_lf_i_ap_vld;
reg    control_in_lf_i_ap_vld_in_sig;
reg    control_in_lf_i_ap_vld_preg = 1'b0;
wire   [7:0] control_in_lf_out_gain;
reg   [7:0] control_in_lf_out_gain_in_sig;
reg   [7:0] control_in_lf_out_gain_preg = 8'b00000000;
wire    control_in_lf_out_gain_ap_vld;
reg    control_in_lf_out_gain_ap_vld_in_sig;
reg    control_in_lf_out_gain_ap_vld_preg = 1'b0;
wire    control_in_reg_clr;
reg    control_in_reg_clr_in_sig;
reg    control_in_reg_clr_preg = 1'b0;
wire    control_in_reg_clr_ap_vld;
reg    control_in_reg_clr_ap_vld_in_sig;
reg    control_in_reg_clr_ap_vld_preg = 1'b0;
wire   [31:0] control_in_reg_init;
reg   [31:0] control_in_reg_init_in_sig;
reg   [31:0] control_in_reg_init_preg = 32'b00000000000000000000000000000000;
wire    control_in_reg_init_ap_vld;
reg    control_in_reg_init_ap_vld_in_sig;
reg    control_in_reg_init_ap_vld_preg = 1'b0;
reg   [11:0] qam_ph_i_V1data_reg = 12'b000000000000;
reg    qam_ph_i_V1vld_reg = 1'b0;
reg    qam_ph_i_V1vld_in;
reg    qam_ph_i_V1ack_in;
reg   [11:0] qam_ph_q_V1data_reg = 12'b000000000000;
reg    qam_ph_q_V1vld_reg = 1'b0;
reg    qam_ph_q_V1vld_in;
reg    qam_ph_q_V1ack_in;
reg   [15:0] qam_d_out_i_V_preg = 16'b0000000000000000;
reg    qam_d_out_i_V_ap_vld_in_sig;
reg    qam_d_out_i_V_ap_vld_preg = 1'b0;
reg   [15:0] qam_d_out_q_V_preg = 16'b0000000000000000;
reg    qam_d_out_q_V_ap_vld_in_sig;
reg    qam_d_out_q_V_ap_vld_preg = 1'b0;
reg   [11:0] qam_ph_out_i_V_preg = 12'b000000000000;
reg    qam_ph_out_i_V_ap_vld_in_sig;
reg    qam_ph_out_i_V_ap_vld_preg = 1'b0;
reg   [11:0] qam_ph_out_q_V_preg = 12'b000000000000;
reg    qam_ph_out_q_V_ap_vld_in_sig;
reg    qam_ph_out_q_V_ap_vld_preg = 1'b0;
reg   [27:0] qam_loop_out_V_preg = 28'b0000000000000000000000000000;
reg    qam_loop_out_V_ap_vld_in_sig;
reg    qam_loop_out_V_ap_vld_preg = 1'b0;
reg   [1:0] control_out_qam_V1data_reg = 2'b00;
reg    control_out_qam_V1vld_reg = 1'b0;
reg    control_out_qam_V1vld_in;
reg    control_out_qam_V1ack_in;
reg   [7:0] control_out_lf_p1data_reg = 8'b00000000;
reg    control_out_lf_p1vld_reg = 1'b0;
reg    control_out_lf_p1vld_in;
reg    control_out_lf_p1ack_in;
reg   [7:0] control_out_lf_i1data_reg = 8'b00000000;
reg    control_out_lf_i1vld_reg = 1'b0;
reg    control_out_lf_i1vld_in;
reg    control_out_lf_i1ack_in;
reg   [7:0] control_out_lf_out_gain1data_reg = 8'b00000000;
reg    control_out_lf_out_gain1vld_reg = 1'b0;
reg    control_out_lf_out_gain1vld_in;
reg    control_out_lf_out_gain1ack_in;
reg    control_out_reg_clr1data_reg = 1'b0;
reg    control_out_reg_clr1vld_reg = 1'b0;
reg    control_out_reg_clr1vld_in;
reg    control_out_reg_clr1ack_in;
reg   [27:0] control_out_reg_init_V1data_reg = 28'b0000000000000000000000000000;
reg    control_out_reg_init_V1vld_reg = 1'b0;
reg    control_out_reg_init_V1vld_in;
reg    control_out_reg_init_V1ack_in;
reg    ap_start_out1data_reg = 1'b0;
wire    ap_start_out1data_in;
reg    ap_start_out1vld_reg = 1'b0;
reg    ap_start_out1vld_in;
reg    ap_start_out1ack_in;
wire   [0:0] ap_return;
reg    ap_sig_bdd_464;
wire   [0:0] control_in_reg_clr_read_read_fu_286_p2;
wire   [0:0] tmp_103_fu_482_p2;
reg   [0:0] tmp_103_reg_3351;
wire   [0:0] isneg_12_fu_488_p3;
reg   [0:0] isneg_12_reg_3356;
wire   [16:0] tmp_V_15_cast_fu_510_p1;
reg   [16:0] tmp_V_15_cast_reg_3362;
reg   [31:0] tmp_104_fu_532_p3;
reg   [31:0] tmp_104_reg_3367;
wire   [7:0] tmp_178_fu_540_p1;
reg   [7:0] tmp_178_reg_3373;
wire   [0:0] tmp_114_fu_544_p2;
reg   [0:0] tmp_114_reg_3378;
wire   [0:0] isneg_13_fu_550_p3;
reg   [0:0] isneg_13_reg_3383;
wire   [16:0] tmp_V_16_cast_fu_572_p1;
reg   [16:0] tmp_V_16_cast_reg_3389;
reg   [31:0] tmp_115_fu_594_p3;
reg   [31:0] tmp_115_reg_3394;
wire   [7:0] tmp_181_fu_602_p1;
reg   [7:0] tmp_181_reg_3400;
wire   [0:0] tmp_127_fu_606_p2;
reg   [0:0] tmp_127_reg_3405;
wire   [0:0] isneg_14_fu_612_p3;
reg   [0:0] isneg_14_reg_3410;
wire   [12:0] tmp_V_17_cast_fu_634_p1;
reg   [12:0] tmp_V_17_cast_reg_3416;
reg   [31:0] tmp_128_fu_656_p3;
reg   [31:0] tmp_128_reg_3421;
wire   [7:0] tmp_184_fu_664_p1;
reg   [7:0] tmp_184_reg_3427;
wire   [0:0] tmp_138_fu_668_p2;
reg   [0:0] tmp_138_reg_3432;
wire   [0:0] isneg_15_fu_674_p3;
reg   [0:0] isneg_15_reg_3437;
wire   [12:0] tmp_V_18_cast_fu_696_p1;
reg   [12:0] tmp_V_18_cast_reg_3443;
reg   [31:0] tmp_139_fu_718_p3;
reg   [31:0] tmp_139_reg_3448;
wire   [7:0] tmp_187_fu_726_p1;
reg   [7:0] tmp_187_reg_3454;
wire   [0:0] tmp_150_fu_730_p2;
reg   [0:0] tmp_150_reg_3459;
wire   [0:0] isneg_16_fu_736_p3;
reg   [0:0] isneg_16_reg_3464;
wire   [28:0] tmp_V_19_cast_fu_758_p1;
reg   [28:0] tmp_V_19_cast_reg_3470;
reg   [31:0] tmp_151_fu_780_p3;
reg   [31:0] tmp_151_reg_3475;
wire   [7:0] tmp_190_fu_788_p1;
reg   [7:0] tmp_190_reg_3481;
reg   [0:0] isneg_reg_3486;
wire   [51:0] tmp_11_fu_822_p1;
reg   [51:0] tmp_11_reg_3492;
wire   [0:0] tmp_6_fu_826_p2;
reg   [0:0] tmp_6_reg_3497;
wire   [11:0] F2_fu_832_p2;
reg   [11:0] F2_reg_3503;
reg   [0:0] isneg_1_reg_3511;
wire   [51:0] tmp_43_fu_868_p1;
reg   [51:0] tmp_43_reg_3517;
wire   [0:0] tmp_16_fu_872_p2;
reg   [0:0] tmp_16_reg_3522;
wire   [11:0] F2_1_fu_878_p2;
reg   [11:0] F2_1_reg_3528;
reg   [0:0] isneg_2_reg_3536;
wire   [51:0] tmp_74_fu_914_p1;
reg   [51:0] tmp_74_reg_3542;
wire   [0:0] tmp_32_fu_918_p2;
reg   [0:0] tmp_32_reg_3547;
wire   [11:0] F2_2_fu_924_p2;
reg   [11:0] F2_2_reg_3553;
reg   [0:0] isneg_3_reg_3561;
wire   [51:0] tmp_99_fu_960_p1;
reg   [51:0] tmp_99_reg_3567;
wire   [0:0] tmp_47_fu_964_p2;
reg   [0:0] tmp_47_reg_3572;
wire   [11:0] F2_3_fu_970_p2;
reg   [11:0] F2_3_reg_3578;
reg   [0:0] isneg_4_reg_3586;
wire   [51:0] tmp_134_fu_1006_p1;
reg   [51:0] tmp_134_reg_3592;
wire   [0:0] tmp_63_fu_1010_p2;
reg   [0:0] tmp_63_reg_3597;
wire   [11:0] F2_4_fu_1016_p2;
reg   [11:0] F2_4_reg_3603;
wire   [0:0] tmp_66_fu_1022_p2;
reg   [0:0] tmp_66_reg_3610;
wire   [0:0] isneg_11_fu_1036_p3;
reg   [0:0] isneg_11_reg_3616;
wire   [53:0] man_V_28_fu_1086_p3;
reg   [53:0] man_V_28_reg_3623;
wire   [0:0] tmp_76_fu_1094_p2;
reg   [0:0] tmp_76_reg_3631;
wire   [11:0] F2_6_fu_1100_p2;
reg   [11:0] F2_6_reg_3639;
wire   [0:0] tmp_78_fu_1106_p2;
reg   [0:0] tmp_78_reg_3646;
wire   [11:0] tmp_79_fu_1112_p2;
reg   [11:0] tmp_79_reg_3652;
wire   [11:0] tmp_80_fu_1118_p2;
reg   [11:0] tmp_80_reg_3657;
wire   [0:0] tmp_81_fu_1124_p2;
reg   [0:0] tmp_81_reg_3662;
wire   [27:0] tmp_170_fu_1130_p1;
reg   [27:0] tmp_170_reg_3668;
wire   [0:0] tmp_89_fu_1134_p2;
reg   [0:0] tmp_89_reg_3674;
wire   [0:0] tmp_105_fu_1145_p2;
reg   [0:0] tmp_105_reg_3680;
wire   [16:0] p_Result_s_fu_1176_p4;
reg   [16:0] p_Result_s_reg_3685;
wire   [22:0] tmp_141_cast_fu_1201_p3;
reg   [22:0] tmp_141_cast_reg_3690;
wire   [0:0] tmp_117_fu_1214_p2;
reg   [0:0] tmp_117_reg_3695;
wire   [16:0] p_Result_8_fu_1245_p4;
reg   [16:0] p_Result_8_reg_3700;
wire   [22:0] tmp_155_cast_fu_1270_p3;
reg   [22:0] tmp_155_cast_reg_3705;
wire   [0:0] tmp_129_fu_1283_p2;
reg   [0:0] tmp_129_reg_3710;
wire   [12:0] p_Result_21_fu_1314_p4;
reg   [12:0] p_Result_21_reg_3715;
wire   [22:0] tmp_169_cast_fu_1339_p3;
reg   [22:0] tmp_169_cast_reg_3720;
wire   [0:0] tmp_140_fu_1352_p2;
reg   [0:0] tmp_140_reg_3725;
wire   [12:0] p_Result_27_fu_1383_p4;
reg   [12:0] p_Result_27_reg_3730;
wire   [22:0] tmp_183_cast_fu_1408_p3;
reg   [22:0] tmp_183_cast_reg_3735;
wire   [0:0] tmp_152_fu_1421_p2;
reg   [0:0] tmp_152_reg_3740;
wire   [22:0] man_V_26_fu_1461_p1;
reg   [22:0] man_V_26_reg_3745;
wire   [22:0] tmp_197_cast_fu_1481_p3;
reg   [22:0] tmp_197_cast_reg_3750;
wire   [15:0] tmp_14_fu_1545_p1;
reg   [15:0] tmp_14_reg_3755;
wire   [0:0] tmp_4_fu_1549_p2;
reg   [0:0] tmp_4_reg_3760;
wire   [15:0] tmp_24_fu_1581_p1;
reg   [15:0] tmp_24_reg_3766;
wire   [15:0] tmp_27_fu_1595_p1;
reg   [15:0] tmp_27_reg_3771;
wire   [0:0] sel_tmp2_fu_1604_p2;
reg   [0:0] sel_tmp2_reg_3776;
wire   [0:0] sel_tmp7_fu_1621_p2;
reg   [0:0] sel_tmp7_reg_3781;
wire   [0:0] sel_tmp3_fu_1639_p2;
reg   [0:0] sel_tmp3_reg_3787;
wire   [15:0] tmp_46_fu_1701_p1;
reg   [15:0] tmp_46_reg_3792;
wire   [0:0] tmp_21_fu_1705_p2;
reg   [0:0] tmp_21_reg_3797;
wire   [15:0] tmp_59_fu_1737_p1;
reg   [15:0] tmp_59_reg_3803;
wire   [15:0] tmp_62_fu_1751_p1;
reg   [15:0] tmp_62_reg_3808;
wire   [0:0] sel_tmp10_fu_1760_p2;
reg   [0:0] sel_tmp10_reg_3813;
wire   [0:0] sel_tmp12_fu_1777_p2;
reg   [0:0] sel_tmp12_reg_3818;
wire   [0:0] sel_tmp15_fu_1795_p2;
reg   [0:0] sel_tmp15_reg_3824;
wire   [11:0] tmp_77_fu_1857_p1;
reg   [11:0] tmp_77_reg_3829;
wire   [0:0] tmp_37_fu_1861_p2;
reg   [0:0] tmp_37_reg_3834;
wire   [11:0] tmp_85_fu_1883_p1;
reg   [11:0] tmp_85_reg_3840;
wire   [11:0] tmp_90_fu_1897_p1;
reg   [11:0] tmp_90_reg_3845;
wire   [0:0] sel_tmp19_fu_1906_p2;
reg   [0:0] sel_tmp19_reg_3850;
wire   [0:0] sel_tmp21_fu_1923_p2;
reg   [0:0] sel_tmp21_reg_3855;
wire   [0:0] sel_tmp24_fu_1941_p2;
reg   [0:0] sel_tmp24_reg_3861;
wire   [11:0] tmp_109_fu_2003_p1;
reg   [11:0] tmp_109_reg_3866;
wire   [0:0] tmp_52_fu_2007_p2;
reg   [0:0] tmp_52_reg_3871;
wire   [11:0] tmp_116_fu_2029_p1;
reg   [11:0] tmp_116_reg_3877;
wire   [11:0] tmp_118_fu_2043_p1;
reg   [11:0] tmp_118_reg_3882;
wire   [0:0] sel_tmp28_fu_2052_p2;
reg   [0:0] sel_tmp28_reg_3887;
wire   [0:0] sel_tmp30_fu_2069_p2;
reg   [0:0] sel_tmp30_reg_3892;
wire   [0:0] sel_tmp33_fu_2087_p2;
reg   [0:0] sel_tmp33_reg_3898;
wire   [1:0] tmp_142_fu_2138_p1;
reg   [1:0] tmp_142_reg_3903;
wire   [0:0] tmp_67_fu_2142_p2;
reg   [0:0] tmp_67_reg_3908;
wire   [1:0] tmp_154_fu_2174_p1;
reg   [1:0] tmp_154_reg_3914;
wire   [1:0] tmp_158_fu_2188_p1;
reg   [1:0] tmp_158_reg_3919;
wire   [0:0] sel_tmp37_fu_2197_p2;
reg   [0:0] sel_tmp37_reg_3924;
wire   [0:0] sel_tmp39_fu_2212_p2;
reg   [0:0] sel_tmp39_reg_3929;
wire   [0:0] sel_tmp42_fu_2230_p2;
reg   [0:0] sel_tmp42_reg_3935;
wire   [27:0] sel_tmp52_fu_2324_p3;
reg   [27:0] sel_tmp52_reg_3940;
wire   [0:0] sel_tmp54_fu_2338_p2;
reg   [0:0] sel_tmp54_reg_3945;
wire   [0:0] tmp_91_fu_2362_p2;
reg   [0:0] tmp_91_reg_3950;
wire   [0:0] rev_fu_2376_p2;
reg   [0:0] rev_reg_3957;
wire   [0:0] Range1_all_ones_1_fu_2401_p2;
reg   [0:0] Range1_all_ones_1_reg_3962;
reg   [0:0] tmp_176_reg_3969;
wire   [0:0] tmp_95_fu_2415_p2;
reg   [0:0] tmp_95_reg_3974;
wire   [0:0] Range2_all_ones_fu_2436_p2;
reg   [0:0] Range2_all_ones_reg_3980;
wire   [0:0] tmp_97_fu_2442_p2;
reg   [0:0] tmp_97_reg_3985;
wire   [0:0] Range1_all_zeros_1_fu_2454_p2;
reg   [0:0] Range1_all_zeros_1_reg_3990;
wire   [0:0] tmp2_fu_2465_p2;
reg   [0:0] tmp2_reg_3995;
wire   [0:0] tmp3_fu_2483_p2;
reg   [0:0] tmp3_reg_4001;
wire   [11:0] newSel11_fu_2927_p3;
wire   [11:0] newSel15_fu_2994_p3;
wire   [1:0] newSel19_fu_3061_p3;
wire   [27:0] p_Val2_6_fu_3077_p3;
reg   [27:0] p_Val2_6_reg_4021;
wire   [0:0] neg_src_fu_3175_p2;
reg   [0:0] neg_src_reg_4028;
wire   [0:0] overflow_fu_3197_p2;
reg   [0:0] overflow_reg_4034;
wire   [0:0] brmerge92_demorgan_i_fu_3203_p2;
reg   [0:0] brmerge92_demorgan_i_reg_4040;
wire   [27:0] tmp_102_fu_3292_p3;
wire   [31:0] p_02_i1_fu_2531_p3;
reg   [31:0] output_d_i_preg = 32'b00000000000000000000000000000000;
wire   [31:0] p_02_i_fu_2581_p3;
reg   [31:0] output_d_q_preg = 32'b00000000000000000000000000000000;
wire   [31:0] p_02_i2_fu_2631_p3;
reg   [31:0] output_ph_i_preg = 32'b00000000000000000000000000000000;
wire   [31:0] p_02_i3_fu_2681_p3;
reg   [31:0] output_ph_q_preg = 32'b00000000000000000000000000000000;
wire   [15:0] newSel3_fu_2793_p3;
reg   [15:0] qam_d_i_V_preg = 16'b0000000000000000;
wire   [15:0] newSel7_fu_2860_p3;
reg   [15:0] qam_d_q_V_preg = 16'b0000000000000000;
wire   [31:0] grp_fu_458_p0;
wire   [31:0] grp_fu_462_p0;
wire   [31:0] grp_fu_466_p0;
wire   [31:0] grp_fu_470_p0;
wire   [31:0] grp_fu_474_p0;
wire   [31:0] grp_fu_478_p0;
wire   [15:0] tmp_V_1_fu_496_p2;
wire   [15:0] tmp_V_fu_502_p3;
reg   [16:0] p_Result_40_fu_514_p4;
wire   [31:0] p_Result_41_fu_524_p3;
wire   [15:0] tmp_V_3_fu_558_p2;
wire   [15:0] tmp_V_2_fu_564_p3;
reg   [16:0] p_Result_44_fu_576_p4;
wire   [31:0] p_Result_45_fu_586_p3;
wire   [11:0] tmp_V_5_fu_620_p2;
wire   [11:0] tmp_V_4_fu_626_p3;
reg   [12:0] p_Result_48_fu_638_p4;
wire   [31:0] p_Result_49_fu_648_p3;
wire   [11:0] tmp_V_7_fu_682_p2;
wire   [11:0] tmp_V_6_fu_688_p3;
reg   [12:0] p_Result_52_fu_700_p4;
wire   [31:0] p_Result_53_fu_710_p3;
wire   [27:0] tmp_V_9_fu_744_p2;
wire   [27:0] tmp_V_8_fu_750_p3;
reg   [28:0] p_Result_56_fu_762_p4;
wire   [31:0] p_Result_57_fu_772_p3;
wire   [63:0] grp_fu_458_p1;
wire   [63:0] ireg_V_fu_792_p1;
wire   [10:0] exp_tmp_V_fu_808_p4;
wire   [62:0] tmp_3_fu_796_p1;
wire   [11:0] tmp_2_fu_818_p1;
wire   [63:0] grp_fu_462_p1;
wire   [63:0] ireg_V_1_fu_838_p1;
wire   [10:0] exp_tmp_V_1_fu_854_p4;
wire   [62:0] tmp_30_fu_842_p1;
wire   [11:0] tmp_13_fu_864_p1;
wire   [63:0] grp_fu_466_p1;
wire   [63:0] ireg_V_2_fu_884_p1;
wire   [10:0] exp_tmp_V_2_fu_900_p4;
wire   [62:0] tmp_69_fu_888_p1;
wire   [11:0] tmp_29_fu_910_p1;
wire   [63:0] grp_fu_470_p1;
wire   [63:0] ireg_V_3_fu_930_p1;
wire   [10:0] exp_tmp_V_3_fu_946_p4;
wire   [62:0] tmp_93_fu_934_p1;
wire   [11:0] tmp_44_fu_956_p1;
wire   [63:0] grp_fu_474_p1;
wire   [63:0] ireg_V_4_fu_976_p1;
wire   [10:0] exp_tmp_V_4_fu_992_p4;
wire   [62:0] tmp_122_fu_980_p1;
wire   [11:0] tmp_60_fu_1002_p1;
wire   [63:0] grp_fu_478_p1;
wire   [63:0] ireg_V_5_fu_1028_p1;
wire   [10:0] exp_tmp_V_5_fu_1044_p4;
wire   [11:0] tmp_73_fu_1054_p1;
wire   [51:0] tmp_169_fu_1064_p1;
wire   [52:0] tmp_75_fu_1068_p3;
wire   [53:0] p_Result_39_fu_1076_p1;
wire   [53:0] man_V_17_fu_1080_p2;
wire   [62:0] tmp_167_fu_1032_p1;
wire   [11:0] exp_V_fu_1058_p2;
wire   [31:0] j_fu_1140_p2;
wire   [0:0] tmp_106_fu_1150_p2;
wire   [31:0] tmp_107_fu_1156_p2;
wire   [31:0] tmp_108_fu_1162_p3;
wire   [31:0] tmp_110_fu_1170_p2;
wire   [22:0] tmp_179_fu_1191_p1;
wire   [0:0] tmp_111_fu_1185_p2;
wire   [22:0] tmp_112_fu_1195_p2;
wire   [31:0] j_1_fu_1209_p2;
wire   [0:0] tmp_119_fu_1219_p2;
wire   [31:0] tmp_120_fu_1225_p2;
wire   [31:0] tmp_121_fu_1231_p3;
wire   [31:0] tmp_123_fu_1239_p2;
wire   [22:0] tmp_182_fu_1260_p1;
wire   [0:0] tmp_124_fu_1254_p2;
wire   [22:0] tmp_125_fu_1264_p2;
wire   [31:0] j_2_fu_1278_p2;
wire   [0:0] tmp_130_fu_1288_p2;
wire   [31:0] tmp_131_fu_1294_p2;
wire   [31:0] tmp_132_fu_1300_p3;
wire   [31:0] tmp_133_fu_1308_p2;
wire   [22:0] tmp_185_fu_1329_p1;
wire   [0:0] tmp_135_fu_1323_p2;
wire   [22:0] tmp_136_fu_1333_p2;
wire   [31:0] j_3_fu_1347_p2;
wire   [0:0] tmp_141_fu_1357_p2;
wire   [31:0] tmp_143_fu_1363_p2;
wire   [31:0] tmp_144_fu_1369_p3;
wire   [31:0] tmp_145_fu_1377_p2;
wire   [22:0] tmp_188_fu_1398_p1;
wire   [0:0] tmp_147_fu_1392_p2;
wire   [22:0] tmp_148_fu_1402_p2;
wire   [31:0] j_4_fu_1416_p2;
wire   [0:0] tmp_153_fu_1426_p2;
wire   [31:0] tmp_155_fu_1432_p2;
wire   [31:0] tmp_156_fu_1438_p3;
wire   [31:0] tmp_157_fu_1446_p2;
wire   [28:0] p_Result_32_fu_1452_p4;
wire   [22:0] tmp_192_fu_1471_p1;
wire   [0:0] tmp_159_fu_1465_p2;
wire   [22:0] tmp_160_fu_1475_p2;
wire   [52:0] tmp_fu_1489_p3;
wire   [53:0] p_Result_34_fu_1496_p1;
wire   [53:0] man_V_1_fu_1500_p2;
wire   [0:0] tmp_8_fu_1513_p2;
wire   [11:0] tmp_9_fu_1518_p2;
wire   [11:0] tmp_s_fu_1523_p2;
wire   [11:0] sh_amt_fu_1528_p3;
wire   [53:0] man_V_2_fu_1506_p3;
wire   [7:0] tmp_22_fu_1555_p4;
wire   [31:0] tmp_7_fu_1571_p0;
wire   [31:0] sh_amt_cast_fu_1536_p1;
wire   [53:0] tmp_7_fu_1571_p1;
wire   [53:0] tmp_5_fu_1575_p2;
wire   [31:0] tmp_12_fu_1589_p0;
wire   [31:0] tmp_12_fu_1589_p1;
wire   [31:0] tmp_12_fu_1589_p2;
wire   [0:0] tmp_1_fu_1540_p2;
wire   [0:0] sel_tmp1_fu_1599_p2;
wire   [0:0] sel_tmp6_demorgan_fu_1610_p2;
wire   [0:0] sel_tmp6_fu_1615_p2;
wire   [0:0] sel_tmp14_demorgan_fu_1627_p2;
wire   [0:0] icmp_fu_1565_p2;
wire   [0:0] sel_tmp_fu_1633_p2;
wire   [52:0] tmp_15_fu_1645_p3;
wire   [53:0] p_Result_35_fu_1652_p1;
wire   [53:0] man_V_4_fu_1656_p2;
wire   [0:0] tmp_17_fu_1669_p2;
wire   [11:0] tmp_18_fu_1674_p2;
wire   [11:0] tmp_19_fu_1679_p2;
wire   [11:0] sh_amt_1_fu_1684_p3;
wire   [53:0] man_V_5_fu_1662_p3;
wire   [7:0] tmp_54_fu_1711_p4;
wire   [31:0] tmp_23_fu_1727_p0;
wire   [31:0] sh_amt_1_cast_fu_1692_p1;
wire   [53:0] tmp_23_fu_1727_p1;
wire   [53:0] tmp_25_fu_1731_p2;
wire   [31:0] tmp_28_fu_1745_p0;
wire   [31:0] tmp_28_fu_1745_p1;
wire   [31:0] tmp_28_fu_1745_p2;
wire   [0:0] tmp_20_fu_1696_p2;
wire   [0:0] sel_tmp9_fu_1755_p2;
wire   [0:0] sel_tmp30_demorgan_fu_1766_p2;
wire   [0:0] sel_tmp11_fu_1771_p2;
wire   [0:0] sel_tmp38_demorgan_fu_1783_p2;
wire   [0:0] icmp1_fu_1721_p2;
wire   [0:0] sel_tmp14_fu_1789_p2;
wire   [52:0] tmp_31_fu_1801_p3;
wire   [53:0] p_Result_36_fu_1808_p1;
wire   [53:0] man_V_7_fu_1812_p2;
wire   [0:0] tmp_33_fu_1825_p2;
wire   [11:0] tmp_34_fu_1830_p2;
wire   [11:0] tmp_35_fu_1835_p2;
wire   [11:0] sh_amt_2_fu_1840_p3;
wire   [53:0] man_V_8_fu_1818_p3;
wire   [31:0] tmp_39_fu_1873_p0;
wire   [31:0] sh_amt_2_cast_fu_1848_p1;
wire   [53:0] tmp_39_fu_1873_p1;
wire   [53:0] tmp_40_fu_1877_p2;
wire   [31:0] tmp_42_fu_1891_p0;
wire   [31:0] tmp_42_fu_1891_p1;
wire   [31:0] tmp_42_fu_1891_p2;
wire   [0:0] tmp_36_fu_1852_p2;
wire   [0:0] sel_tmp18_fu_1901_p2;
wire   [0:0] sel_tmp54_demorgan_fu_1912_p2;
wire   [0:0] sel_tmp20_fu_1917_p2;
wire   [0:0] sel_tmp62_demorgan_fu_1929_p2;
wire   [0:0] tmp_38_fu_1867_p2;
wire   [0:0] sel_tmp23_fu_1935_p2;
wire   [52:0] tmp_45_fu_1947_p3;
wire   [53:0] p_Result_37_fu_1954_p1;
wire   [53:0] man_V_11_fu_1958_p2;
wire   [0:0] tmp_48_fu_1971_p2;
wire   [11:0] tmp_49_fu_1976_p2;
wire   [11:0] tmp_50_fu_1981_p2;
wire   [11:0] sh_amt_3_fu_1986_p3;
wire   [53:0] man_V_12_fu_1964_p3;
wire   [31:0] tmp_55_fu_2019_p0;
wire   [31:0] sh_amt_3_cast_fu_1994_p1;
wire   [53:0] tmp_55_fu_2019_p1;
wire   [53:0] tmp_56_fu_2023_p2;
wire   [31:0] tmp_58_fu_2037_p0;
wire   [31:0] tmp_58_fu_2037_p1;
wire   [31:0] tmp_58_fu_2037_p2;
wire   [0:0] tmp_51_fu_1998_p2;
wire   [0:0] sel_tmp27_fu_2047_p2;
wire   [0:0] sel_tmp78_demorgan_fu_2058_p2;
wire   [0:0] sel_tmp29_fu_2063_p2;
wire   [0:0] sel_tmp86_demorgan_fu_2075_p2;
wire   [0:0] tmp_53_fu_2013_p2;
wire   [0:0] sel_tmp32_fu_2081_p2;
wire   [52:0] tmp_61_fu_2093_p3;
wire   [53:0] p_Result_38_fu_2100_p1;
wire   [53:0] man_V_14_fu_2104_p2;
wire   [0:0] tmp_64_fu_2117_p2;
wire   [11:0] tmp_65_fu_2122_p2;
wire   [11:0] F2_7_fu_2127_p3;
wire   [53:0] man_V_15_fu_2110_p3;
wire   [10:0] tmp_146_fu_2148_p4;
wire   [31:0] tmp_68_fu_2164_p0;
wire   [31:0] F2_7_cast_fu_2134_p1;
wire   [53:0] tmp_68_fu_2164_p1;
wire   [53:0] tmp_70_fu_2168_p2;
wire   [31:0] tmp_71_fu_2178_p1;
wire   [31:0] tmp_72_fu_2182_p1;
wire   [31:0] tmp_72_fu_2182_p2;
wire   [0:0] sel_tmp36_fu_2192_p2;
wire   [0:0] sel_tmp102_demorgan_fu_2202_p2;
wire   [0:0] sel_tmp38_fu_2206_p2;
wire   [0:0] sel_tmp110_demorgan_fu_2218_p2;
wire   [0:0] icmp2_fu_2158_p2;
wire   [0:0] sel_tmp41_fu_2224_p2;
wire   [11:0] sh_amt_5_fu_2236_p3;
wire   [31:0] tmp_84_fu_2257_p0;
wire   [31:0] sh_amt_5_cast_fu_2241_p1;
wire   [53:0] tmp_84_fu_2257_p1;
wire   [53:0] tmp_86_fu_2261_p2;
wire   [31:0] tmp_88_fu_2273_p0;
wire   [31:0] tmp_88_fu_2273_p1;
wire   [31:0] tmp_88_fu_2273_p2;
wire   [0:0] sel_tmp46_fu_2289_p2;
wire   [0:0] sel_tmp47_fu_2294_p2;
wire   [0:0] tmp_82_fu_2245_p2;
wire   [0:0] sel_tmp48_fu_2299_p2;
wire   [27:0] tmp_171_fu_2266_p1;
wire   [27:0] sel_tmp45_fu_2283_p3;
wire   [0:0] sel_tmp50_fu_2313_p2;
wire   [0:0] tmp_83_fu_2251_p2;
wire   [0:0] sel_tmp51_fu_2318_p2;
wire   [27:0] tmp_172_fu_2279_p1;
wire   [27:0] sel_tmp49_fu_2305_p3;
wire   [0:0] sel_tmp53_fu_2332_p2;
wire   [11:0] pos1_fu_2344_p2;
wire   [11:0] pos2_fu_2353_p2;
wire   [0:0] tmp_174_fu_2368_p3;
wire   [31:0] tmp_92_fu_2382_p0;
wire   [53:0] tmp_92_fu_2382_p1;
wire   [53:0] tmp_94_fu_2386_p2;
wire   [0:0] lD_fu_2391_p1;
wire   [0:0] tmp1_fu_2395_p2;
wire   [31:0] tmp_96_fu_2421_p0;
wire   [53:0] tmp_96_fu_2421_p1;
wire   [53:0] Range2_V_1_fu_2425_p2;
wire   [53:0] r_V_fu_2430_p2;
wire   [0:0] sel_tmp55_fu_2459_p2;
wire   [0:0] tmp_100_not_fu_2471_p2;
wire   [0:0] tmp_98_fu_2448_p2;
wire   [0:0] sel_tmp57_fu_2477_p2;
wire   [7:0] p_Repl2_2_trunc_fu_2489_p2;
wire   [22:0] man_V_29_fu_2506_p0;
wire   [22:0] man_V_29_fu_2506_p2;
wire   [31:0] p_Result_42_fu_2494_p4;
wire   [31:0] p_Result_43_fu_2511_p4;
wire   [31:0] res_V_fu_2520_p3;
wire   [31:0] tmp_113_fu_2527_p1;
wire   [7:0] p_Repl2_6_trunc_fu_2539_p2;
wire   [22:0] man_V_30_fu_2556_p0;
wire   [22:0] man_V_30_fu_2556_p2;
wire   [31:0] p_Result_46_fu_2544_p4;
wire   [31:0] p_Result_47_fu_2561_p4;
wire   [31:0] res_V_5_fu_2570_p3;
wire   [31:0] tmp_126_fu_2577_p1;
wire   [7:0] p_Repl2_10_trunc_fu_2589_p2;
wire   [22:0] man_V_31_fu_2606_p0;
wire   [22:0] man_V_31_fu_2606_p2;
wire   [31:0] p_Result_50_fu_2594_p4;
wire   [31:0] p_Result_51_fu_2611_p4;
wire   [31:0] res_V_8_fu_2620_p3;
wire   [31:0] tmp_137_fu_2627_p1;
wire   [7:0] p_Repl2_14_trunc_fu_2639_p2;
wire   [22:0] man_V_32_fu_2656_p0;
wire   [22:0] man_V_32_fu_2656_p2;
wire   [31:0] p_Result_54_fu_2644_p4;
wire   [31:0] p_Result_55_fu_2661_p4;
wire   [31:0] res_V_11_fu_2670_p3;
wire   [31:0] tmp_149_fu_2677_p1;
wire   [7:0] p_Repl2_18_trunc_fu_2689_p2;
wire   [22:0] man_V_33_fu_2703_p2;
wire   [31:0] p_Result_58_fu_2694_p4;
wire   [31:0] p_Result_59_fu_2707_p4;
wire   [31:0] res_V_14_fu_2716_p3;
wire   [31:0] tmp_161_fu_2723_p1;
wire   [0:0] sel_tmp4_fu_2746_p2;
wire   [0:0] sel_tmp5_fu_2751_p2;
wire   [15:0] p_s_fu_2735_p3;
wire   [0:0] sel_tmp8_fu_2742_p2;
wire   [0:0] or_cond_fu_2763_p2;
wire   [15:0] newSel_fu_2756_p3;
wire   [15:0] newSel1_fu_2768_p3;
wire   [0:0] or_cond1_fu_2774_p2;
wire   [0:0] or_cond2_fu_2787_p2;
wire   [15:0] newSel2_fu_2779_p3;
wire   [0:0] sel_tmp16_fu_2813_p2;
wire   [0:0] sel_tmp17_fu_2818_p2;
wire   [15:0] p_1_fu_2802_p3;
wire   [0:0] sel_tmp13_fu_2809_p2;
wire   [0:0] or_cond3_fu_2830_p2;
wire   [15:0] newSel4_fu_2823_p3;
wire   [15:0] newSel5_fu_2835_p3;
wire   [0:0] or_cond4_fu_2841_p2;
wire   [0:0] or_cond5_fu_2854_p2;
wire   [15:0] newSel6_fu_2846_p3;
wire   [0:0] sel_tmp25_fu_2880_p2;
wire   [0:0] sel_tmp26_fu_2885_p2;
wire   [11:0] p_2_fu_2869_p3;
wire   [0:0] sel_tmp22_fu_2876_p2;
wire   [0:0] or_cond6_fu_2897_p2;
wire   [11:0] newSel8_fu_2890_p3;
wire   [11:0] newSel9_fu_2902_p3;
wire   [0:0] or_cond7_fu_2908_p2;
wire   [0:0] or_cond8_fu_2921_p2;
wire   [11:0] newSel10_fu_2913_p3;
wire   [0:0] sel_tmp34_fu_2947_p2;
wire   [0:0] sel_tmp35_fu_2952_p2;
wire   [11:0] p_3_fu_2936_p3;
wire   [0:0] sel_tmp31_fu_2943_p2;
wire   [0:0] or_cond9_fu_2964_p2;
wire   [11:0] newSel12_fu_2957_p3;
wire   [11:0] newSel13_fu_2969_p3;
wire   [0:0] or_cond10_fu_2975_p2;
wire   [0:0] or_cond11_fu_2988_p2;
wire   [11:0] newSel14_fu_2980_p3;
wire   [0:0] sel_tmp43_fu_3014_p2;
wire   [0:0] sel_tmp44_fu_3019_p2;
wire   [1:0] p_4_fu_3003_p3;
wire   [0:0] sel_tmp40_fu_3010_p2;
wire   [0:0] or_cond12_fu_3031_p2;
wire   [1:0] newSel16_fu_3024_p3;
wire   [1:0] newSel17_fu_3036_p3;
wire   [0:0] or_cond13_fu_3042_p2;
wire   [0:0] or_cond14_fu_3055_p2;
wire   [1:0] newSel18_fu_3047_p3;
wire   [27:0] p_5_fu_3070_p3;
wire   [0:0] rev1_fu_3091_p2;
wire   [0:0] or_cond88_i_fu_3096_p2;
wire   [0:0] Range2_all_ones_1_i_fu_3101_p3;
wire   [0:0] Range1_all_zeros_fu_3117_p2;
wire   [0:0] sel_tmp58_fu_3131_p2;
wire   [0:0] sel_tmp56_fu_3127_p2;
wire   [0:0] or_cond89_i_fu_3108_p2;
wire   [0:0] sel_tmp60_fu_3143_p2;
wire   [0:0] p_93_i_fu_3122_p2;
wire   [0:0] sel_tmp59_fu_3135_p3;
wire   [0:0] Range1_all_ones_fu_3112_p2;
wire   [0:0] sel_tmp61_fu_3156_p3;
wire   [0:0] newsignbit_fu_3083_p3;
wire   [0:0] sel_tmp62_fu_3170_p2;
wire   [0:0] deleted_zeros_0_i_fu_3148_p3;
wire   [0:0] deleted_zeros_0_not_i_fu_3180_p2;
wire   [0:0] brmerge_i_fu_3186_p2;
wire   [0:0] tmp_100_fu_3192_p2;
wire   [0:0] deleted_ones_0_i_fu_3162_p3;
wire   [0:0] brmerge92_i_fu_3209_p2;
wire   [0:0] underflow_fu_3214_p2;
wire   [0:0] sign_assign_not_fu_3224_p2;
wire   [0:0] tmp4_fu_3229_p2;
wire   [0:0] brmerge_i_i_fu_3219_p2;
wire   [0:0] tmp_101_fu_3253_p2;
wire   [27:0] p_Val2_s_fu_3246_p3;
wire   [0:0] sel_tmp165_demorgan_fu_3265_p2;
wire   [27:0] sel_tmp63_fu_3258_p3;
wire   [0:0] brmerge_fu_3234_p2;
wire   [0:0] sel_tmp65_fu_3276_p2;
wire   [0:0] tmp5_fu_3281_p2;
wire   [0:0] sel_tmp66_fu_3287_p2;
wire   [27:0] p_Val2_12_mux_fu_3239_p3;
wire   [27:0] sel_tmp64_fu_3269_p3;
reg    grp_fu_458_ce;
reg    grp_fu_462_ce;
reg    grp_fu_466_ce;
reg    grp_fu_470_ce;
reg    grp_fu_474_ce;
reg    grp_fu_478_ce;
reg    ap_sig_bdd_2658;
reg   [2:0] ap_NS_fsm;


qam_runner_AXILiteS_s_axi #(
    .C_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
qam_runner_AXILiteS_s_axi_U(
    .AWVALID( s_axi_AXILiteS_AWVALID ),
    .AWREADY( s_axi_AXILiteS_AWREADY ),
    .AWADDR( s_axi_AXILiteS_AWADDR ),
    .WVALID( s_axi_AXILiteS_WVALID ),
    .WREADY( s_axi_AXILiteS_WREADY ),
    .WDATA( s_axi_AXILiteS_WDATA ),
    .WSTRB( s_axi_AXILiteS_WSTRB ),
    .ARVALID( s_axi_AXILiteS_ARVALID ),
    .ARREADY( s_axi_AXILiteS_ARREADY ),
    .ARADDR( s_axi_AXILiteS_ARADDR ),
    .RVALID( s_axi_AXILiteS_RVALID ),
    .RREADY( s_axi_AXILiteS_RREADY ),
    .RDATA( s_axi_AXILiteS_RDATA ),
    .RRESP( s_axi_AXILiteS_RRESP ),
    .BVALID( s_axi_AXILiteS_BVALID ),
    .BREADY( s_axi_AXILiteS_BREADY ),
    .BRESP( s_axi_AXILiteS_BRESP ),
    .ACLK( ap_clk ),
    .ARESETN( ap_rst_n ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .ap_return( ap_return ),
    .input_d_i( input_d_i ),
    .input_d_i_ap_vld( input_d_i_ap_vld ),
    .input_d_q( input_d_q ),
    .input_d_q_ap_vld( input_d_q_ap_vld ),
    .output_d_i( output_d_i ),
    .output_d_q( output_d_q ),
    .input_ph_i( input_ph_i ),
    .input_ph_i_ap_vld( input_ph_i_ap_vld ),
    .input_ph_q( input_ph_q ),
    .input_ph_q_ap_vld( input_ph_q_ap_vld ),
    .output_ph_i( output_ph_i ),
    .output_ph_q( output_ph_q ),
    .loop_out( loop_out ),
    .loop_out_ap_vld( loop_out_ap_vld ),
    .control_in_qam( control_in_qam ),
    .control_in_qam_ap_vld( control_in_qam_ap_vld ),
    .control_in_lf_p( control_in_lf_p ),
    .control_in_lf_p_ap_vld( control_in_lf_p_ap_vld ),
    .control_in_lf_i( control_in_lf_i ),
    .control_in_lf_i_ap_vld( control_in_lf_i_ap_vld ),
    .control_in_lf_out_gain( control_in_lf_out_gain ),
    .control_in_lf_out_gain_ap_vld( control_in_lf_out_gain_ap_vld ),
    .control_in_reg_clr( control_in_reg_clr ),
    .control_in_reg_clr_ap_vld( control_in_reg_clr_ap_vld ),
    .control_in_reg_init( control_in_reg_init ),
    .control_in_reg_init_ap_vld( control_in_reg_init_ap_vld )
);

qam_runner_fpext_32ns_64_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
qam_runner_fpext_32ns_64_3_U1(
    .clk( ap_clk ),
    .reset( ap_rst_n ),
    .din0( grp_fu_458_p0 ),
    .ce( grp_fu_458_ce ),
    .dout( grp_fu_458_p1 )
);

qam_runner_fpext_32ns_64_3 #(
    .ID( 2 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
qam_runner_fpext_32ns_64_3_U2(
    .clk( ap_clk ),
    .reset( ap_rst_n ),
    .din0( grp_fu_462_p0 ),
    .ce( grp_fu_462_ce ),
    .dout( grp_fu_462_p1 )
);

qam_runner_fpext_32ns_64_3 #(
    .ID( 3 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
qam_runner_fpext_32ns_64_3_U3(
    .clk( ap_clk ),
    .reset( ap_rst_n ),
    .din0( grp_fu_466_p0 ),
    .ce( grp_fu_466_ce ),
    .dout( grp_fu_466_p1 )
);

qam_runner_fpext_32ns_64_3 #(
    .ID( 4 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
qam_runner_fpext_32ns_64_3_U4(
    .clk( ap_clk ),
    .reset( ap_rst_n ),
    .din0( grp_fu_470_p0 ),
    .ce( grp_fu_470_ce ),
    .dout( grp_fu_470_p1 )
);

qam_runner_fpext_32ns_64_3 #(
    .ID( 5 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
qam_runner_fpext_32ns_64_3_U5(
    .clk( ap_clk ),
    .reset( ap_rst_n ),
    .din0( grp_fu_474_p0 ),
    .ce( grp_fu_474_ce ),
    .dout( grp_fu_474_p1 )
);

qam_runner_fpext_32ns_64_3 #(
    .ID( 6 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
qam_runner_fpext_32ns_64_3_U6(
    .clk( ap_clk ),
    .reset( ap_rst_n ),
    .din0( grp_fu_478_p0 ),
    .ce( grp_fu_478_ce ),
    .dout( grp_fu_478_p1 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_start_out1data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_start_out1data_reg
    if (ap_rst_n == 1'b0) begin
        ap_start_out1data_reg <= ap_const_logic_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == ap_start_out1vld_in) & (ap_const_logic_0 == ap_start_out1vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == ap_start_out1vld_in) & (ap_const_logic_1 == ap_start_out1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
            ap_start_out1data_reg <= ap_start_out1data_in;
        end
    end
end

/// control_in_lf_i_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_in_lf_i_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        control_in_lf_i_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
            control_in_lf_i_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == control_in_lf_i_ap_vld))) begin
            control_in_lf_i_ap_vld_preg <= control_in_lf_i_ap_vld;
        end
    end
end

/// control_in_lf_i_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_in_lf_i_preg
    if (ap_rst_n == 1'b0) begin
        control_in_lf_i_preg <= ap_const_lv8_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == control_in_lf_i_ap_vld))) begin
            control_in_lf_i_preg <= control_in_lf_i;
        end
    end
end

/// control_in_lf_out_gain_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_in_lf_out_gain_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        control_in_lf_out_gain_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
            control_in_lf_out_gain_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == control_in_lf_out_gain_ap_vld))) begin
            control_in_lf_out_gain_ap_vld_preg <= control_in_lf_out_gain_ap_vld;
        end
    end
end

/// control_in_lf_out_gain_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_in_lf_out_gain_preg
    if (ap_rst_n == 1'b0) begin
        control_in_lf_out_gain_preg <= ap_const_lv8_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == control_in_lf_out_gain_ap_vld))) begin
            control_in_lf_out_gain_preg <= control_in_lf_out_gain;
        end
    end
end

/// control_in_lf_p_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_in_lf_p_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        control_in_lf_p_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
            control_in_lf_p_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == control_in_lf_p_ap_vld))) begin
            control_in_lf_p_ap_vld_preg <= control_in_lf_p_ap_vld;
        end
    end
end

/// control_in_lf_p_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_in_lf_p_preg
    if (ap_rst_n == 1'b0) begin
        control_in_lf_p_preg <= ap_const_lv8_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == control_in_lf_p_ap_vld))) begin
            control_in_lf_p_preg <= control_in_lf_p;
        end
    end
end

/// control_in_qam_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_in_qam_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        control_in_qam_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
            control_in_qam_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == control_in_qam_ap_vld))) begin
            control_in_qam_ap_vld_preg <= control_in_qam_ap_vld;
        end
    end
end

/// control_in_qam_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_in_qam_preg
    if (ap_rst_n == 1'b0) begin
        control_in_qam_preg <= ap_const_lv32_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == control_in_qam_ap_vld))) begin
            control_in_qam_preg <= control_in_qam;
        end
    end
end

/// control_in_reg_clr_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_in_reg_clr_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        control_in_reg_clr_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
            control_in_reg_clr_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == control_in_reg_clr_ap_vld))) begin
            control_in_reg_clr_ap_vld_preg <= control_in_reg_clr_ap_vld;
        end
    end
end

/// control_in_reg_clr_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_in_reg_clr_preg
    if (ap_rst_n == 1'b0) begin
        control_in_reg_clr_preg <= ap_const_logic_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == control_in_reg_clr_ap_vld))) begin
            control_in_reg_clr_preg <= control_in_reg_clr;
        end
    end
end

/// control_in_reg_init_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_in_reg_init_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        control_in_reg_init_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
            control_in_reg_init_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == control_in_reg_init_ap_vld))) begin
            control_in_reg_init_ap_vld_preg <= control_in_reg_init_ap_vld;
        end
    end
end

/// control_in_reg_init_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_in_reg_init_preg
    if (ap_rst_n == 1'b0) begin
        control_in_reg_init_preg <= ap_const_lv32_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == control_in_reg_init_ap_vld))) begin
            control_in_reg_init_preg <= control_in_reg_init;
        end
    end
end

/// control_out_lf_i1data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_out_lf_i1data_reg
    if (ap_rst_n == 1'b0) begin
        control_out_lf_i1data_reg <= ap_const_lv8_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == control_out_lf_i1vld_in) & (ap_const_logic_0 == control_out_lf_i1vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == control_out_lf_i1vld_in) & (ap_const_logic_1 == control_out_lf_i1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
            control_out_lf_i1data_reg <= control_in_lf_i_in_sig;
        end
    end
end

/// control_out_lf_out_gain1data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_out_lf_out_gain1data_reg
    if (ap_rst_n == 1'b0) begin
        control_out_lf_out_gain1data_reg <= ap_const_lv8_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == control_out_lf_out_gain1vld_in) & (ap_const_logic_0 == control_out_lf_out_gain1vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == control_out_lf_out_gain1vld_in) & (ap_const_logic_1 == control_out_lf_out_gain1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
            control_out_lf_out_gain1data_reg <= control_in_lf_out_gain_in_sig;
        end
    end
end

/// control_out_lf_p1data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_out_lf_p1data_reg
    if (ap_rst_n == 1'b0) begin
        control_out_lf_p1data_reg <= ap_const_lv8_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == control_out_lf_p1vld_in) & (ap_const_logic_0 == control_out_lf_p1vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == control_out_lf_p1vld_in) & (ap_const_logic_1 == control_out_lf_p1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
            control_out_lf_p1data_reg <= control_in_lf_p_in_sig;
        end
    end
end

/// control_out_qam_V1data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_out_qam_V1data_reg
    if (ap_rst_n == 1'b0) begin
        control_out_qam_V1data_reg <= ap_const_lv2_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == control_out_qam_V1vld_in) & (ap_const_logic_0 == control_out_qam_V1vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == control_out_qam_V1vld_in) & (ap_const_logic_1 == control_out_qam_V1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
            control_out_qam_V1data_reg <= newSel19_fu_3061_p3;
        end
    end
end

/// control_out_reg_clr1data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_out_reg_clr1data_reg
    if (ap_rst_n == 1'b0) begin
        control_out_reg_clr1data_reg <= ap_const_logic_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == control_out_reg_clr1vld_in) & (ap_const_logic_0 == control_out_reg_clr1vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == control_out_reg_clr1vld_in) & (ap_const_logic_1 == control_out_reg_clr1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
            control_out_reg_clr1data_reg <= control_in_reg_clr_read_read_fu_286_p2;
        end
    end
end

/// control_out_reg_init_V1data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_control_out_reg_init_V1data_reg
    if (ap_rst_n == 1'b0) begin
        control_out_reg_init_V1data_reg <= ap_const_lv28_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == control_out_reg_init_V1vld_in) & (ap_const_logic_0 == control_out_reg_init_V1vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == control_out_reg_init_V1vld_in) & (ap_const_logic_1 == control_out_reg_init_V1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
            control_out_reg_init_V1data_reg <= tmp_102_fu_3292_p3;
        end
    end
end

/// input_d_i_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_input_d_i_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        input_d_i_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
            input_d_i_ap_vld_preg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == input_d_i_ap_vld) & ~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)))) begin
            input_d_i_ap_vld_preg <= input_d_i_ap_vld;
        end
    end
end

/// input_d_i_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_input_d_i_preg
    if (ap_rst_n == 1'b0) begin
        input_d_i_preg <= ap_const_lv32_0;
    end else begin
        if (((ap_const_logic_1 == input_d_i_ap_vld) & ~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)))) begin
            input_d_i_preg <= input_d_i;
        end
    end
end

/// input_d_q_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_input_d_q_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        input_d_q_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
            input_d_q_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == input_d_q_ap_vld))) begin
            input_d_q_ap_vld_preg <= input_d_q_ap_vld;
        end
    end
end

/// input_d_q_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_input_d_q_preg
    if (ap_rst_n == 1'b0) begin
        input_d_q_preg <= ap_const_lv32_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == input_d_q_ap_vld))) begin
            input_d_q_preg <= input_d_q;
        end
    end
end

/// input_ph_i_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_input_ph_i_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        input_ph_i_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
            input_ph_i_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == input_ph_i_ap_vld))) begin
            input_ph_i_ap_vld_preg <= input_ph_i_ap_vld;
        end
    end
end

/// input_ph_i_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_input_ph_i_preg
    if (ap_rst_n == 1'b0) begin
        input_ph_i_preg <= ap_const_lv32_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == input_ph_i_ap_vld))) begin
            input_ph_i_preg <= input_ph_i;
        end
    end
end

/// input_ph_q_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_input_ph_q_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        input_ph_q_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
            input_ph_q_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == input_ph_q_ap_vld))) begin
            input_ph_q_ap_vld_preg <= input_ph_q_ap_vld;
        end
    end
end

/// input_ph_q_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_input_ph_q_preg
    if (ap_rst_n == 1'b0) begin
        input_ph_q_preg <= ap_const_lv32_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == input_ph_q_ap_vld))) begin
            input_ph_q_preg <= input_ph_q;
        end
    end
end

/// output_d_i_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_output_d_i_preg
    if (ap_rst_n == 1'b0) begin
        output_d_i_preg <= ap_const_lv32_0;
    end else begin
        if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
            output_d_i_preg <= p_02_i1_fu_2531_p3;
        end
    end
end

/// output_d_q_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_output_d_q_preg
    if (ap_rst_n == 1'b0) begin
        output_d_q_preg <= ap_const_lv32_0;
    end else begin
        if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
            output_d_q_preg <= p_02_i_fu_2581_p3;
        end
    end
end

/// output_ph_i_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_output_ph_i_preg
    if (ap_rst_n == 1'b0) begin
        output_ph_i_preg <= ap_const_lv32_0;
    end else begin
        if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
            output_ph_i_preg <= p_02_i2_fu_2631_p3;
        end
    end
end

/// output_ph_q_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_output_ph_q_preg
    if (ap_rst_n == 1'b0) begin
        output_ph_q_preg <= ap_const_lv32_0;
    end else begin
        if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
            output_ph_q_preg <= p_02_i3_fu_2681_p3;
        end
    end
end

/// qam_d_i_V_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_qam_d_i_V_preg
    if (ap_rst_n == 1'b0) begin
        qam_d_i_V_preg <= ap_const_lv16_0;
    end else begin
        if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
            qam_d_i_V_preg <= newSel3_fu_2793_p3;
        end
    end
end

/// qam_d_out_i_V_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_qam_d_out_i_V_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        qam_d_out_i_V_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
            qam_d_out_i_V_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == qam_d_out_i_V_ap_vld))) begin
            qam_d_out_i_V_ap_vld_preg <= qam_d_out_i_V_ap_vld;
        end
    end
end

/// qam_d_out_i_V_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_qam_d_out_i_V_preg
    if (ap_rst_n == 1'b0) begin
        qam_d_out_i_V_preg <= ap_const_lv16_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == qam_d_out_i_V_ap_vld))) begin
            qam_d_out_i_V_preg <= qam_d_out_i_V;
        end
    end
end

/// qam_d_out_q_V_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_qam_d_out_q_V_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        qam_d_out_q_V_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
            qam_d_out_q_V_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == qam_d_out_q_V_ap_vld))) begin
            qam_d_out_q_V_ap_vld_preg <= qam_d_out_q_V_ap_vld;
        end
    end
end

/// qam_d_out_q_V_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_qam_d_out_q_V_preg
    if (ap_rst_n == 1'b0) begin
        qam_d_out_q_V_preg <= ap_const_lv16_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == qam_d_out_q_V_ap_vld))) begin
            qam_d_out_q_V_preg <= qam_d_out_q_V;
        end
    end
end

/// qam_d_q_V_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_qam_d_q_V_preg
    if (ap_rst_n == 1'b0) begin
        qam_d_q_V_preg <= ap_const_lv16_0;
    end else begin
        if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
            qam_d_q_V_preg <= newSel7_fu_2860_p3;
        end
    end
end

/// qam_loop_out_V_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_qam_loop_out_V_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        qam_loop_out_V_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
            qam_loop_out_V_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == qam_loop_out_V_ap_vld))) begin
            qam_loop_out_V_ap_vld_preg <= qam_loop_out_V_ap_vld;
        end
    end
end

/// qam_loop_out_V_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_qam_loop_out_V_preg
    if (ap_rst_n == 1'b0) begin
        qam_loop_out_V_preg <= ap_const_lv28_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == qam_loop_out_V_ap_vld))) begin
            qam_loop_out_V_preg <= qam_loop_out_V;
        end
    end
end

/// qam_ph_i_V1data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_qam_ph_i_V1data_reg
    if (ap_rst_n == 1'b0) begin
        qam_ph_i_V1data_reg <= ap_const_lv12_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == qam_ph_i_V1vld_in) & (ap_const_logic_0 == qam_ph_i_V1vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == qam_ph_i_V1vld_in) & (ap_const_logic_1 == qam_ph_i_V1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
            qam_ph_i_V1data_reg <= newSel11_fu_2927_p3;
        end
    end
end

/// qam_ph_out_i_V_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_qam_ph_out_i_V_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        qam_ph_out_i_V_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
            qam_ph_out_i_V_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == qam_ph_out_i_V_ap_vld))) begin
            qam_ph_out_i_V_ap_vld_preg <= qam_ph_out_i_V_ap_vld;
        end
    end
end

/// qam_ph_out_i_V_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_qam_ph_out_i_V_preg
    if (ap_rst_n == 1'b0) begin
        qam_ph_out_i_V_preg <= ap_const_lv12_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == qam_ph_out_i_V_ap_vld))) begin
            qam_ph_out_i_V_preg <= qam_ph_out_i_V;
        end
    end
end

/// qam_ph_out_q_V_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_qam_ph_out_q_V_ap_vld_preg
    if (ap_rst_n == 1'b0) begin
        qam_ph_out_q_V_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
            qam_ph_out_q_V_ap_vld_preg <= ap_const_logic_0;
        end else if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == qam_ph_out_q_V_ap_vld))) begin
            qam_ph_out_q_V_ap_vld_preg <= qam_ph_out_q_V_ap_vld;
        end
    end
end

/// qam_ph_out_q_V_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_qam_ph_out_q_V_preg
    if (ap_rst_n == 1'b0) begin
        qam_ph_out_q_V_preg <= ap_const_lv12_0;
    end else begin
        if ((~((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_start)) & (ap_const_logic_1 == qam_ph_out_q_V_ap_vld))) begin
            qam_ph_out_q_V_preg <= qam_ph_out_q_V;
        end
    end
end

/// qam_ph_q_V1data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_qam_ph_q_V1data_reg
    if (ap_rst_n == 1'b0) begin
        qam_ph_q_V1data_reg <= ap_const_lv12_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == qam_ph_q_V1vld_in) & (ap_const_logic_0 == qam_ph_q_V1vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == qam_ph_q_V1vld_in) & (ap_const_logic_1 == qam_ph_q_V1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
            qam_ph_q_V1data_reg <= newSel15_fu_2994_p3;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        F2_1_reg_3528 <= F2_1_fu_878_p2;
        F2_2_reg_3553 <= F2_2_fu_924_p2;
        F2_3_reg_3578 <= F2_3_fu_970_p2;
        F2_4_reg_3603 <= F2_4_fu_1016_p2;
        F2_6_reg_3639 <= F2_6_fu_1100_p2;
        F2_reg_3503 <= F2_fu_832_p2;
        isneg_11_reg_3616 <= ireg_V_5_fu_1028_p1[ap_const_lv32_3F];
        isneg_1_reg_3511 <= ireg_V_1_fu_838_p1[ap_const_lv32_3F];
        isneg_2_reg_3536 <= ireg_V_2_fu_884_p1[ap_const_lv32_3F];
        isneg_3_reg_3561 <= ireg_V_3_fu_930_p1[ap_const_lv32_3F];
        isneg_4_reg_3586 <= ireg_V_4_fu_976_p1[ap_const_lv32_3F];
        isneg_reg_3486 <= ireg_V_fu_792_p1[ap_const_lv32_3F];
        man_V_28_reg_3623 <= man_V_28_fu_1086_p3;
        tmp_11_reg_3492 <= tmp_11_fu_822_p1;
        tmp_134_reg_3592 <= tmp_134_fu_1006_p1;
        tmp_16_reg_3522 <= tmp_16_fu_872_p2;
        tmp_170_reg_3668 <= tmp_170_fu_1130_p1;
        tmp_32_reg_3547 <= tmp_32_fu_918_p2;
        tmp_43_reg_3517 <= tmp_43_fu_868_p1;
        tmp_47_reg_3572 <= tmp_47_fu_964_p2;
        tmp_63_reg_3597 <= tmp_63_fu_1010_p2;
        tmp_66_reg_3610 <= tmp_66_fu_1022_p2;
        tmp_6_reg_3497 <= tmp_6_fu_826_p2;
        tmp_74_reg_3542 <= tmp_74_fu_914_p1;
        tmp_76_reg_3631 <= tmp_76_fu_1094_p2;
        tmp_78_reg_3646 <= tmp_78_fu_1106_p2;
        tmp_79_reg_3652 <= tmp_79_fu_1112_p2;
        tmp_80_reg_3657 <= tmp_80_fu_1118_p2;
        tmp_81_reg_3662 <= tmp_81_fu_1124_p2;
        tmp_89_reg_3674 <= tmp_89_fu_1134_p2;
        tmp_99_reg_3567 <= tmp_99_fu_960_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        Range1_all_ones_1_reg_3962 <= Range1_all_ones_1_fu_2401_p2;
        Range1_all_zeros_1_reg_3990 <= Range1_all_zeros_1_fu_2454_p2;
        Range2_all_ones_reg_3980 <= Range2_all_ones_fu_2436_p2;
        rev_reg_3957 <= rev_fu_2376_p2;
        sel_tmp10_reg_3813 <= sel_tmp10_fu_1760_p2;
        sel_tmp12_reg_3818 <= sel_tmp12_fu_1777_p2;
        sel_tmp15_reg_3824 <= sel_tmp15_fu_1795_p2;
        sel_tmp19_reg_3850 <= sel_tmp19_fu_1906_p2;
        sel_tmp21_reg_3855 <= sel_tmp21_fu_1923_p2;
        sel_tmp24_reg_3861 <= sel_tmp24_fu_1941_p2;
        sel_tmp28_reg_3887 <= sel_tmp28_fu_2052_p2;
        sel_tmp2_reg_3776 <= sel_tmp2_fu_1604_p2;
        sel_tmp30_reg_3892 <= sel_tmp30_fu_2069_p2;
        sel_tmp33_reg_3898 <= sel_tmp33_fu_2087_p2;
        sel_tmp37_reg_3924 <= sel_tmp37_fu_2197_p2;
        sel_tmp39_reg_3929 <= sel_tmp39_fu_2212_p2;
        sel_tmp3_reg_3787 <= sel_tmp3_fu_1639_p2;
        sel_tmp42_reg_3935 <= sel_tmp42_fu_2230_p2;
        sel_tmp52_reg_3940 <= sel_tmp52_fu_2324_p3;
        sel_tmp54_reg_3945 <= sel_tmp54_fu_2338_p2;
        sel_tmp7_reg_3781 <= sel_tmp7_fu_1621_p2;
        tmp2_reg_3995 <= tmp2_fu_2465_p2;
        tmp3_reg_4001 <= tmp3_fu_2483_p2;
        tmp_109_reg_3866 <= tmp_109_fu_2003_p1;
        tmp_116_reg_3877 <= tmp_116_fu_2029_p1;
        tmp_118_reg_3882 <= tmp_118_fu_2043_p1;
        tmp_142_reg_3903 <= tmp_142_fu_2138_p1;
        tmp_14_reg_3755 <= tmp_14_fu_1545_p1;
        tmp_154_reg_3914 <= tmp_154_fu_2174_p1;
        tmp_158_reg_3919 <= tmp_158_fu_2188_p1;
        tmp_176_reg_3969 <= pos2_fu_2353_p2[ap_const_lv32_B];
        tmp_21_reg_3797 <= tmp_21_fu_1705_p2;
        tmp_24_reg_3766 <= tmp_24_fu_1581_p1;
        tmp_27_reg_3771 <= tmp_27_fu_1595_p1;
        tmp_37_reg_3834 <= tmp_37_fu_1861_p2;
        tmp_46_reg_3792 <= tmp_46_fu_1701_p1;
        tmp_4_reg_3760 <= tmp_4_fu_1549_p2;
        tmp_52_reg_3871 <= tmp_52_fu_2007_p2;
        tmp_59_reg_3803 <= tmp_59_fu_1737_p1;
        tmp_62_reg_3808 <= tmp_62_fu_1751_p1;
        tmp_67_reg_3908 <= tmp_67_fu_2142_p2;
        tmp_77_reg_3829 <= tmp_77_fu_1857_p1;
        tmp_85_reg_3840 <= tmp_85_fu_1883_p1;
        tmp_90_reg_3845 <= tmp_90_fu_1897_p1;
        tmp_91_reg_3950 <= tmp_91_fu_2362_p2;
        tmp_95_reg_3974 <= tmp_95_fu_2415_p2;
        tmp_97_reg_3985 <= tmp_97_fu_2442_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        brmerge92_demorgan_i_reg_4040 <= brmerge92_demorgan_i_fu_3203_p2;
        neg_src_reg_4028 <= neg_src_fu_3175_p2;
        overflow_reg_4034 <= overflow_fu_3197_p2;
        p_Val2_6_reg_4021 <= p_Val2_6_fu_3077_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        isneg_12_reg_3356 <= qam_d_out_i_V_preg[ap_const_lv32_F];
        isneg_13_reg_3383 <= qam_d_out_q_V_preg[ap_const_lv32_F];
        isneg_14_reg_3410 <= qam_ph_out_i_V_preg[ap_const_lv32_B];
        isneg_15_reg_3437 <= qam_ph_out_q_V_preg[ap_const_lv32_B];
        isneg_16_reg_3464 <= qam_loop_out_V_preg[ap_const_lv32_1B];
        tmp_103_reg_3351 <= tmp_103_fu_482_p2;
        tmp_104_reg_3367 <= tmp_104_fu_532_p3;
        tmp_114_reg_3378 <= tmp_114_fu_544_p2;
        tmp_115_reg_3394 <= tmp_115_fu_594_p3;
        tmp_127_reg_3405 <= tmp_127_fu_606_p2;
        tmp_128_reg_3421 <= tmp_128_fu_656_p3;
        tmp_138_reg_3432 <= tmp_138_fu_668_p2;
        tmp_139_reg_3448 <= tmp_139_fu_718_p3;
        tmp_150_reg_3459 <= tmp_150_fu_730_p2;
        tmp_151_reg_3475 <= tmp_151_fu_780_p3;
        tmp_178_reg_3373 <= tmp_178_fu_540_p1;
        tmp_181_reg_3400 <= tmp_181_fu_602_p1;
        tmp_184_reg_3427 <= tmp_184_fu_664_p1;
        tmp_187_reg_3454 <= tmp_187_fu_726_p1;
        tmp_190_reg_3481 <= tmp_190_fu_788_p1;
        tmp_V_15_cast_reg_3362[0] <= tmp_V_15_cast_fu_510_p1[0];
tmp_V_15_cast_reg_3362[1] <= tmp_V_15_cast_fu_510_p1[1];
tmp_V_15_cast_reg_3362[2] <= tmp_V_15_cast_fu_510_p1[2];
tmp_V_15_cast_reg_3362[3] <= tmp_V_15_cast_fu_510_p1[3];
tmp_V_15_cast_reg_3362[4] <= tmp_V_15_cast_fu_510_p1[4];
tmp_V_15_cast_reg_3362[5] <= tmp_V_15_cast_fu_510_p1[5];
tmp_V_15_cast_reg_3362[6] <= tmp_V_15_cast_fu_510_p1[6];
tmp_V_15_cast_reg_3362[7] <= tmp_V_15_cast_fu_510_p1[7];
tmp_V_15_cast_reg_3362[8] <= tmp_V_15_cast_fu_510_p1[8];
tmp_V_15_cast_reg_3362[9] <= tmp_V_15_cast_fu_510_p1[9];
tmp_V_15_cast_reg_3362[10] <= tmp_V_15_cast_fu_510_p1[10];
tmp_V_15_cast_reg_3362[11] <= tmp_V_15_cast_fu_510_p1[11];
tmp_V_15_cast_reg_3362[12] <= tmp_V_15_cast_fu_510_p1[12];
tmp_V_15_cast_reg_3362[13] <= tmp_V_15_cast_fu_510_p1[13];
tmp_V_15_cast_reg_3362[14] <= tmp_V_15_cast_fu_510_p1[14];
tmp_V_15_cast_reg_3362[15] <= tmp_V_15_cast_fu_510_p1[15];
        tmp_V_16_cast_reg_3389[0] <= tmp_V_16_cast_fu_572_p1[0];
tmp_V_16_cast_reg_3389[1] <= tmp_V_16_cast_fu_572_p1[1];
tmp_V_16_cast_reg_3389[2] <= tmp_V_16_cast_fu_572_p1[2];
tmp_V_16_cast_reg_3389[3] <= tmp_V_16_cast_fu_572_p1[3];
tmp_V_16_cast_reg_3389[4] <= tmp_V_16_cast_fu_572_p1[4];
tmp_V_16_cast_reg_3389[5] <= tmp_V_16_cast_fu_572_p1[5];
tmp_V_16_cast_reg_3389[6] <= tmp_V_16_cast_fu_572_p1[6];
tmp_V_16_cast_reg_3389[7] <= tmp_V_16_cast_fu_572_p1[7];
tmp_V_16_cast_reg_3389[8] <= tmp_V_16_cast_fu_572_p1[8];
tmp_V_16_cast_reg_3389[9] <= tmp_V_16_cast_fu_572_p1[9];
tmp_V_16_cast_reg_3389[10] <= tmp_V_16_cast_fu_572_p1[10];
tmp_V_16_cast_reg_3389[11] <= tmp_V_16_cast_fu_572_p1[11];
tmp_V_16_cast_reg_3389[12] <= tmp_V_16_cast_fu_572_p1[12];
tmp_V_16_cast_reg_3389[13] <= tmp_V_16_cast_fu_572_p1[13];
tmp_V_16_cast_reg_3389[14] <= tmp_V_16_cast_fu_572_p1[14];
tmp_V_16_cast_reg_3389[15] <= tmp_V_16_cast_fu_572_p1[15];
        tmp_V_17_cast_reg_3416[0] <= tmp_V_17_cast_fu_634_p1[0];
tmp_V_17_cast_reg_3416[1] <= tmp_V_17_cast_fu_634_p1[1];
tmp_V_17_cast_reg_3416[2] <= tmp_V_17_cast_fu_634_p1[2];
tmp_V_17_cast_reg_3416[3] <= tmp_V_17_cast_fu_634_p1[3];
tmp_V_17_cast_reg_3416[4] <= tmp_V_17_cast_fu_634_p1[4];
tmp_V_17_cast_reg_3416[5] <= tmp_V_17_cast_fu_634_p1[5];
tmp_V_17_cast_reg_3416[6] <= tmp_V_17_cast_fu_634_p1[6];
tmp_V_17_cast_reg_3416[7] <= tmp_V_17_cast_fu_634_p1[7];
tmp_V_17_cast_reg_3416[8] <= tmp_V_17_cast_fu_634_p1[8];
tmp_V_17_cast_reg_3416[9] <= tmp_V_17_cast_fu_634_p1[9];
tmp_V_17_cast_reg_3416[10] <= tmp_V_17_cast_fu_634_p1[10];
tmp_V_17_cast_reg_3416[11] <= tmp_V_17_cast_fu_634_p1[11];
        tmp_V_18_cast_reg_3443[0] <= tmp_V_18_cast_fu_696_p1[0];
tmp_V_18_cast_reg_3443[1] <= tmp_V_18_cast_fu_696_p1[1];
tmp_V_18_cast_reg_3443[2] <= tmp_V_18_cast_fu_696_p1[2];
tmp_V_18_cast_reg_3443[3] <= tmp_V_18_cast_fu_696_p1[3];
tmp_V_18_cast_reg_3443[4] <= tmp_V_18_cast_fu_696_p1[4];
tmp_V_18_cast_reg_3443[5] <= tmp_V_18_cast_fu_696_p1[5];
tmp_V_18_cast_reg_3443[6] <= tmp_V_18_cast_fu_696_p1[6];
tmp_V_18_cast_reg_3443[7] <= tmp_V_18_cast_fu_696_p1[7];
tmp_V_18_cast_reg_3443[8] <= tmp_V_18_cast_fu_696_p1[8];
tmp_V_18_cast_reg_3443[9] <= tmp_V_18_cast_fu_696_p1[9];
tmp_V_18_cast_reg_3443[10] <= tmp_V_18_cast_fu_696_p1[10];
tmp_V_18_cast_reg_3443[11] <= tmp_V_18_cast_fu_696_p1[11];
        tmp_V_19_cast_reg_3470[0] <= tmp_V_19_cast_fu_758_p1[0];
tmp_V_19_cast_reg_3470[1] <= tmp_V_19_cast_fu_758_p1[1];
tmp_V_19_cast_reg_3470[2] <= tmp_V_19_cast_fu_758_p1[2];
tmp_V_19_cast_reg_3470[3] <= tmp_V_19_cast_fu_758_p1[3];
tmp_V_19_cast_reg_3470[4] <= tmp_V_19_cast_fu_758_p1[4];
tmp_V_19_cast_reg_3470[5] <= tmp_V_19_cast_fu_758_p1[5];
tmp_V_19_cast_reg_3470[6] <= tmp_V_19_cast_fu_758_p1[6];
tmp_V_19_cast_reg_3470[7] <= tmp_V_19_cast_fu_758_p1[7];
tmp_V_19_cast_reg_3470[8] <= tmp_V_19_cast_fu_758_p1[8];
tmp_V_19_cast_reg_3470[9] <= tmp_V_19_cast_fu_758_p1[9];
tmp_V_19_cast_reg_3470[10] <= tmp_V_19_cast_fu_758_p1[10];
tmp_V_19_cast_reg_3470[11] <= tmp_V_19_cast_fu_758_p1[11];
tmp_V_19_cast_reg_3470[12] <= tmp_V_19_cast_fu_758_p1[12];
tmp_V_19_cast_reg_3470[13] <= tmp_V_19_cast_fu_758_p1[13];
tmp_V_19_cast_reg_3470[14] <= tmp_V_19_cast_fu_758_p1[14];
tmp_V_19_cast_reg_3470[15] <= tmp_V_19_cast_fu_758_p1[15];
tmp_V_19_cast_reg_3470[16] <= tmp_V_19_cast_fu_758_p1[16];
tmp_V_19_cast_reg_3470[17] <= tmp_V_19_cast_fu_758_p1[17];
tmp_V_19_cast_reg_3470[18] <= tmp_V_19_cast_fu_758_p1[18];
tmp_V_19_cast_reg_3470[19] <= tmp_V_19_cast_fu_758_p1[19];
tmp_V_19_cast_reg_3470[20] <= tmp_V_19_cast_fu_758_p1[20];
tmp_V_19_cast_reg_3470[21] <= tmp_V_19_cast_fu_758_p1[21];
tmp_V_19_cast_reg_3470[22] <= tmp_V_19_cast_fu_758_p1[22];
tmp_V_19_cast_reg_3470[23] <= tmp_V_19_cast_fu_758_p1[23];
tmp_V_19_cast_reg_3470[24] <= tmp_V_19_cast_fu_758_p1[24];
tmp_V_19_cast_reg_3470[25] <= tmp_V_19_cast_fu_758_p1[25];
tmp_V_19_cast_reg_3470[26] <= tmp_V_19_cast_fu_758_p1[26];
tmp_V_19_cast_reg_3470[27] <= tmp_V_19_cast_fu_758_p1[27];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_150_reg_3459 == ap_const_lv1_0))) begin
        man_V_26_reg_3745 <= man_V_26_fu_1461_p1;
        tmp_152_reg_3740 <= tmp_152_fu_1421_p2;
        tmp_197_cast_reg_3750 <= tmp_197_cast_fu_1481_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_127_reg_3405 == ap_const_lv1_0))) begin
        p_Result_21_reg_3715 <= p_Result_21_fu_1314_p4;
        tmp_129_reg_3710 <= tmp_129_fu_1283_p2;
        tmp_169_cast_reg_3720 <= tmp_169_cast_fu_1339_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_138_reg_3432 == ap_const_lv1_0))) begin
        p_Result_27_reg_3730 <= p_Result_27_fu_1383_p4;
        tmp_140_reg_3725 <= tmp_140_fu_1352_p2;
        tmp_183_cast_reg_3735 <= tmp_183_cast_fu_1408_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_114_reg_3378 == ap_const_lv1_0))) begin
        p_Result_8_reg_3700 <= p_Result_8_fu_1245_p4;
        tmp_117_reg_3695 <= tmp_117_fu_1214_p2;
        tmp_155_cast_reg_3705 <= tmp_155_cast_fu_1270_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_103_reg_3351 == ap_const_lv1_0))) begin
        p_Result_s_reg_3685 <= p_Result_s_fu_1176_p4;
        tmp_105_reg_3680 <= tmp_105_fu_1145_p2;
        tmp_141_cast_reg_3690 <= tmp_141_cast_fu_1201_p3;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_2658)
begin
    if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_2658)
begin
    if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~ap_sig_bdd_2658)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_start_out1ack_in assign process. ///
always @ (ap_start_out1vld_reg)
begin
    if (((ap_const_logic_0 == ap_start_out1vld_reg) | ((ap_const_logic_1 == ap_start_out1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
        ap_start_out1ack_in = ap_const_logic_1;
    end else begin
        ap_start_out1ack_in = ap_const_logic_0;
    end
end

/// ap_start_out1vld_in assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        ap_start_out1vld_in = ap_const_logic_1;
    end else begin
        ap_start_out1vld_in = ap_const_logic_0;
    end
end

/// control_in_lf_i_ap_vld_in_sig assign process. ///
always @ (control_in_lf_i_ap_vld or control_in_lf_i_ap_vld_preg)
begin
    if ((ap_const_logic_1 == control_in_lf_i_ap_vld)) begin
        control_in_lf_i_ap_vld_in_sig = control_in_lf_i_ap_vld;
    end else begin
        control_in_lf_i_ap_vld_in_sig = control_in_lf_i_ap_vld_preg;
    end
end

/// control_in_lf_i_in_sig assign process. ///
always @ (control_in_lf_i or control_in_lf_i_preg or control_in_lf_i_ap_vld)
begin
    if ((ap_const_logic_1 == control_in_lf_i_ap_vld)) begin
        control_in_lf_i_in_sig = control_in_lf_i;
    end else begin
        control_in_lf_i_in_sig = control_in_lf_i_preg;
    end
end

/// control_in_lf_out_gain_ap_vld_in_sig assign process. ///
always @ (control_in_lf_out_gain_ap_vld or control_in_lf_out_gain_ap_vld_preg)
begin
    if ((ap_const_logic_1 == control_in_lf_out_gain_ap_vld)) begin
        control_in_lf_out_gain_ap_vld_in_sig = control_in_lf_out_gain_ap_vld;
    end else begin
        control_in_lf_out_gain_ap_vld_in_sig = control_in_lf_out_gain_ap_vld_preg;
    end
end

/// control_in_lf_out_gain_in_sig assign process. ///
always @ (control_in_lf_out_gain or control_in_lf_out_gain_preg or control_in_lf_out_gain_ap_vld)
begin
    if ((ap_const_logic_1 == control_in_lf_out_gain_ap_vld)) begin
        control_in_lf_out_gain_in_sig = control_in_lf_out_gain;
    end else begin
        control_in_lf_out_gain_in_sig = control_in_lf_out_gain_preg;
    end
end

/// control_in_lf_p_ap_vld_in_sig assign process. ///
always @ (control_in_lf_p_ap_vld or control_in_lf_p_ap_vld_preg)
begin
    if ((ap_const_logic_1 == control_in_lf_p_ap_vld)) begin
        control_in_lf_p_ap_vld_in_sig = control_in_lf_p_ap_vld;
    end else begin
        control_in_lf_p_ap_vld_in_sig = control_in_lf_p_ap_vld_preg;
    end
end

/// control_in_lf_p_in_sig assign process. ///
always @ (control_in_lf_p or control_in_lf_p_preg or control_in_lf_p_ap_vld)
begin
    if ((ap_const_logic_1 == control_in_lf_p_ap_vld)) begin
        control_in_lf_p_in_sig = control_in_lf_p;
    end else begin
        control_in_lf_p_in_sig = control_in_lf_p_preg;
    end
end

/// control_in_qam_ap_vld_in_sig assign process. ///
always @ (control_in_qam_ap_vld or control_in_qam_ap_vld_preg)
begin
    if ((ap_const_logic_1 == control_in_qam_ap_vld)) begin
        control_in_qam_ap_vld_in_sig = control_in_qam_ap_vld;
    end else begin
        control_in_qam_ap_vld_in_sig = control_in_qam_ap_vld_preg;
    end
end

/// control_in_qam_in_sig assign process. ///
always @ (control_in_qam or control_in_qam_preg or control_in_qam_ap_vld)
begin
    if ((ap_const_logic_1 == control_in_qam_ap_vld)) begin
        control_in_qam_in_sig = control_in_qam;
    end else begin
        control_in_qam_in_sig = control_in_qam_preg;
    end
end

/// control_in_reg_clr_ap_vld_in_sig assign process. ///
always @ (control_in_reg_clr_ap_vld or control_in_reg_clr_ap_vld_preg)
begin
    if ((ap_const_logic_1 == control_in_reg_clr_ap_vld)) begin
        control_in_reg_clr_ap_vld_in_sig = control_in_reg_clr_ap_vld;
    end else begin
        control_in_reg_clr_ap_vld_in_sig = control_in_reg_clr_ap_vld_preg;
    end
end

/// control_in_reg_clr_in_sig assign process. ///
always @ (control_in_reg_clr or control_in_reg_clr_preg or control_in_reg_clr_ap_vld)
begin
    if ((ap_const_logic_1 == control_in_reg_clr_ap_vld)) begin
        control_in_reg_clr_in_sig = control_in_reg_clr;
    end else begin
        control_in_reg_clr_in_sig = control_in_reg_clr_preg;
    end
end

/// control_in_reg_init_ap_vld_in_sig assign process. ///
always @ (control_in_reg_init_ap_vld or control_in_reg_init_ap_vld_preg)
begin
    if ((ap_const_logic_1 == control_in_reg_init_ap_vld)) begin
        control_in_reg_init_ap_vld_in_sig = control_in_reg_init_ap_vld;
    end else begin
        control_in_reg_init_ap_vld_in_sig = control_in_reg_init_ap_vld_preg;
    end
end

/// control_in_reg_init_in_sig assign process. ///
always @ (control_in_reg_init or control_in_reg_init_preg or control_in_reg_init_ap_vld)
begin
    if ((ap_const_logic_1 == control_in_reg_init_ap_vld)) begin
        control_in_reg_init_in_sig = control_in_reg_init;
    end else begin
        control_in_reg_init_in_sig = control_in_reg_init_preg;
    end
end

/// control_out_lf_i1ack_in assign process. ///
always @ (control_out_lf_i1vld_reg)
begin
    if (((ap_const_logic_0 == control_out_lf_i1vld_reg) | ((ap_const_logic_1 == control_out_lf_i1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
        control_out_lf_i1ack_in = ap_const_logic_1;
    end else begin
        control_out_lf_i1ack_in = ap_const_logic_0;
    end
end

/// control_out_lf_i1vld_in assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_464)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_464)) begin
        control_out_lf_i1vld_in = ap_const_logic_1;
    end else begin
        control_out_lf_i1vld_in = ap_const_logic_0;
    end
end

/// control_out_lf_out_gain1ack_in assign process. ///
always @ (control_out_lf_out_gain1vld_reg)
begin
    if (((ap_const_logic_0 == control_out_lf_out_gain1vld_reg) | ((ap_const_logic_1 == control_out_lf_out_gain1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
        control_out_lf_out_gain1ack_in = ap_const_logic_1;
    end else begin
        control_out_lf_out_gain1ack_in = ap_const_logic_0;
    end
end

/// control_out_lf_out_gain1vld_in assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_464)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_464)) begin
        control_out_lf_out_gain1vld_in = ap_const_logic_1;
    end else begin
        control_out_lf_out_gain1vld_in = ap_const_logic_0;
    end
end

/// control_out_lf_p1ack_in assign process. ///
always @ (control_out_lf_p1vld_reg)
begin
    if (((ap_const_logic_0 == control_out_lf_p1vld_reg) | ((ap_const_logic_1 == control_out_lf_p1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
        control_out_lf_p1ack_in = ap_const_logic_1;
    end else begin
        control_out_lf_p1ack_in = ap_const_logic_0;
    end
end

/// control_out_lf_p1vld_in assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_464)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_464)) begin
        control_out_lf_p1vld_in = ap_const_logic_1;
    end else begin
        control_out_lf_p1vld_in = ap_const_logic_0;
    end
end

/// control_out_qam_V1ack_in assign process. ///
always @ (control_out_qam_V1vld_reg)
begin
    if (((ap_const_logic_0 == control_out_qam_V1vld_reg) | ((ap_const_logic_1 == control_out_qam_V1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
        control_out_qam_V1ack_in = ap_const_logic_1;
    end else begin
        control_out_qam_V1ack_in = ap_const_logic_0;
    end
end

/// control_out_qam_V1vld_in assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        control_out_qam_V1vld_in = ap_const_logic_1;
    end else begin
        control_out_qam_V1vld_in = ap_const_logic_0;
    end
end

/// control_out_reg_clr1ack_in assign process. ///
always @ (control_out_reg_clr1vld_reg)
begin
    if (((ap_const_logic_0 == control_out_reg_clr1vld_reg) | ((ap_const_logic_1 == control_out_reg_clr1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
        control_out_reg_clr1ack_in = ap_const_logic_1;
    end else begin
        control_out_reg_clr1ack_in = ap_const_logic_0;
    end
end

/// control_out_reg_clr1vld_in assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_464)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_464)) begin
        control_out_reg_clr1vld_in = ap_const_logic_1;
    end else begin
        control_out_reg_clr1vld_in = ap_const_logic_0;
    end
end

/// control_out_reg_init_V1ack_in assign process. ///
always @ (control_out_reg_init_V1vld_reg)
begin
    if (((ap_const_logic_0 == control_out_reg_init_V1vld_reg) | ((ap_const_logic_1 == control_out_reg_init_V1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
        control_out_reg_init_V1ack_in = ap_const_logic_1;
    end else begin
        control_out_reg_init_V1ack_in = ap_const_logic_0;
    end
end

/// control_out_reg_init_V1vld_in assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        control_out_reg_init_V1vld_in = ap_const_logic_1;
    end else begin
        control_out_reg_init_V1vld_in = ap_const_logic_0;
    end
end

/// grp_fu_458_ce assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_464)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_464) | (ap_ST_st2_fsm_1 == ap_CS_fsm) | (ap_ST_st3_fsm_2 == ap_CS_fsm))) begin
        grp_fu_458_ce = ap_const_logic_1;
    end else begin
        grp_fu_458_ce = ap_const_logic_0;
    end
end

/// grp_fu_462_ce assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_464)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_464) | (ap_ST_st2_fsm_1 == ap_CS_fsm) | (ap_ST_st3_fsm_2 == ap_CS_fsm))) begin
        grp_fu_462_ce = ap_const_logic_1;
    end else begin
        grp_fu_462_ce = ap_const_logic_0;
    end
end

/// grp_fu_466_ce assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_464)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_464) | (ap_ST_st2_fsm_1 == ap_CS_fsm) | (ap_ST_st3_fsm_2 == ap_CS_fsm))) begin
        grp_fu_466_ce = ap_const_logic_1;
    end else begin
        grp_fu_466_ce = ap_const_logic_0;
    end
end

/// grp_fu_470_ce assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_464)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_464) | (ap_ST_st2_fsm_1 == ap_CS_fsm) | (ap_ST_st3_fsm_2 == ap_CS_fsm))) begin
        grp_fu_470_ce = ap_const_logic_1;
    end else begin
        grp_fu_470_ce = ap_const_logic_0;
    end
end

/// grp_fu_474_ce assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_464)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_464) | (ap_ST_st2_fsm_1 == ap_CS_fsm) | (ap_ST_st3_fsm_2 == ap_CS_fsm))) begin
        grp_fu_474_ce = ap_const_logic_1;
    end else begin
        grp_fu_474_ce = ap_const_logic_0;
    end
end

/// grp_fu_478_ce assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_464)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_464) | (ap_ST_st2_fsm_1 == ap_CS_fsm) | (ap_ST_st3_fsm_2 == ap_CS_fsm))) begin
        grp_fu_478_ce = ap_const_logic_1;
    end else begin
        grp_fu_478_ce = ap_const_logic_0;
    end
end

/// input_d_i_ap_vld_in_sig assign process. ///
always @ (input_d_i_ap_vld or input_d_i_ap_vld_preg)
begin
    if ((ap_const_logic_1 == input_d_i_ap_vld)) begin
        input_d_i_ap_vld_in_sig = input_d_i_ap_vld;
    end else begin
        input_d_i_ap_vld_in_sig = input_d_i_ap_vld_preg;
    end
end

/// input_d_i_in_sig assign process. ///
always @ (input_d_i or input_d_i_preg or input_d_i_ap_vld)
begin
    if ((ap_const_logic_1 == input_d_i_ap_vld)) begin
        input_d_i_in_sig = input_d_i;
    end else begin
        input_d_i_in_sig = input_d_i_preg;
    end
end

/// input_d_q_ap_vld_in_sig assign process. ///
always @ (input_d_q_ap_vld or input_d_q_ap_vld_preg)
begin
    if ((ap_const_logic_1 == input_d_q_ap_vld)) begin
        input_d_q_ap_vld_in_sig = input_d_q_ap_vld;
    end else begin
        input_d_q_ap_vld_in_sig = input_d_q_ap_vld_preg;
    end
end

/// input_d_q_in_sig assign process. ///
always @ (input_d_q or input_d_q_preg or input_d_q_ap_vld)
begin
    if ((ap_const_logic_1 == input_d_q_ap_vld)) begin
        input_d_q_in_sig = input_d_q;
    end else begin
        input_d_q_in_sig = input_d_q_preg;
    end
end

/// input_ph_i_ap_vld_in_sig assign process. ///
always @ (input_ph_i_ap_vld or input_ph_i_ap_vld_preg)
begin
    if ((ap_const_logic_1 == input_ph_i_ap_vld)) begin
        input_ph_i_ap_vld_in_sig = input_ph_i_ap_vld;
    end else begin
        input_ph_i_ap_vld_in_sig = input_ph_i_ap_vld_preg;
    end
end

/// input_ph_i_in_sig assign process. ///
always @ (input_ph_i or input_ph_i_preg or input_ph_i_ap_vld)
begin
    if ((ap_const_logic_1 == input_ph_i_ap_vld)) begin
        input_ph_i_in_sig = input_ph_i;
    end else begin
        input_ph_i_in_sig = input_ph_i_preg;
    end
end

/// input_ph_q_ap_vld_in_sig assign process. ///
always @ (input_ph_q_ap_vld or input_ph_q_ap_vld_preg)
begin
    if ((ap_const_logic_1 == input_ph_q_ap_vld)) begin
        input_ph_q_ap_vld_in_sig = input_ph_q_ap_vld;
    end else begin
        input_ph_q_ap_vld_in_sig = input_ph_q_ap_vld_preg;
    end
end

/// input_ph_q_in_sig assign process. ///
always @ (input_ph_q or input_ph_q_preg or input_ph_q_ap_vld)
begin
    if ((ap_const_logic_1 == input_ph_q_ap_vld)) begin
        input_ph_q_in_sig = input_ph_q;
    end else begin
        input_ph_q_in_sig = input_ph_q_preg;
    end
end

/// loop_out_ap_vld assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        loop_out_ap_vld = ap_const_logic_1;
    end else begin
        loop_out_ap_vld = ap_const_logic_0;
    end
end

/// output_d_i assign process. ///
always @ (ap_CS_fsm or p_02_i1_fu_2531_p3 or output_d_i_preg)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        output_d_i = p_02_i1_fu_2531_p3;
    end else begin
        output_d_i = output_d_i_preg;
    end
end

/// output_d_q assign process. ///
always @ (ap_CS_fsm or p_02_i_fu_2581_p3 or output_d_q_preg)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        output_d_q = p_02_i_fu_2581_p3;
    end else begin
        output_d_q = output_d_q_preg;
    end
end

/// output_ph_i assign process. ///
always @ (ap_CS_fsm or p_02_i2_fu_2631_p3 or output_ph_i_preg)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        output_ph_i = p_02_i2_fu_2631_p3;
    end else begin
        output_ph_i = output_ph_i_preg;
    end
end

/// output_ph_q assign process. ///
always @ (ap_CS_fsm or p_02_i3_fu_2681_p3 or output_ph_q_preg)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        output_ph_q = p_02_i3_fu_2681_p3;
    end else begin
        output_ph_q = output_ph_q_preg;
    end
end

/// qam_d_i_V assign process. ///
always @ (ap_CS_fsm or newSel3_fu_2793_p3 or qam_d_i_V_preg)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        qam_d_i_V = newSel3_fu_2793_p3;
    end else begin
        qam_d_i_V = qam_d_i_V_preg;
    end
end

/// qam_d_out_i_V_ap_vld_in_sig assign process. ///
always @ (qam_d_out_i_V_ap_vld or qam_d_out_i_V_ap_vld_preg)
begin
    if ((ap_const_logic_1 == qam_d_out_i_V_ap_vld)) begin
        qam_d_out_i_V_ap_vld_in_sig = qam_d_out_i_V_ap_vld;
    end else begin
        qam_d_out_i_V_ap_vld_in_sig = qam_d_out_i_V_ap_vld_preg;
    end
end

/// qam_d_out_q_V_ap_vld_in_sig assign process. ///
always @ (qam_d_out_q_V_ap_vld or qam_d_out_q_V_ap_vld_preg)
begin
    if ((ap_const_logic_1 == qam_d_out_q_V_ap_vld)) begin
        qam_d_out_q_V_ap_vld_in_sig = qam_d_out_q_V_ap_vld;
    end else begin
        qam_d_out_q_V_ap_vld_in_sig = qam_d_out_q_V_ap_vld_preg;
    end
end

/// qam_d_q_V assign process. ///
always @ (ap_CS_fsm or newSel7_fu_2860_p3 or qam_d_q_V_preg)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        qam_d_q_V = newSel7_fu_2860_p3;
    end else begin
        qam_d_q_V = qam_d_q_V_preg;
    end
end

/// qam_loop_out_V_ap_vld_in_sig assign process. ///
always @ (qam_loop_out_V_ap_vld or qam_loop_out_V_ap_vld_preg)
begin
    if ((ap_const_logic_1 == qam_loop_out_V_ap_vld)) begin
        qam_loop_out_V_ap_vld_in_sig = qam_loop_out_V_ap_vld;
    end else begin
        qam_loop_out_V_ap_vld_in_sig = qam_loop_out_V_ap_vld_preg;
    end
end

/// qam_ph_i_V1ack_in assign process. ///
always @ (qam_ph_i_V1vld_reg)
begin
    if (((ap_const_logic_0 == qam_ph_i_V1vld_reg) | ((ap_const_logic_1 == qam_ph_i_V1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
        qam_ph_i_V1ack_in = ap_const_logic_1;
    end else begin
        qam_ph_i_V1ack_in = ap_const_logic_0;
    end
end

/// qam_ph_i_V1vld_in assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        qam_ph_i_V1vld_in = ap_const_logic_1;
    end else begin
        qam_ph_i_V1vld_in = ap_const_logic_0;
    end
end

/// qam_ph_out_i_V_ap_vld_in_sig assign process. ///
always @ (qam_ph_out_i_V_ap_vld or qam_ph_out_i_V_ap_vld_preg)
begin
    if ((ap_const_logic_1 == qam_ph_out_i_V_ap_vld)) begin
        qam_ph_out_i_V_ap_vld_in_sig = qam_ph_out_i_V_ap_vld;
    end else begin
        qam_ph_out_i_V_ap_vld_in_sig = qam_ph_out_i_V_ap_vld_preg;
    end
end

/// qam_ph_out_q_V_ap_vld_in_sig assign process. ///
always @ (qam_ph_out_q_V_ap_vld or qam_ph_out_q_V_ap_vld_preg)
begin
    if ((ap_const_logic_1 == qam_ph_out_q_V_ap_vld)) begin
        qam_ph_out_q_V_ap_vld_in_sig = qam_ph_out_q_V_ap_vld;
    end else begin
        qam_ph_out_q_V_ap_vld_in_sig = qam_ph_out_q_V_ap_vld_preg;
    end
end

/// qam_ph_q_V1ack_in assign process. ///
always @ (qam_ph_q_V1vld_reg)
begin
    if (((ap_const_logic_0 == qam_ph_q_V1vld_reg) | ((ap_const_logic_1 == qam_ph_q_V1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
        qam_ph_q_V1ack_in = ap_const_logic_1;
    end else begin
        qam_ph_q_V1ack_in = ap_const_logic_0;
    end
end

/// qam_ph_q_V1vld_in assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        qam_ph_q_V1vld_in = ap_const_logic_1;
    end else begin
        qam_ph_q_V1vld_in = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or ap_sig_bdd_464 or ap_sig_bdd_2658)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~ap_sig_bdd_464) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
        ap_ST_st6_fsm_5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
        ap_ST_st7_fsm_6 : 
            if (~ap_sig_bdd_2658) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign F2_1_fu_878_p2 = (ap_const_lv12_433 - tmp_13_fu_864_p1);
assign F2_2_fu_924_p2 = (ap_const_lv12_433 - tmp_29_fu_910_p1);
assign F2_3_fu_970_p2 = (ap_const_lv12_433 - tmp_44_fu_956_p1);
assign F2_4_fu_1016_p2 = (ap_const_lv12_433 - tmp_60_fu_1002_p1);
assign F2_6_fu_1100_p2 = (ap_const_lv12_433 - tmp_73_fu_1054_p1);
assign F2_7_cast_fu_2134_p1 = $signed(F2_7_fu_2127_p3);
assign F2_7_fu_2127_p3 = ((tmp_64_fu_2117_p2)? F2_4_reg_3603: tmp_65_fu_2122_p2);
assign F2_fu_832_p2 = (ap_const_lv12_433 - tmp_2_fu_818_p1);
assign Range1_all_ones_1_fu_2401_p2 = (tmp1_fu_2395_p2 & tmp_91_fu_2362_p2);
assign Range1_all_ones_fu_3112_p2 = (Range2_all_ones_1_i_fu_3101_p3 & Range1_all_ones_1_reg_3962);
assign Range1_all_zeros_1_fu_2454_p2 = (man_V_28_reg_3623 == ap_const_lv54_0? 1'b1: 1'b0);
assign Range1_all_zeros_fu_3117_p2 = (Range1_all_ones_1_reg_3962 ^ ap_const_lv1_1);
assign Range2_V_1_fu_2425_p2 = man_V_28_reg_3623 >> tmp_96_fu_2421_p1;
assign Range2_all_ones_1_i_fu_3101_p3 = ((or_cond88_i_fu_3096_p2)? Range2_all_ones_reg_3980: rev1_fu_3091_p2);
assign Range2_all_ones_fu_2436_p2 = (Range2_V_1_fu_2425_p2 == r_V_fu_2430_p2? 1'b1: 1'b0);
assign ap_return = ap_const_lv1_1;

/// ap_sig_bdd_2658 assign process. ///
always @ (qam_ph_i_V1ack_in or qam_ph_q_V1ack_in or control_out_qam_V1ack_in or control_out_lf_p1ack_in or control_out_lf_i1ack_in or control_out_lf_out_gain1ack_in or control_out_reg_clr1ack_in or control_out_reg_init_V1ack_in or ap_start_out1ack_in)
begin
    ap_sig_bdd_2658 = ((qam_ph_i_V1ack_in == ap_const_logic_0) | (qam_ph_q_V1ack_in == ap_const_logic_0) | (control_out_qam_V1ack_in == ap_const_logic_0) | (control_out_lf_p1ack_in == ap_const_logic_0) | (control_out_lf_i1ack_in == ap_const_logic_0) | (control_out_lf_out_gain1ack_in == ap_const_logic_0) | (control_out_reg_clr1ack_in == ap_const_logic_0) | (control_out_reg_init_V1ack_in == ap_const_logic_0) | (ap_start_out1ack_in == ap_const_logic_0));
end

/// ap_sig_bdd_464 assign process. ///
always @ (ap_start or input_d_i_ap_vld_in_sig or input_d_q_ap_vld_in_sig or input_ph_i_ap_vld_in_sig or input_ph_q_ap_vld_in_sig or control_in_qam_ap_vld_in_sig or control_in_lf_p_ap_vld_in_sig or control_in_lf_i_ap_vld_in_sig or control_in_lf_out_gain_ap_vld_in_sig or control_in_reg_clr_ap_vld_in_sig or control_in_reg_init_ap_vld_in_sig or qam_d_out_i_V_ap_vld_in_sig or qam_d_out_q_V_ap_vld_in_sig or qam_ph_out_i_V_ap_vld_in_sig or qam_ph_out_q_V_ap_vld_in_sig or qam_loop_out_V_ap_vld_in_sig)
begin
    ap_sig_bdd_464 = ((qam_loop_out_V_ap_vld_in_sig == ap_const_logic_0) | (qam_ph_out_q_V_ap_vld_in_sig == ap_const_logic_0) | (qam_ph_out_i_V_ap_vld_in_sig == ap_const_logic_0) | (qam_d_out_q_V_ap_vld_in_sig == ap_const_logic_0) | (qam_d_out_i_V_ap_vld_in_sig == ap_const_logic_0) | (control_in_reg_init_ap_vld_in_sig == ap_const_logic_0) | (control_in_reg_clr_ap_vld_in_sig == ap_const_logic_0) | (control_in_lf_out_gain_ap_vld_in_sig == ap_const_logic_0) | (control_in_lf_i_ap_vld_in_sig == ap_const_logic_0) | (control_in_lf_p_ap_vld_in_sig == ap_const_logic_0) | (control_in_qam_ap_vld_in_sig == ap_const_logic_0) | (input_ph_q_ap_vld_in_sig == ap_const_logic_0) | (input_ph_i_ap_vld_in_sig == ap_const_logic_0) | (input_d_q_ap_vld_in_sig == ap_const_logic_0) | (input_d_i_ap_vld_in_sig == ap_const_logic_0) | (ap_start == ap_const_logic_0));
end
assign ap_start_out = ap_start_out1data_reg;
assign ap_start_out1data_in = ap_const_lv1_1;
assign brmerge92_demorgan_i_fu_3203_p2 = (newsignbit_fu_3083_p3 & deleted_ones_0_i_fu_3162_p3);
assign brmerge92_i_fu_3209_p2 = (brmerge92_demorgan_i_reg_4040 ^ ap_const_lv1_1);
assign brmerge_fu_3234_p2 = (tmp4_fu_3229_p2 | brmerge92_demorgan_i_reg_4040);
assign brmerge_i_fu_3186_p2 = (newsignbit_fu_3083_p3 | deleted_zeros_0_not_i_fu_3180_p2);
assign brmerge_i_i_fu_3219_p2 = (underflow_fu_3214_p2 | overflow_reg_4034);
assign control_in_reg_clr_read_read_fu_286_p2 = control_in_reg_clr_in_sig;
assign control_out_lf_i = control_out_lf_i1data_reg;
assign control_out_lf_out_gain = control_out_lf_out_gain1data_reg;
assign control_out_lf_p = control_out_lf_p1data_reg;
assign control_out_qam_V = control_out_qam_V1data_reg;
assign control_out_reg_clr = control_out_reg_clr1data_reg;
assign control_out_reg_init_V = control_out_reg_init_V1data_reg;
assign deleted_ones_0_i_fu_3162_p3 = ((sel_tmp60_fu_3143_p2)? Range1_all_ones_fu_3112_p2: sel_tmp61_fu_3156_p3);
assign deleted_zeros_0_i_fu_3148_p3 = ((sel_tmp60_fu_3143_p2)? p_93_i_fu_3122_p2: sel_tmp59_fu_3135_p3);
assign deleted_zeros_0_not_i_fu_3180_p2 = (deleted_zeros_0_i_fu_3148_p3 ^ ap_const_lv1_1);
assign exp_V_fu_1058_p2 = (tmp_73_fu_1054_p1 + ap_const_lv12_C01);
assign exp_tmp_V_1_fu_854_p4 = {{ireg_V_1_fu_838_p1[ap_const_lv32_3E : ap_const_lv32_34]}};
assign exp_tmp_V_2_fu_900_p4 = {{ireg_V_2_fu_884_p1[ap_const_lv32_3E : ap_const_lv32_34]}};
assign exp_tmp_V_3_fu_946_p4 = {{ireg_V_3_fu_930_p1[ap_const_lv32_3E : ap_const_lv32_34]}};
assign exp_tmp_V_4_fu_992_p4 = {{ireg_V_4_fu_976_p1[ap_const_lv32_3E : ap_const_lv32_34]}};
assign exp_tmp_V_5_fu_1044_p4 = {{ireg_V_5_fu_1028_p1[ap_const_lv32_3E : ap_const_lv32_34]}};
assign exp_tmp_V_fu_808_p4 = {{ireg_V_fu_792_p1[ap_const_lv32_3E : ap_const_lv32_34]}};
assign grp_fu_458_p0 = input_d_i_in_sig;
assign grp_fu_462_p0 = input_d_q_in_sig;
assign grp_fu_466_p0 = input_ph_i_in_sig;
assign grp_fu_470_p0 = input_ph_q_in_sig;
assign grp_fu_474_p0 = control_in_qam_in_sig;
assign grp_fu_478_p0 = control_in_reg_init_in_sig;
assign icmp1_fu_1721_p2 = (tmp_54_fu_1711_p4 == ap_const_lv8_0? 1'b1: 1'b0);
assign icmp2_fu_2158_p2 = (tmp_146_fu_2148_p4 == ap_const_lv11_0? 1'b1: 1'b0);
assign icmp_fu_1565_p2 = (tmp_22_fu_1555_p4 == ap_const_lv8_0? 1'b1: 1'b0);
assign ireg_V_1_fu_838_p1 = grp_fu_462_p1;
assign ireg_V_2_fu_884_p1 = grp_fu_466_p1;
assign ireg_V_3_fu_930_p1 = grp_fu_470_p1;
assign ireg_V_4_fu_976_p1 = grp_fu_474_p1;
assign ireg_V_5_fu_1028_p1 = grp_fu_478_p1;
assign ireg_V_fu_792_p1 = grp_fu_458_p1;
assign isneg_11_fu_1036_p3 = ireg_V_5_fu_1028_p1[ap_const_lv32_3F];
assign isneg_12_fu_488_p3 = qam_d_out_i_V_preg[ap_const_lv32_F];
assign isneg_13_fu_550_p3 = qam_d_out_q_V_preg[ap_const_lv32_F];
assign isneg_14_fu_612_p3 = qam_ph_out_i_V_preg[ap_const_lv32_B];
assign isneg_15_fu_674_p3 = qam_ph_out_q_V_preg[ap_const_lv32_B];
assign isneg_16_fu_736_p3 = qam_loop_out_V_preg[ap_const_lv32_1B];
assign j_1_fu_1209_p2 = (ap_const_lv32_10 - tmp_115_reg_3394);
assign j_2_fu_1278_p2 = (ap_const_lv32_C - tmp_128_reg_3421);
assign j_3_fu_1347_p2 = (ap_const_lv32_C - tmp_139_reg_3448);
assign j_4_fu_1416_p2 = (ap_const_lv32_1C - tmp_151_reg_3475);
assign j_fu_1140_p2 = (ap_const_lv32_10 - tmp_104_reg_3367);
assign lD_fu_2391_p1 = tmp_94_fu_2386_p2[0:0];
assign loop_out = ((tmp_150_reg_3459)? ap_const_lv32_0: tmp_161_fu_2723_p1);
assign man_V_11_fu_1958_p2 = (ap_const_lv54_0 - p_Result_37_fu_1954_p1);
assign man_V_12_fu_1964_p3 = ((isneg_3_reg_3561)? man_V_11_fu_1958_p2: p_Result_37_fu_1954_p1);
assign man_V_14_fu_2104_p2 = (ap_const_lv54_0 - p_Result_38_fu_2100_p1);
assign man_V_15_fu_2110_p3 = ((isneg_4_reg_3586)? man_V_14_fu_2104_p2: p_Result_38_fu_2100_p1);
assign man_V_17_fu_1080_p2 = (ap_const_lv54_0 - p_Result_39_fu_1076_p1);
assign man_V_1_fu_1500_p2 = (ap_const_lv54_0 - p_Result_34_fu_1496_p1);
assign man_V_26_fu_1461_p1 = p_Result_32_fu_1452_p4[22:0];
assign man_V_28_fu_1086_p3 = ((isneg_11_fu_1036_p3)? man_V_17_fu_1080_p2: p_Result_39_fu_1076_p1);
assign man_V_29_fu_2506_p0 = $signed(p_Result_s_reg_3685);
assign man_V_29_fu_2506_p2 = man_V_29_fu_2506_p0 << tmp_141_cast_reg_3690;
assign man_V_2_fu_1506_p3 = ((isneg_reg_3486)? man_V_1_fu_1500_p2: p_Result_34_fu_1496_p1);
assign man_V_30_fu_2556_p0 = $signed(p_Result_8_reg_3700);
assign man_V_30_fu_2556_p2 = man_V_30_fu_2556_p0 << tmp_155_cast_reg_3705;
assign man_V_31_fu_2606_p0 = $signed(p_Result_21_reg_3715);
assign man_V_31_fu_2606_p2 = man_V_31_fu_2606_p0 << tmp_169_cast_reg_3720;
assign man_V_32_fu_2656_p0 = $signed(p_Result_27_reg_3730);
assign man_V_32_fu_2656_p2 = man_V_32_fu_2656_p0 << tmp_183_cast_reg_3735;
assign man_V_33_fu_2703_p2 = man_V_26_reg_3745 << tmp_197_cast_reg_3750;
assign man_V_4_fu_1656_p2 = (ap_const_lv54_0 - p_Result_35_fu_1652_p1);
assign man_V_5_fu_1662_p3 = ((isneg_1_reg_3511)? man_V_4_fu_1656_p2: p_Result_35_fu_1652_p1);
assign man_V_7_fu_1812_p2 = (ap_const_lv54_0 - p_Result_36_fu_1808_p1);
assign man_V_8_fu_1818_p3 = ((isneg_2_reg_3536)? man_V_7_fu_1812_p2: p_Result_36_fu_1808_p1);
assign neg_src_fu_3175_p2 = (isneg_11_reg_3616 & sel_tmp62_fu_3170_p2);
assign newSel10_fu_2913_p3 = ((or_cond6_fu_2897_p2)? newSel8_fu_2890_p3: newSel9_fu_2902_p3);
assign newSel11_fu_2927_p3 = ((or_cond8_fu_2921_p2)? newSel10_fu_2913_p3: ap_const_lv12_0);
assign newSel12_fu_2957_p3 = ((sel_tmp35_fu_2952_p2)? p_3_fu_2936_p3: tmp_118_reg_3882);
assign newSel13_fu_2969_p3 = ((sel_tmp31_fu_2943_p2)? tmp_116_reg_3877: tmp_109_reg_3866);
assign newSel14_fu_2980_p3 = ((or_cond9_fu_2964_p2)? newSel12_fu_2957_p3: newSel13_fu_2969_p3);
assign newSel15_fu_2994_p3 = ((or_cond11_fu_2988_p2)? newSel14_fu_2980_p3: ap_const_lv12_0);
assign newSel16_fu_3024_p3 = ((sel_tmp44_fu_3019_p2)? p_4_fu_3003_p3: tmp_158_reg_3919);
assign newSel17_fu_3036_p3 = ((sel_tmp40_fu_3010_p2)? tmp_154_reg_3914: tmp_142_reg_3903);
assign newSel18_fu_3047_p3 = ((or_cond12_fu_3031_p2)? newSel16_fu_3024_p3: newSel17_fu_3036_p3);
assign newSel19_fu_3061_p3 = ((or_cond14_fu_3055_p2)? newSel18_fu_3047_p3: ap_const_lv2_0);
assign newSel1_fu_2768_p3 = ((sel_tmp8_fu_2742_p2)? tmp_24_reg_3766: tmp_14_reg_3755);
assign newSel2_fu_2779_p3 = ((or_cond_fu_2763_p2)? newSel_fu_2756_p3: newSel1_fu_2768_p3);
assign newSel3_fu_2793_p3 = ((or_cond2_fu_2787_p2)? newSel2_fu_2779_p3: ap_const_lv16_0);
assign newSel4_fu_2823_p3 = ((sel_tmp17_fu_2818_p2)? p_1_fu_2802_p3: tmp_62_reg_3808);
assign newSel5_fu_2835_p3 = ((sel_tmp13_fu_2809_p2)? tmp_59_reg_3803: tmp_46_reg_3792);
assign newSel6_fu_2846_p3 = ((or_cond3_fu_2830_p2)? newSel4_fu_2823_p3: newSel5_fu_2835_p3);
assign newSel7_fu_2860_p3 = ((or_cond5_fu_2854_p2)? newSel6_fu_2846_p3: ap_const_lv16_0);
assign newSel8_fu_2890_p3 = ((sel_tmp26_fu_2885_p2)? p_2_fu_2869_p3: tmp_90_reg_3845);
assign newSel9_fu_2902_p3 = ((sel_tmp22_fu_2876_p2)? tmp_85_reg_3840: tmp_77_reg_3829);
assign newSel_fu_2756_p3 = ((sel_tmp5_fu_2751_p2)? p_s_fu_2735_p3: tmp_27_reg_3771);
assign newsignbit_fu_3083_p3 = p_Val2_6_fu_3077_p3[ap_const_lv32_1B];
assign or_cond10_fu_2975_p2 = (sel_tmp31_fu_2943_p2 | sel_tmp28_reg_3887);
assign or_cond11_fu_2988_p2 = (or_cond9_fu_2964_p2 | or_cond10_fu_2975_p2);
assign or_cond12_fu_3031_p2 = (sel_tmp44_fu_3019_p2 | sel_tmp42_reg_3935);
assign or_cond13_fu_3042_p2 = (sel_tmp40_fu_3010_p2 | sel_tmp37_reg_3924);
assign or_cond14_fu_3055_p2 = (or_cond12_fu_3031_p2 | or_cond13_fu_3042_p2);
assign or_cond1_fu_2774_p2 = (sel_tmp8_fu_2742_p2 | sel_tmp2_reg_3776);
assign or_cond2_fu_2787_p2 = (or_cond_fu_2763_p2 | or_cond1_fu_2774_p2);
assign or_cond3_fu_2830_p2 = (sel_tmp17_fu_2818_p2 | sel_tmp15_reg_3824);
assign or_cond4_fu_2841_p2 = (sel_tmp13_fu_2809_p2 | sel_tmp10_reg_3813);
assign or_cond5_fu_2854_p2 = (or_cond3_fu_2830_p2 | or_cond4_fu_2841_p2);
assign or_cond6_fu_2897_p2 = (sel_tmp26_fu_2885_p2 | sel_tmp24_reg_3861);
assign or_cond7_fu_2908_p2 = (sel_tmp22_fu_2876_p2 | sel_tmp19_reg_3850);
assign or_cond88_i_fu_3096_p2 = (tmp_95_reg_3974 & rev1_fu_3091_p2);
assign or_cond89_i_fu_3108_p2 = (tmp_95_reg_3974 & rev_reg_3957);
assign or_cond8_fu_2921_p2 = (or_cond6_fu_2897_p2 | or_cond7_fu_2908_p2);
assign or_cond9_fu_2964_p2 = (sel_tmp35_fu_2952_p2 | sel_tmp33_reg_3898);
assign or_cond_fu_2763_p2 = (sel_tmp5_fu_2751_p2 | sel_tmp3_reg_3787);
assign overflow_fu_3197_p2 = (brmerge_i_fu_3186_p2 & tmp_100_fu_3192_p2);
assign p_02_i1_fu_2531_p3 = ((tmp_103_reg_3351)? ap_const_lv32_0: tmp_113_fu_2527_p1);
assign p_02_i2_fu_2631_p3 = ((tmp_127_reg_3405)? ap_const_lv32_0: tmp_137_fu_2627_p1);
assign p_02_i3_fu_2681_p3 = ((tmp_138_reg_3432)? ap_const_lv32_0: tmp_149_fu_2677_p1);
assign p_02_i_fu_2581_p3 = ((tmp_114_reg_3378)? ap_const_lv32_0: tmp_126_fu_2577_p1);
assign p_1_fu_2802_p3 = ((isneg_1_reg_3511)? ap_const_lv16_FFFF: ap_const_lv16_0);
assign p_2_fu_2869_p3 = ((isneg_2_reg_3536)? ap_const_lv12_FFF: ap_const_lv12_0);
assign p_3_fu_2936_p3 = ((isneg_3_reg_3561)? ap_const_lv12_FFF: ap_const_lv12_0);
assign p_4_fu_3003_p3 = ((isneg_4_reg_3586)? ap_const_lv2_3: ap_const_lv2_0);
assign p_5_fu_3070_p3 = ((isneg_11_reg_3616)? ap_const_lv28_FFFFFFF: ap_const_lv28_0);
assign p_93_i_fu_3122_p2 = (tmp_97_reg_3985 & Range1_all_zeros_fu_3117_p2);
assign p_Repl2_10_trunc_fu_2589_p2 = (ap_const_lv8_80 - tmp_184_reg_3427);
assign p_Repl2_14_trunc_fu_2639_p2 = (ap_const_lv8_80 - tmp_187_reg_3454);
assign p_Repl2_18_trunc_fu_2689_p2 = (ap_const_lv8_81 - tmp_190_reg_3481);
assign p_Repl2_2_trunc_fu_2489_p2 = (ap_const_lv8_82 - tmp_178_reg_3373);
assign p_Repl2_6_trunc_fu_2539_p2 = (ap_const_lv8_82 - tmp_181_reg_3400);
wire [4-1:0] p_Result_21_fu_1314_p4_vh_buf;
wire [4-1:0] p_Result_21_fu_1314_p4_vl_buf;
wire [13-1:0] p_Result_21_fu_1314_p4_vi_buf;
wire [13-1:0] p_Result_21_fu_1314_p4_vo_buf;
wire [13-1:0] p_Result_21_fu_1314_p4_vi_r;
wire [4:0] p_Result_21_fu_1314_p4_length;
wire [13-1:0] p_Result_21_fu_1314_p4_mask;

genvar ap_tvar_int_0;
generate
    for (ap_tvar_int_0 = 0; ap_tvar_int_0 < 13; ap_tvar_int_0 = ap_tvar_int_0 + 1) begin :p_Result_21_fu_1314_p4_label0
        assign p_Result_21_fu_1314_p4_vi_r[ap_tvar_int_0] = tmp_V_17_cast_reg_3416[13-1-ap_tvar_int_0];
    end
endgenerate

assign p_Result_21_fu_1314_p4_vh_buf = (tmp_133_fu_1308_p2 >= tmp_132_fu_1300_p3)? tmp_133_fu_1308_p2 : (13 -1- tmp_133_fu_1308_p2);
assign p_Result_21_fu_1314_p4_vl_buf = (tmp_133_fu_1308_p2 >= tmp_132_fu_1300_p3)? tmp_132_fu_1300_p3 : (13 -1-tmp_132_fu_1300_p3);
assign p_Result_21_fu_1314_p4_vi_buf = (tmp_133_fu_1308_p2 >= tmp_132_fu_1300_p3)? tmp_V_17_cast_reg_3416 : p_Result_21_fu_1314_p4_vi_r;
assign p_Result_21_fu_1314_p4_length = p_Result_21_fu_1314_p4_vh_buf - p_Result_21_fu_1314_p4_vl_buf + 1'b1;
assign p_Result_21_fu_1314_p4_mask = ~({13{1'b1}} << p_Result_21_fu_1314_p4_length);
assign p_Result_21_fu_1314_p4 = (p_Result_21_fu_1314_p4_vi_buf >> p_Result_21_fu_1314_p4_vl_buf) & p_Result_21_fu_1314_p4_mask;

wire [4-1:0] p_Result_27_fu_1383_p4_vh_buf;
wire [4-1:0] p_Result_27_fu_1383_p4_vl_buf;
wire [13-1:0] p_Result_27_fu_1383_p4_vi_buf;
wire [13-1:0] p_Result_27_fu_1383_p4_vo_buf;
wire [13-1:0] p_Result_27_fu_1383_p4_vi_r;
wire [4:0] p_Result_27_fu_1383_p4_length;
wire [13-1:0] p_Result_27_fu_1383_p4_mask;

genvar ap_tvar_int_1;
generate
    for (ap_tvar_int_1 = 0; ap_tvar_int_1 < 13; ap_tvar_int_1 = ap_tvar_int_1 + 1) begin :p_Result_27_fu_1383_p4_label0
        assign p_Result_27_fu_1383_p4_vi_r[ap_tvar_int_1] = tmp_V_18_cast_reg_3443[13-1-ap_tvar_int_1];
    end
endgenerate

assign p_Result_27_fu_1383_p4_vh_buf = (tmp_145_fu_1377_p2 >= tmp_144_fu_1369_p3)? tmp_145_fu_1377_p2 : (13 -1- tmp_145_fu_1377_p2);
assign p_Result_27_fu_1383_p4_vl_buf = (tmp_145_fu_1377_p2 >= tmp_144_fu_1369_p3)? tmp_144_fu_1369_p3 : (13 -1-tmp_144_fu_1369_p3);
assign p_Result_27_fu_1383_p4_vi_buf = (tmp_145_fu_1377_p2 >= tmp_144_fu_1369_p3)? tmp_V_18_cast_reg_3443 : p_Result_27_fu_1383_p4_vi_r;
assign p_Result_27_fu_1383_p4_length = p_Result_27_fu_1383_p4_vh_buf - p_Result_27_fu_1383_p4_vl_buf + 1'b1;
assign p_Result_27_fu_1383_p4_mask = ~({13{1'b1}} << p_Result_27_fu_1383_p4_length);
assign p_Result_27_fu_1383_p4 = (p_Result_27_fu_1383_p4_vi_buf >> p_Result_27_fu_1383_p4_vl_buf) & p_Result_27_fu_1383_p4_mask;

wire [5-1:0] p_Result_32_fu_1452_p4_vh_buf;
wire [5-1:0] p_Result_32_fu_1452_p4_vl_buf;
wire [29-1:0] p_Result_32_fu_1452_p4_vi_buf;
wire [29-1:0] p_Result_32_fu_1452_p4_vo_buf;
wire [29-1:0] p_Result_32_fu_1452_p4_vi_r;
wire [5:0] p_Result_32_fu_1452_p4_length;
wire [29-1:0] p_Result_32_fu_1452_p4_mask;

genvar ap_tvar_int_2;
generate
    for (ap_tvar_int_2 = 0; ap_tvar_int_2 < 29; ap_tvar_int_2 = ap_tvar_int_2 + 1) begin :p_Result_32_fu_1452_p4_label0
        assign p_Result_32_fu_1452_p4_vi_r[ap_tvar_int_2] = tmp_V_19_cast_reg_3470[29-1-ap_tvar_int_2];
    end
endgenerate

assign p_Result_32_fu_1452_p4_vh_buf = (tmp_157_fu_1446_p2 >= tmp_156_fu_1438_p3)? tmp_157_fu_1446_p2 : (29 -1- tmp_157_fu_1446_p2);
assign p_Result_32_fu_1452_p4_vl_buf = (tmp_157_fu_1446_p2 >= tmp_156_fu_1438_p3)? tmp_156_fu_1438_p3 : (29 -1-tmp_156_fu_1438_p3);
assign p_Result_32_fu_1452_p4_vi_buf = (tmp_157_fu_1446_p2 >= tmp_156_fu_1438_p3)? tmp_V_19_cast_reg_3470 : p_Result_32_fu_1452_p4_vi_r;
assign p_Result_32_fu_1452_p4_length = p_Result_32_fu_1452_p4_vh_buf - p_Result_32_fu_1452_p4_vl_buf + 1'b1;
assign p_Result_32_fu_1452_p4_mask = ~({29{1'b1}} << p_Result_32_fu_1452_p4_length);
assign p_Result_32_fu_1452_p4 = (p_Result_32_fu_1452_p4_vi_buf >> p_Result_32_fu_1452_p4_vl_buf) & p_Result_32_fu_1452_p4_mask;

assign p_Result_34_fu_1496_p1 = $unsigned(tmp_fu_1489_p3);
assign p_Result_35_fu_1652_p1 = $unsigned(tmp_15_fu_1645_p3);
assign p_Result_36_fu_1808_p1 = $unsigned(tmp_31_fu_1801_p3);
assign p_Result_37_fu_1954_p1 = $unsigned(tmp_45_fu_1947_p3);
assign p_Result_38_fu_2100_p1 = $unsigned(tmp_61_fu_2093_p3);
assign p_Result_39_fu_1076_p1 = $unsigned(tmp_75_fu_1068_p3);

integer ap_tvar_int_3;

always @ (tmp_V_15_cast_fu_510_p1) begin
    for (ap_tvar_int_3 = 17 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > ap_const_lv32_10 - ap_const_lv32_0) begin
            p_Result_40_fu_514_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            p_Result_40_fu_514_p4[ap_tvar_int_3] = tmp_V_15_cast_fu_510_p1[ap_const_lv32_10 - ap_tvar_int_3];
        end
    end
end


assign p_Result_41_fu_524_p3 = {{ap_const_lv15_7FFF}, {p_Result_40_fu_514_p4}};
assign p_Result_42_fu_2494_p4 = {{{isneg_12_reg_3356}, {p_Repl2_2_trunc_fu_2489_p2}}, {ap_const_lv23_0}};
assign p_Result_43_fu_2511_p4 = {{{isneg_12_reg_3356}, {p_Repl2_2_trunc_fu_2489_p2}}, {man_V_29_fu_2506_p2}};

integer ap_tvar_int_4;

always @ (tmp_V_16_cast_fu_572_p1) begin
    for (ap_tvar_int_4 = 17 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > ap_const_lv32_10 - ap_const_lv32_0) begin
            p_Result_44_fu_576_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            p_Result_44_fu_576_p4[ap_tvar_int_4] = tmp_V_16_cast_fu_572_p1[ap_const_lv32_10 - ap_tvar_int_4];
        end
    end
end


assign p_Result_45_fu_586_p3 = {{ap_const_lv15_7FFF}, {p_Result_44_fu_576_p4}};
assign p_Result_46_fu_2544_p4 = {{{isneg_13_reg_3383}, {p_Repl2_6_trunc_fu_2539_p2}}, {ap_const_lv23_0}};
assign p_Result_47_fu_2561_p4 = {{{isneg_13_reg_3383}, {p_Repl2_6_trunc_fu_2539_p2}}, {man_V_30_fu_2556_p2}};

integer ap_tvar_int_5;

always @ (tmp_V_17_cast_fu_634_p1) begin
    for (ap_tvar_int_5 = 13 - 1; ap_tvar_int_5 >= 0; ap_tvar_int_5 = ap_tvar_int_5 - 1) begin
        if (ap_tvar_int_5 > ap_const_lv32_C - ap_const_lv32_0) begin
            p_Result_48_fu_638_p4[ap_tvar_int_5] = 1'b0;
        end else begin
            p_Result_48_fu_638_p4[ap_tvar_int_5] = tmp_V_17_cast_fu_634_p1[ap_const_lv32_C - ap_tvar_int_5];
        end
    end
end


assign p_Result_49_fu_648_p3 = {{ap_const_lv19_7FFFF}, {p_Result_48_fu_638_p4}};
assign p_Result_50_fu_2594_p4 = {{{isneg_14_reg_3410}, {p_Repl2_10_trunc_fu_2589_p2}}, {ap_const_lv23_0}};
assign p_Result_51_fu_2611_p4 = {{{isneg_14_reg_3410}, {p_Repl2_10_trunc_fu_2589_p2}}, {man_V_31_fu_2606_p2}};

integer ap_tvar_int_6;

always @ (tmp_V_18_cast_fu_696_p1) begin
    for (ap_tvar_int_6 = 13 - 1; ap_tvar_int_6 >= 0; ap_tvar_int_6 = ap_tvar_int_6 - 1) begin
        if (ap_tvar_int_6 > ap_const_lv32_C - ap_const_lv32_0) begin
            p_Result_52_fu_700_p4[ap_tvar_int_6] = 1'b0;
        end else begin
            p_Result_52_fu_700_p4[ap_tvar_int_6] = tmp_V_18_cast_fu_696_p1[ap_const_lv32_C - ap_tvar_int_6];
        end
    end
end


assign p_Result_53_fu_710_p3 = {{ap_const_lv19_7FFFF}, {p_Result_52_fu_700_p4}};
assign p_Result_54_fu_2644_p4 = {{{isneg_15_reg_3437}, {p_Repl2_14_trunc_fu_2639_p2}}, {ap_const_lv23_0}};
assign p_Result_55_fu_2661_p4 = {{{isneg_15_reg_3437}, {p_Repl2_14_trunc_fu_2639_p2}}, {man_V_32_fu_2656_p2}};

integer ap_tvar_int_7;

always @ (tmp_V_19_cast_fu_758_p1) begin
    for (ap_tvar_int_7 = 29 - 1; ap_tvar_int_7 >= 0; ap_tvar_int_7 = ap_tvar_int_7 - 1) begin
        if (ap_tvar_int_7 > ap_const_lv32_1C - ap_const_lv32_0) begin
            p_Result_56_fu_762_p4[ap_tvar_int_7] = 1'b0;
        end else begin
            p_Result_56_fu_762_p4[ap_tvar_int_7] = tmp_V_19_cast_fu_758_p1[ap_const_lv32_1C - ap_tvar_int_7];
        end
    end
end


assign p_Result_57_fu_772_p3 = {{ap_const_lv3_7}, {p_Result_56_fu_762_p4}};
assign p_Result_58_fu_2694_p4 = {{{isneg_16_reg_3464}, {p_Repl2_18_trunc_fu_2689_p2}}, {ap_const_lv23_0}};
assign p_Result_59_fu_2707_p4 = {{{isneg_16_reg_3464}, {p_Repl2_18_trunc_fu_2689_p2}}, {man_V_33_fu_2703_p2}};
wire [5-1:0] p_Result_8_fu_1245_p4_vh_buf;
wire [5-1:0] p_Result_8_fu_1245_p4_vl_buf;
wire [17-1:0] p_Result_8_fu_1245_p4_vi_buf;
wire [17-1:0] p_Result_8_fu_1245_p4_vo_buf;
wire [17-1:0] p_Result_8_fu_1245_p4_vi_r;
wire [5:0] p_Result_8_fu_1245_p4_length;
wire [17-1:0] p_Result_8_fu_1245_p4_mask;

genvar ap_tvar_int_8;
generate
    for (ap_tvar_int_8 = 0; ap_tvar_int_8 < 17; ap_tvar_int_8 = ap_tvar_int_8 + 1) begin :p_Result_8_fu_1245_p4_label0
        assign p_Result_8_fu_1245_p4_vi_r[ap_tvar_int_8] = tmp_V_16_cast_reg_3389[17-1-ap_tvar_int_8];
    end
endgenerate

assign p_Result_8_fu_1245_p4_vh_buf = (tmp_123_fu_1239_p2 >= tmp_121_fu_1231_p3)? tmp_123_fu_1239_p2 : (17 -1- tmp_123_fu_1239_p2);
assign p_Result_8_fu_1245_p4_vl_buf = (tmp_123_fu_1239_p2 >= tmp_121_fu_1231_p3)? tmp_121_fu_1231_p3 : (17 -1-tmp_121_fu_1231_p3);
assign p_Result_8_fu_1245_p4_vi_buf = (tmp_123_fu_1239_p2 >= tmp_121_fu_1231_p3)? tmp_V_16_cast_reg_3389 : p_Result_8_fu_1245_p4_vi_r;
assign p_Result_8_fu_1245_p4_length = p_Result_8_fu_1245_p4_vh_buf - p_Result_8_fu_1245_p4_vl_buf + 1'b1;
assign p_Result_8_fu_1245_p4_mask = ~({17{1'b1}} << p_Result_8_fu_1245_p4_length);
assign p_Result_8_fu_1245_p4 = (p_Result_8_fu_1245_p4_vi_buf >> p_Result_8_fu_1245_p4_vl_buf) & p_Result_8_fu_1245_p4_mask;

wire [5-1:0] p_Result_s_fu_1176_p4_vh_buf;
wire [5-1:0] p_Result_s_fu_1176_p4_vl_buf;
wire [17-1:0] p_Result_s_fu_1176_p4_vi_buf;
wire [17-1:0] p_Result_s_fu_1176_p4_vo_buf;
wire [17-1:0] p_Result_s_fu_1176_p4_vi_r;
wire [5:0] p_Result_s_fu_1176_p4_length;
wire [17-1:0] p_Result_s_fu_1176_p4_mask;

genvar ap_tvar_int_9;
generate
    for (ap_tvar_int_9 = 0; ap_tvar_int_9 < 17; ap_tvar_int_9 = ap_tvar_int_9 + 1) begin :p_Result_s_fu_1176_p4_label0
        assign p_Result_s_fu_1176_p4_vi_r[ap_tvar_int_9] = tmp_V_15_cast_reg_3362[17-1-ap_tvar_int_9];
    end
endgenerate

assign p_Result_s_fu_1176_p4_vh_buf = (tmp_110_fu_1170_p2 >= tmp_108_fu_1162_p3)? tmp_110_fu_1170_p2 : (17 -1- tmp_110_fu_1170_p2);
assign p_Result_s_fu_1176_p4_vl_buf = (tmp_110_fu_1170_p2 >= tmp_108_fu_1162_p3)? tmp_108_fu_1162_p3 : (17 -1-tmp_108_fu_1162_p3);
assign p_Result_s_fu_1176_p4_vi_buf = (tmp_110_fu_1170_p2 >= tmp_108_fu_1162_p3)? tmp_V_15_cast_reg_3362 : p_Result_s_fu_1176_p4_vi_r;
assign p_Result_s_fu_1176_p4_length = p_Result_s_fu_1176_p4_vh_buf - p_Result_s_fu_1176_p4_vl_buf + 1'b1;
assign p_Result_s_fu_1176_p4_mask = ~({17{1'b1}} << p_Result_s_fu_1176_p4_length);
assign p_Result_s_fu_1176_p4 = (p_Result_s_fu_1176_p4_vi_buf >> p_Result_s_fu_1176_p4_vl_buf) & p_Result_s_fu_1176_p4_mask;

assign p_Val2_12_mux_fu_3239_p3 = ((brmerge_i_i_fu_3219_p2)? ap_const_lv28_7FFFFFF: p_Val2_6_reg_4021);
assign p_Val2_6_fu_3077_p3 = ((sel_tmp54_reg_3945)? p_5_fu_3070_p3: sel_tmp52_reg_3940);
assign p_Val2_s_fu_3246_p3 = ((tmp_76_reg_3631)? ap_const_lv28_0: ap_const_lv28_8000000);
assign p_s_fu_2735_p3 = ((isneg_reg_3486)? ap_const_lv16_FFFF: ap_const_lv16_0);
assign pos1_fu_2344_p2 = (F2_6_reg_3639 + ap_const_lv12_2);
assign pos2_fu_2353_p2 = (F2_6_reg_3639 + ap_const_lv12_3);
assign qam_ph_i_V = qam_ph_i_V1data_reg;
assign qam_ph_q_V = qam_ph_q_V1data_reg;
assign r_V_fu_2430_p2 = ap_const_lv54_3FFFFFFFFFFFFF >> tmp_96_fu_2421_p1;
assign res_V_11_fu_2670_p3 = ((tmp_140_reg_3725)? p_Result_54_fu_2644_p4: p_Result_55_fu_2661_p4);
assign res_V_14_fu_2716_p3 = ((tmp_152_reg_3740)? p_Result_58_fu_2694_p4: p_Result_59_fu_2707_p4);
assign res_V_5_fu_2570_p3 = ((tmp_117_reg_3695)? p_Result_46_fu_2544_p4: p_Result_47_fu_2561_p4);
assign res_V_8_fu_2620_p3 = ((tmp_129_reg_3710)? p_Result_50_fu_2594_p4: p_Result_51_fu_2611_p4);
assign res_V_fu_2520_p3 = ((tmp_105_reg_3680)? p_Result_42_fu_2494_p4: p_Result_43_fu_2511_p4);
assign rev1_fu_3091_p2 = (tmp_176_reg_3969 ^ ap_const_lv1_1);
assign rev_fu_2376_p2 = (tmp_174_fu_2368_p3 ^ ap_const_lv1_1);
assign sel_tmp102_demorgan_fu_2202_p2 = (tmp_63_reg_3597 | tmp_66_reg_3610);
assign sel_tmp10_fu_1760_p2 = (tmp_20_fu_1696_p2 & sel_tmp9_fu_1755_p2);
assign sel_tmp110_demorgan_fu_2218_p2 = (sel_tmp102_demorgan_fu_2202_p2 | tmp_64_fu_2117_p2);
assign sel_tmp11_fu_1771_p2 = (sel_tmp30_demorgan_fu_1766_p2 ^ ap_const_lv1_1);
assign sel_tmp12_fu_1777_p2 = (tmp_17_fu_1669_p2 & sel_tmp11_fu_1771_p2);
assign sel_tmp13_fu_2809_p2 = (sel_tmp12_reg_3818 & tmp_21_reg_3797);
assign sel_tmp14_demorgan_fu_1627_p2 = (sel_tmp6_demorgan_fu_1610_p2 | tmp_8_fu_1513_p2);
assign sel_tmp14_fu_1789_p2 = (sel_tmp38_demorgan_fu_1783_p2 ^ ap_const_lv1_1);
assign sel_tmp15_fu_1795_p2 = (icmp1_fu_1721_p2 & sel_tmp14_fu_1789_p2);
assign sel_tmp165_demorgan_fu_3265_p2 = (tmp_76_reg_3631 | tmp_89_reg_3674);
assign sel_tmp16_fu_2813_p2 = (tmp_21_reg_3797 ^ ap_const_lv1_1);
assign sel_tmp17_fu_2818_p2 = (sel_tmp12_reg_3818 & sel_tmp16_fu_2813_p2);
assign sel_tmp18_fu_1901_p2 = (tmp_32_reg_3547 ^ ap_const_lv1_1);
assign sel_tmp19_fu_1906_p2 = (tmp_36_fu_1852_p2 & sel_tmp18_fu_1901_p2);
assign sel_tmp1_fu_1599_p2 = (tmp_6_reg_3497 ^ ap_const_lv1_1);
assign sel_tmp20_fu_1917_p2 = (sel_tmp54_demorgan_fu_1912_p2 ^ ap_const_lv1_1);
assign sel_tmp21_fu_1923_p2 = (tmp_33_fu_1825_p2 & sel_tmp20_fu_1917_p2);
assign sel_tmp22_fu_2876_p2 = (sel_tmp21_reg_3855 & tmp_37_reg_3834);
assign sel_tmp23_fu_1935_p2 = (sel_tmp62_demorgan_fu_1929_p2 ^ ap_const_lv1_1);
assign sel_tmp24_fu_1941_p2 = (tmp_38_fu_1867_p2 & sel_tmp23_fu_1935_p2);
assign sel_tmp25_fu_2880_p2 = (tmp_37_reg_3834 ^ ap_const_lv1_1);
assign sel_tmp26_fu_2885_p2 = (sel_tmp21_reg_3855 & sel_tmp25_fu_2880_p2);
assign sel_tmp27_fu_2047_p2 = (tmp_47_reg_3572 ^ ap_const_lv1_1);
assign sel_tmp28_fu_2052_p2 = (tmp_51_fu_1998_p2 & sel_tmp27_fu_2047_p2);
assign sel_tmp29_fu_2063_p2 = (sel_tmp78_demorgan_fu_2058_p2 ^ ap_const_lv1_1);
assign sel_tmp2_fu_1604_p2 = (tmp_1_fu_1540_p2 & sel_tmp1_fu_1599_p2);
assign sel_tmp30_demorgan_fu_1766_p2 = (tmp_16_reg_3522 | tmp_20_fu_1696_p2);
assign sel_tmp30_fu_2069_p2 = (tmp_48_fu_1971_p2 & sel_tmp29_fu_2063_p2);
assign sel_tmp31_fu_2943_p2 = (sel_tmp30_reg_3892 & tmp_52_reg_3871);
assign sel_tmp32_fu_2081_p2 = (sel_tmp86_demorgan_fu_2075_p2 ^ ap_const_lv1_1);
assign sel_tmp33_fu_2087_p2 = (tmp_53_fu_2013_p2 & sel_tmp32_fu_2081_p2);
assign sel_tmp34_fu_2947_p2 = (tmp_52_reg_3871 ^ ap_const_lv1_1);
assign sel_tmp35_fu_2952_p2 = (sel_tmp30_reg_3892 & sel_tmp34_fu_2947_p2);
assign sel_tmp36_fu_2192_p2 = (tmp_63_reg_3597 ^ ap_const_lv1_1);
assign sel_tmp37_fu_2197_p2 = (tmp_66_reg_3610 & sel_tmp36_fu_2192_p2);
assign sel_tmp38_demorgan_fu_1783_p2 = (sel_tmp30_demorgan_fu_1766_p2 | tmp_17_fu_1669_p2);
assign sel_tmp38_fu_2206_p2 = (sel_tmp102_demorgan_fu_2202_p2 ^ ap_const_lv1_1);
assign sel_tmp39_fu_2212_p2 = (tmp_64_fu_2117_p2 & sel_tmp38_fu_2206_p2);
assign sel_tmp3_fu_1639_p2 = (icmp_fu_1565_p2 & sel_tmp_fu_1633_p2);
assign sel_tmp40_fu_3010_p2 = (sel_tmp39_reg_3929 & tmp_67_reg_3908);
assign sel_tmp41_fu_2224_p2 = (sel_tmp110_demorgan_fu_2218_p2 ^ ap_const_lv1_1);
assign sel_tmp42_fu_2230_p2 = (icmp2_fu_2158_p2 & sel_tmp41_fu_2224_p2);
assign sel_tmp43_fu_3014_p2 = (tmp_67_reg_3908 ^ ap_const_lv1_1);
assign sel_tmp44_fu_3019_p2 = (sel_tmp39_reg_3929 & sel_tmp43_fu_3014_p2);
assign sel_tmp45_fu_2283_p3 = ((tmp_81_reg_3662)? tmp_170_reg_3668: ap_const_lv28_0);
assign sel_tmp46_fu_2289_p2 = (tmp_81_reg_3662 ^ ap_const_lv1_1);
assign sel_tmp47_fu_2294_p2 = (tmp_78_reg_3646 & sel_tmp46_fu_2289_p2);
assign sel_tmp48_fu_2299_p2 = (sel_tmp47_fu_2294_p2 & tmp_82_fu_2245_p2);
assign sel_tmp49_fu_2305_p3 = ((sel_tmp48_fu_2299_p2)? tmp_171_fu_2266_p1: sel_tmp45_fu_2283_p3);
assign sel_tmp4_fu_2746_p2 = (tmp_4_reg_3760 ^ ap_const_lv1_1);
assign sel_tmp50_fu_2313_p2 = ($signed(F2_6_reg_3639) < $signed(12'b11010)? 1'b1: 1'b0);
assign sel_tmp51_fu_2318_p2 = (sel_tmp50_fu_2313_p2 & tmp_83_fu_2251_p2);
assign sel_tmp52_fu_2324_p3 = ((sel_tmp51_fu_2318_p2)? tmp_172_fu_2279_p1: sel_tmp49_fu_2305_p3);
assign sel_tmp53_fu_2332_p2 = (tmp_82_fu_2245_p2 ^ ap_const_lv1_1);
assign sel_tmp54_demorgan_fu_1912_p2 = (tmp_32_reg_3547 | tmp_36_fu_1852_p2);
assign sel_tmp54_fu_2338_p2 = (sel_tmp47_fu_2294_p2 & sel_tmp53_fu_2332_p2);
assign sel_tmp55_fu_2459_p2 = (tmp_91_fu_2362_p2 ^ ap_const_lv1_1);
assign sel_tmp56_fu_3127_p2 = (tmp2_reg_3995 | Range1_all_zeros_1_reg_3990);
assign sel_tmp57_fu_2477_p2 = (tmp_174_fu_2368_p3 | tmp_100_not_fu_2471_p2);
assign sel_tmp58_fu_3131_p2 = (tmp3_reg_4001 & tmp_91_reg_3950);
assign sel_tmp59_fu_3135_p3 = ((sel_tmp58_fu_3131_p2)? Range1_all_zeros_fu_3117_p2: sel_tmp56_fu_3127_p2);
assign sel_tmp5_fu_2751_p2 = (sel_tmp7_reg_3781 & sel_tmp4_fu_2746_p2);
assign sel_tmp60_fu_3143_p2 = (tmp_91_reg_3950 & or_cond89_i_fu_3108_p2);
assign sel_tmp61_fu_3156_p3 = ((sel_tmp58_fu_3131_p2)? Range1_all_ones_1_reg_3962: tmp2_reg_3995);
assign sel_tmp62_demorgan_fu_1929_p2 = (sel_tmp54_demorgan_fu_1912_p2 | tmp_33_fu_1825_p2);
assign sel_tmp62_fu_3170_p2 = (tmp_91_reg_3950 | newsignbit_fu_3083_p3);
assign sel_tmp63_fu_3258_p3 = ((tmp_101_fu_3253_p2)? p_Val2_s_fu_3246_p3: p_Val2_6_reg_4021);
assign sel_tmp64_fu_3269_p3 = ((sel_tmp165_demorgan_fu_3265_p2)? sel_tmp63_fu_3258_p3: p_Val2_6_reg_4021);
assign sel_tmp65_fu_3276_p2 = (tmp_76_reg_3631 ^ ap_const_lv1_1);
assign sel_tmp66_fu_3287_p2 = (tmp5_fu_3281_p2 & tmp_89_reg_3674);
assign sel_tmp6_demorgan_fu_1610_p2 = (tmp_6_reg_3497 | tmp_1_fu_1540_p2);
assign sel_tmp6_fu_1615_p2 = (sel_tmp6_demorgan_fu_1610_p2 ^ ap_const_lv1_1);
assign sel_tmp78_demorgan_fu_2058_p2 = (tmp_47_reg_3572 | tmp_51_fu_1998_p2);
assign sel_tmp7_fu_1621_p2 = (tmp_8_fu_1513_p2 & sel_tmp6_fu_1615_p2);
assign sel_tmp86_demorgan_fu_2075_p2 = (sel_tmp78_demorgan_fu_2058_p2 | tmp_48_fu_1971_p2);
assign sel_tmp8_fu_2742_p2 = (sel_tmp7_reg_3781 & tmp_4_reg_3760);
assign sel_tmp9_fu_1755_p2 = (tmp_16_reg_3522 ^ ap_const_lv1_1);
assign sel_tmp_fu_1633_p2 = (sel_tmp14_demorgan_fu_1627_p2 ^ ap_const_lv1_1);
assign sh_amt_1_cast_fu_1692_p1 = $signed(sh_amt_1_fu_1684_p3);
assign sh_amt_1_fu_1684_p3 = ((tmp_17_fu_1669_p2)? tmp_18_fu_1674_p2: tmp_19_fu_1679_p2);
assign sh_amt_2_cast_fu_1848_p1 = $signed(sh_amt_2_fu_1840_p3);
assign sh_amt_2_fu_1840_p3 = ((tmp_33_fu_1825_p2)? tmp_34_fu_1830_p2: tmp_35_fu_1835_p2);
assign sh_amt_3_cast_fu_1994_p1 = $signed(sh_amt_3_fu_1986_p3);
assign sh_amt_3_fu_1986_p3 = ((tmp_48_fu_1971_p2)? tmp_49_fu_1976_p2: tmp_50_fu_1981_p2);
assign sh_amt_5_cast_fu_2241_p1 = $signed(sh_amt_5_fu_2236_p3);
assign sh_amt_5_fu_2236_p3 = ((tmp_78_reg_3646)? tmp_79_reg_3652: tmp_80_reg_3657);
assign sh_amt_cast_fu_1536_p1 = $signed(sh_amt_fu_1528_p3);
assign sh_amt_fu_1528_p3 = ((tmp_8_fu_1513_p2)? tmp_9_fu_1518_p2: tmp_s_fu_1523_p2);
assign sign_assign_not_fu_3224_p2 = (neg_src_reg_4028 ^ ap_const_lv1_1);
assign tmp1_fu_2395_p2 = (lD_fu_2391_p1 & rev_fu_2376_p2);
assign tmp2_fu_2465_p2 = (rev_fu_2376_p2 | sel_tmp55_fu_2459_p2);
assign tmp3_fu_2483_p2 = (tmp_98_fu_2448_p2 & sel_tmp57_fu_2477_p2);
assign tmp4_fu_3229_p2 = (overflow_reg_4034 | sign_assign_not_fu_3224_p2);
assign tmp5_fu_3281_p2 = (brmerge_fu_3234_p2 & sel_tmp65_fu_3276_p2);
assign tmp_100_fu_3192_p2 = (isneg_11_reg_3616 ^ ap_const_lv1_1);
assign tmp_100_not_fu_2471_p2 = (tmp_95_fu_2415_p2 ^ ap_const_lv1_1);
assign tmp_101_fu_3253_p2 = (tmp_76_reg_3631 | underflow_fu_3214_p2);
assign tmp_102_fu_3292_p3 = ((sel_tmp66_fu_3287_p2)? p_Val2_12_mux_fu_3239_p3: sel_tmp64_fu_3269_p3);
assign tmp_103_fu_482_p2 = (qam_d_out_i_V_preg == ap_const_lv16_0? 1'b1: 1'b0);

always @ (p_Result_41_fu_524_p3) begin
    if (p_Result_41_fu_524_p3[0] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd0;
    end else if (p_Result_41_fu_524_p3[1] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd1;
    end else if (p_Result_41_fu_524_p3[2] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd2;
    end else if (p_Result_41_fu_524_p3[3] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd3;
    end else if (p_Result_41_fu_524_p3[4] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd4;
    end else if (p_Result_41_fu_524_p3[5] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd5;
    end else if (p_Result_41_fu_524_p3[6] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd6;
    end else if (p_Result_41_fu_524_p3[7] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd7;
    end else if (p_Result_41_fu_524_p3[8] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd8;
    end else if (p_Result_41_fu_524_p3[9] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd9;
    end else if (p_Result_41_fu_524_p3[10] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd10;
    end else if (p_Result_41_fu_524_p3[11] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd11;
    end else if (p_Result_41_fu_524_p3[12] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd12;
    end else if (p_Result_41_fu_524_p3[13] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd13;
    end else if (p_Result_41_fu_524_p3[14] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd14;
    end else if (p_Result_41_fu_524_p3[15] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd15;
    end else if (p_Result_41_fu_524_p3[16] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd16;
    end else if (p_Result_41_fu_524_p3[17] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd17;
    end else if (p_Result_41_fu_524_p3[18] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd18;
    end else if (p_Result_41_fu_524_p3[19] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd19;
    end else if (p_Result_41_fu_524_p3[20] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd20;
    end else if (p_Result_41_fu_524_p3[21] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd21;
    end else if (p_Result_41_fu_524_p3[22] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd22;
    end else if (p_Result_41_fu_524_p3[23] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd23;
    end else if (p_Result_41_fu_524_p3[24] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd24;
    end else if (p_Result_41_fu_524_p3[25] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd25;
    end else if (p_Result_41_fu_524_p3[26] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd26;
    end else if (p_Result_41_fu_524_p3[27] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd27;
    end else if (p_Result_41_fu_524_p3[28] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd28;
    end else if (p_Result_41_fu_524_p3[29] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd29;
    end else if (p_Result_41_fu_524_p3[30] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd30;
    end else if (p_Result_41_fu_524_p3[31] == 1'b1) begin
        tmp_104_fu_532_p3 = 32'd31;
    end else begin
        tmp_104_fu_532_p3 = 32'd32;
    end
end


assign tmp_105_fu_1145_p2 = (tmp_104_reg_3367 == ap_const_lv32_10? 1'b1: 1'b0);
assign tmp_106_fu_1150_p2 = ($signed(j_fu_1140_p2) > $signed(32'b10111)? 1'b1: 1'b0);
assign tmp_107_fu_1156_p2 = (j_fu_1140_p2 + ap_const_lv32_FFFFFFE9);
assign tmp_108_fu_1162_p3 = ((tmp_106_fu_1150_p2)? tmp_107_fu_1156_p2: ap_const_lv32_0);
assign tmp_109_fu_2003_p1 = man_V_12_fu_1964_p3[11:0];
assign tmp_110_fu_1170_p2 = (j_fu_1140_p2 + ap_const_lv32_FFFFFFFF);
assign tmp_111_fu_1185_p2 = ($signed(j_fu_1140_p2) < $signed(32'b10111)? 1'b1: 1'b0);
assign tmp_112_fu_1195_p2 = (ap_const_lv23_17 - tmp_179_fu_1191_p1);
assign tmp_113_fu_2527_p1 = res_V_fu_2520_p3;
assign tmp_114_fu_544_p2 = (qam_d_out_q_V_preg == ap_const_lv16_0? 1'b1: 1'b0);

always @ (p_Result_45_fu_586_p3) begin
    if (p_Result_45_fu_586_p3[0] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd0;
    end else if (p_Result_45_fu_586_p3[1] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd1;
    end else if (p_Result_45_fu_586_p3[2] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd2;
    end else if (p_Result_45_fu_586_p3[3] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd3;
    end else if (p_Result_45_fu_586_p3[4] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd4;
    end else if (p_Result_45_fu_586_p3[5] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd5;
    end else if (p_Result_45_fu_586_p3[6] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd6;
    end else if (p_Result_45_fu_586_p3[7] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd7;
    end else if (p_Result_45_fu_586_p3[8] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd8;
    end else if (p_Result_45_fu_586_p3[9] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd9;
    end else if (p_Result_45_fu_586_p3[10] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd10;
    end else if (p_Result_45_fu_586_p3[11] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd11;
    end else if (p_Result_45_fu_586_p3[12] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd12;
    end else if (p_Result_45_fu_586_p3[13] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd13;
    end else if (p_Result_45_fu_586_p3[14] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd14;
    end else if (p_Result_45_fu_586_p3[15] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd15;
    end else if (p_Result_45_fu_586_p3[16] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd16;
    end else if (p_Result_45_fu_586_p3[17] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd17;
    end else if (p_Result_45_fu_586_p3[18] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd18;
    end else if (p_Result_45_fu_586_p3[19] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd19;
    end else if (p_Result_45_fu_586_p3[20] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd20;
    end else if (p_Result_45_fu_586_p3[21] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd21;
    end else if (p_Result_45_fu_586_p3[22] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd22;
    end else if (p_Result_45_fu_586_p3[23] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd23;
    end else if (p_Result_45_fu_586_p3[24] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd24;
    end else if (p_Result_45_fu_586_p3[25] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd25;
    end else if (p_Result_45_fu_586_p3[26] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd26;
    end else if (p_Result_45_fu_586_p3[27] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd27;
    end else if (p_Result_45_fu_586_p3[28] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd28;
    end else if (p_Result_45_fu_586_p3[29] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd29;
    end else if (p_Result_45_fu_586_p3[30] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd30;
    end else if (p_Result_45_fu_586_p3[31] == 1'b1) begin
        tmp_115_fu_594_p3 = 32'd31;
    end else begin
        tmp_115_fu_594_p3 = 32'd32;
    end
end


assign tmp_116_fu_2029_p1 = tmp_56_fu_2023_p2[11:0];
assign tmp_117_fu_1214_p2 = (tmp_115_reg_3394 == ap_const_lv32_10? 1'b1: 1'b0);
assign tmp_118_fu_2043_p1 = tmp_58_fu_2037_p2[11:0];
assign tmp_119_fu_1219_p2 = ($signed(j_1_fu_1209_p2) > $signed(32'b10111)? 1'b1: 1'b0);
assign tmp_11_fu_822_p1 = ireg_V_fu_792_p1[51:0];
assign tmp_120_fu_1225_p2 = (j_1_fu_1209_p2 + ap_const_lv32_FFFFFFE9);
assign tmp_121_fu_1231_p3 = ((tmp_119_fu_1219_p2)? tmp_120_fu_1225_p2: ap_const_lv32_0);
assign tmp_122_fu_980_p1 = ireg_V_4_fu_976_p1[62:0];
assign tmp_123_fu_1239_p2 = (j_1_fu_1209_p2 + ap_const_lv32_FFFFFFFF);
assign tmp_124_fu_1254_p2 = ($signed(j_1_fu_1209_p2) < $signed(32'b10111)? 1'b1: 1'b0);
assign tmp_125_fu_1264_p2 = (ap_const_lv23_17 - tmp_182_fu_1260_p1);
assign tmp_126_fu_2577_p1 = res_V_5_fu_2570_p3;
assign tmp_127_fu_606_p2 = (qam_ph_out_i_V_preg == ap_const_lv12_0? 1'b1: 1'b0);

always @ (p_Result_49_fu_648_p3) begin
    if (p_Result_49_fu_648_p3[0] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd0;
    end else if (p_Result_49_fu_648_p3[1] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd1;
    end else if (p_Result_49_fu_648_p3[2] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd2;
    end else if (p_Result_49_fu_648_p3[3] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd3;
    end else if (p_Result_49_fu_648_p3[4] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd4;
    end else if (p_Result_49_fu_648_p3[5] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd5;
    end else if (p_Result_49_fu_648_p3[6] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd6;
    end else if (p_Result_49_fu_648_p3[7] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd7;
    end else if (p_Result_49_fu_648_p3[8] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd8;
    end else if (p_Result_49_fu_648_p3[9] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd9;
    end else if (p_Result_49_fu_648_p3[10] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd10;
    end else if (p_Result_49_fu_648_p3[11] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd11;
    end else if (p_Result_49_fu_648_p3[12] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd12;
    end else if (p_Result_49_fu_648_p3[13] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd13;
    end else if (p_Result_49_fu_648_p3[14] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd14;
    end else if (p_Result_49_fu_648_p3[15] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd15;
    end else if (p_Result_49_fu_648_p3[16] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd16;
    end else if (p_Result_49_fu_648_p3[17] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd17;
    end else if (p_Result_49_fu_648_p3[18] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd18;
    end else if (p_Result_49_fu_648_p3[19] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd19;
    end else if (p_Result_49_fu_648_p3[20] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd20;
    end else if (p_Result_49_fu_648_p3[21] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd21;
    end else if (p_Result_49_fu_648_p3[22] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd22;
    end else if (p_Result_49_fu_648_p3[23] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd23;
    end else if (p_Result_49_fu_648_p3[24] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd24;
    end else if (p_Result_49_fu_648_p3[25] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd25;
    end else if (p_Result_49_fu_648_p3[26] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd26;
    end else if (p_Result_49_fu_648_p3[27] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd27;
    end else if (p_Result_49_fu_648_p3[28] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd28;
    end else if (p_Result_49_fu_648_p3[29] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd29;
    end else if (p_Result_49_fu_648_p3[30] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd30;
    end else if (p_Result_49_fu_648_p3[31] == 1'b1) begin
        tmp_128_fu_656_p3 = 32'd31;
    end else begin
        tmp_128_fu_656_p3 = 32'd32;
    end
end


assign tmp_129_fu_1283_p2 = (tmp_128_reg_3421 == ap_const_lv32_C? 1'b1: 1'b0);
assign tmp_12_fu_1589_p0 = $signed(tmp_14_fu_1545_p1);
assign tmp_12_fu_1589_p1 = sh_amt_cast_fu_1536_p1;
assign tmp_12_fu_1589_p2 = tmp_12_fu_1589_p0 << tmp_12_fu_1589_p1;
assign tmp_130_fu_1288_p2 = ($signed(j_2_fu_1278_p2) > $signed(32'b10111)? 1'b1: 1'b0);
assign tmp_131_fu_1294_p2 = (j_2_fu_1278_p2 + ap_const_lv32_FFFFFFE9);
assign tmp_132_fu_1300_p3 = ((tmp_130_fu_1288_p2)? tmp_131_fu_1294_p2: ap_const_lv32_0);
assign tmp_133_fu_1308_p2 = (j_2_fu_1278_p2 + ap_const_lv32_FFFFFFFF);
assign tmp_134_fu_1006_p1 = ireg_V_4_fu_976_p1[51:0];
assign tmp_135_fu_1323_p2 = ($signed(j_2_fu_1278_p2) < $signed(32'b10111)? 1'b1: 1'b0);
assign tmp_136_fu_1333_p2 = (ap_const_lv23_17 - tmp_185_fu_1329_p1);
assign tmp_137_fu_2627_p1 = res_V_8_fu_2620_p3;
assign tmp_138_fu_668_p2 = (qam_ph_out_q_V_preg == ap_const_lv12_0? 1'b1: 1'b0);

always @ (p_Result_53_fu_710_p3) begin
    if (p_Result_53_fu_710_p3[0] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd0;
    end else if (p_Result_53_fu_710_p3[1] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd1;
    end else if (p_Result_53_fu_710_p3[2] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd2;
    end else if (p_Result_53_fu_710_p3[3] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd3;
    end else if (p_Result_53_fu_710_p3[4] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd4;
    end else if (p_Result_53_fu_710_p3[5] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd5;
    end else if (p_Result_53_fu_710_p3[6] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd6;
    end else if (p_Result_53_fu_710_p3[7] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd7;
    end else if (p_Result_53_fu_710_p3[8] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd8;
    end else if (p_Result_53_fu_710_p3[9] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd9;
    end else if (p_Result_53_fu_710_p3[10] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd10;
    end else if (p_Result_53_fu_710_p3[11] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd11;
    end else if (p_Result_53_fu_710_p3[12] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd12;
    end else if (p_Result_53_fu_710_p3[13] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd13;
    end else if (p_Result_53_fu_710_p3[14] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd14;
    end else if (p_Result_53_fu_710_p3[15] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd15;
    end else if (p_Result_53_fu_710_p3[16] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd16;
    end else if (p_Result_53_fu_710_p3[17] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd17;
    end else if (p_Result_53_fu_710_p3[18] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd18;
    end else if (p_Result_53_fu_710_p3[19] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd19;
    end else if (p_Result_53_fu_710_p3[20] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd20;
    end else if (p_Result_53_fu_710_p3[21] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd21;
    end else if (p_Result_53_fu_710_p3[22] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd22;
    end else if (p_Result_53_fu_710_p3[23] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd23;
    end else if (p_Result_53_fu_710_p3[24] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd24;
    end else if (p_Result_53_fu_710_p3[25] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd25;
    end else if (p_Result_53_fu_710_p3[26] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd26;
    end else if (p_Result_53_fu_710_p3[27] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd27;
    end else if (p_Result_53_fu_710_p3[28] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd28;
    end else if (p_Result_53_fu_710_p3[29] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd29;
    end else if (p_Result_53_fu_710_p3[30] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd30;
    end else if (p_Result_53_fu_710_p3[31] == 1'b1) begin
        tmp_139_fu_718_p3 = 32'd31;
    end else begin
        tmp_139_fu_718_p3 = 32'd32;
    end
end


assign tmp_13_fu_864_p1 = $unsigned(exp_tmp_V_1_fu_854_p4);
assign tmp_140_fu_1352_p2 = (tmp_139_reg_3448 == ap_const_lv32_C? 1'b1: 1'b0);
assign tmp_141_cast_fu_1201_p3 = ((tmp_111_fu_1185_p2)? tmp_112_fu_1195_p2: ap_const_lv23_0);
assign tmp_141_fu_1357_p2 = ($signed(j_3_fu_1347_p2) > $signed(32'b10111)? 1'b1: 1'b0);
assign tmp_142_fu_2138_p1 = man_V_15_fu_2110_p3[1:0];
assign tmp_143_fu_1363_p2 = (j_3_fu_1347_p2 + ap_const_lv32_FFFFFFE9);
assign tmp_144_fu_1369_p3 = ((tmp_141_fu_1357_p2)? tmp_143_fu_1363_p2: ap_const_lv32_0);
assign tmp_145_fu_1377_p2 = (j_3_fu_1347_p2 + ap_const_lv32_FFFFFFFF);
assign tmp_146_fu_2148_p4 = {{F2_7_fu_2127_p3[ap_const_lv32_B : ap_const_lv32_1]}};
assign tmp_147_fu_1392_p2 = ($signed(j_3_fu_1347_p2) < $signed(32'b10111)? 1'b1: 1'b0);
assign tmp_148_fu_1402_p2 = (ap_const_lv23_17 - tmp_188_fu_1398_p1);
assign tmp_149_fu_2677_p1 = res_V_11_fu_2670_p3;
assign tmp_14_fu_1545_p1 = man_V_2_fu_1506_p3[15:0];
assign tmp_150_fu_730_p2 = (qam_loop_out_V_preg == ap_const_lv28_0? 1'b1: 1'b0);

always @ (p_Result_57_fu_772_p3) begin
    if (p_Result_57_fu_772_p3[0] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd0;
    end else if (p_Result_57_fu_772_p3[1] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd1;
    end else if (p_Result_57_fu_772_p3[2] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd2;
    end else if (p_Result_57_fu_772_p3[3] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd3;
    end else if (p_Result_57_fu_772_p3[4] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd4;
    end else if (p_Result_57_fu_772_p3[5] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd5;
    end else if (p_Result_57_fu_772_p3[6] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd6;
    end else if (p_Result_57_fu_772_p3[7] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd7;
    end else if (p_Result_57_fu_772_p3[8] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd8;
    end else if (p_Result_57_fu_772_p3[9] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd9;
    end else if (p_Result_57_fu_772_p3[10] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd10;
    end else if (p_Result_57_fu_772_p3[11] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd11;
    end else if (p_Result_57_fu_772_p3[12] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd12;
    end else if (p_Result_57_fu_772_p3[13] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd13;
    end else if (p_Result_57_fu_772_p3[14] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd14;
    end else if (p_Result_57_fu_772_p3[15] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd15;
    end else if (p_Result_57_fu_772_p3[16] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd16;
    end else if (p_Result_57_fu_772_p3[17] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd17;
    end else if (p_Result_57_fu_772_p3[18] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd18;
    end else if (p_Result_57_fu_772_p3[19] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd19;
    end else if (p_Result_57_fu_772_p3[20] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd20;
    end else if (p_Result_57_fu_772_p3[21] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd21;
    end else if (p_Result_57_fu_772_p3[22] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd22;
    end else if (p_Result_57_fu_772_p3[23] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd23;
    end else if (p_Result_57_fu_772_p3[24] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd24;
    end else if (p_Result_57_fu_772_p3[25] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd25;
    end else if (p_Result_57_fu_772_p3[26] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd26;
    end else if (p_Result_57_fu_772_p3[27] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd27;
    end else if (p_Result_57_fu_772_p3[28] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd28;
    end else if (p_Result_57_fu_772_p3[29] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd29;
    end else if (p_Result_57_fu_772_p3[30] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd30;
    end else if (p_Result_57_fu_772_p3[31] == 1'b1) begin
        tmp_151_fu_780_p3 = 32'd31;
    end else begin
        tmp_151_fu_780_p3 = 32'd32;
    end
end


assign tmp_152_fu_1421_p2 = (tmp_151_reg_3475 == ap_const_lv32_1C? 1'b1: 1'b0);
assign tmp_153_fu_1426_p2 = ($signed(j_4_fu_1416_p2) > $signed(32'b10111)? 1'b1: 1'b0);
assign tmp_154_fu_2174_p1 = tmp_70_fu_2168_p2[1:0];
assign tmp_155_cast_fu_1270_p3 = ((tmp_124_fu_1254_p2)? tmp_125_fu_1264_p2: ap_const_lv23_0);
assign tmp_155_fu_1432_p2 = (j_4_fu_1416_p2 + ap_const_lv32_FFFFFFE9);
assign tmp_156_fu_1438_p3 = ((tmp_153_fu_1426_p2)? tmp_155_fu_1432_p2: ap_const_lv32_0);
assign tmp_157_fu_1446_p2 = (j_4_fu_1416_p2 + ap_const_lv32_FFFFFFFF);
assign tmp_158_fu_2188_p1 = tmp_72_fu_2182_p2[1:0];
assign tmp_159_fu_1465_p2 = ($signed(j_4_fu_1416_p2) < $signed(32'b10111)? 1'b1: 1'b0);
assign tmp_15_fu_1645_p3 = {{ap_const_lv1_1}, {tmp_43_reg_3517}};
assign tmp_160_fu_1475_p2 = (ap_const_lv23_17 - tmp_192_fu_1471_p1);
assign tmp_161_fu_2723_p1 = res_V_14_fu_2716_p3;
assign tmp_167_fu_1032_p1 = ireg_V_5_fu_1028_p1[62:0];
assign tmp_169_cast_fu_1339_p3 = ((tmp_135_fu_1323_p2)? tmp_136_fu_1333_p2: ap_const_lv23_0);
assign tmp_169_fu_1064_p1 = ireg_V_5_fu_1028_p1[51:0];
assign tmp_16_fu_872_p2 = (tmp_30_fu_842_p1 == ap_const_lv63_0? 1'b1: 1'b0);
assign tmp_170_fu_1130_p1 = man_V_28_fu_1086_p3[27:0];
assign tmp_171_fu_2266_p1 = tmp_86_fu_2261_p2[27:0];
assign tmp_172_fu_2279_p1 = tmp_88_fu_2273_p2[27:0];
assign tmp_174_fu_2368_p3 = pos1_fu_2344_p2[ap_const_lv32_B];
assign tmp_178_fu_540_p1 = tmp_104_fu_532_p3[7:0];
assign tmp_179_fu_1191_p1 = j_fu_1140_p2[22:0];
assign tmp_17_fu_1669_p2 = ($signed(F2_1_reg_3528) > $signed(12'b1101)? 1'b1: 1'b0);
assign tmp_181_fu_602_p1 = tmp_115_fu_594_p3[7:0];
assign tmp_182_fu_1260_p1 = j_1_fu_1209_p2[22:0];
assign tmp_183_cast_fu_1408_p3 = ((tmp_147_fu_1392_p2)? tmp_148_fu_1402_p2: ap_const_lv23_0);
assign tmp_184_fu_664_p1 = tmp_128_fu_656_p3[7:0];
assign tmp_185_fu_1329_p1 = j_2_fu_1278_p2[22:0];
assign tmp_187_fu_726_p1 = tmp_139_fu_718_p3[7:0];
assign tmp_188_fu_1398_p1 = j_3_fu_1347_p2[22:0];
assign tmp_18_fu_1674_p2 = (F2_1_reg_3528 + ap_const_lv12_FF3);
assign tmp_190_fu_788_p1 = tmp_151_fu_780_p3[7:0];
assign tmp_192_fu_1471_p1 = j_4_fu_1416_p2[22:0];
assign tmp_197_cast_fu_1481_p3 = ((tmp_159_fu_1465_p2)? tmp_160_fu_1475_p2: ap_const_lv23_0);
assign tmp_19_fu_1679_p2 = (ap_const_lv12_D - F2_1_reg_3528);
assign tmp_1_fu_1540_p2 = (F2_reg_3503 == ap_const_lv12_D? 1'b1: 1'b0);
assign tmp_20_fu_1696_p2 = (F2_1_reg_3528 == ap_const_lv12_D? 1'b1: 1'b0);
assign tmp_21_fu_1705_p2 = (sh_amt_1_fu_1684_p3 < ap_const_lv12_36? 1'b1: 1'b0);
assign tmp_22_fu_1555_p4 = {{sh_amt_fu_1528_p3[ap_const_lv32_B : ap_const_lv32_4]}};
assign tmp_23_fu_1727_p0 = sh_amt_1_cast_fu_1692_p1;
assign tmp_23_fu_1727_p1 = $unsigned(tmp_23_fu_1727_p0);
assign tmp_24_fu_1581_p1 = tmp_5_fu_1575_p2[15:0];
assign tmp_25_fu_1731_p2 = $signed(man_V_5_fu_1662_p3) >>> tmp_23_fu_1727_p1;
assign tmp_27_fu_1595_p1 = tmp_12_fu_1589_p2[15:0];
assign tmp_28_fu_1745_p0 = $signed(tmp_46_fu_1701_p1);
assign tmp_28_fu_1745_p1 = sh_amt_1_cast_fu_1692_p1;
assign tmp_28_fu_1745_p2 = tmp_28_fu_1745_p0 << tmp_28_fu_1745_p1;
assign tmp_29_fu_910_p1 = $unsigned(exp_tmp_V_2_fu_900_p4);
assign tmp_2_fu_818_p1 = $unsigned(exp_tmp_V_fu_808_p4);
assign tmp_30_fu_842_p1 = ireg_V_1_fu_838_p1[62:0];
assign tmp_31_fu_1801_p3 = {{ap_const_lv1_1}, {tmp_74_reg_3542}};
assign tmp_32_fu_918_p2 = (tmp_69_fu_888_p1 == ap_const_lv63_0? 1'b1: 1'b0);
assign tmp_33_fu_1825_p2 = ($signed(F2_2_reg_3553) > $signed(12'b1011)? 1'b1: 1'b0);
assign tmp_34_fu_1830_p2 = (F2_2_reg_3553 + ap_const_lv12_FF5);
assign tmp_35_fu_1835_p2 = (ap_const_lv12_B - F2_2_reg_3553);
assign tmp_36_fu_1852_p2 = (F2_2_reg_3553 == ap_const_lv12_B? 1'b1: 1'b0);
assign tmp_37_fu_1861_p2 = (sh_amt_2_fu_1840_p3 < ap_const_lv12_36? 1'b1: 1'b0);
assign tmp_38_fu_1867_p2 = (sh_amt_2_fu_1840_p3 < ap_const_lv12_C? 1'b1: 1'b0);
assign tmp_39_fu_1873_p0 = sh_amt_2_cast_fu_1848_p1;
assign tmp_39_fu_1873_p1 = $unsigned(tmp_39_fu_1873_p0);
assign tmp_3_fu_796_p1 = ireg_V_fu_792_p1[62:0];
assign tmp_40_fu_1877_p2 = $signed(man_V_8_fu_1818_p3) >>> tmp_39_fu_1873_p1;
assign tmp_42_fu_1891_p0 = $signed(tmp_77_fu_1857_p1);
assign tmp_42_fu_1891_p1 = sh_amt_2_cast_fu_1848_p1;
assign tmp_42_fu_1891_p2 = tmp_42_fu_1891_p0 << tmp_42_fu_1891_p1;
assign tmp_43_fu_868_p1 = ireg_V_1_fu_838_p1[51:0];
assign tmp_44_fu_956_p1 = $unsigned(exp_tmp_V_3_fu_946_p4);
assign tmp_45_fu_1947_p3 = {{ap_const_lv1_1}, {tmp_99_reg_3567}};
assign tmp_46_fu_1701_p1 = man_V_5_fu_1662_p3[15:0];
assign tmp_47_fu_964_p2 = (tmp_93_fu_934_p1 == ap_const_lv63_0? 1'b1: 1'b0);
assign tmp_48_fu_1971_p2 = ($signed(F2_3_reg_3578) > $signed(12'b1011)? 1'b1: 1'b0);
assign tmp_49_fu_1976_p2 = (F2_3_reg_3578 + ap_const_lv12_FF5);
assign tmp_4_fu_1549_p2 = (sh_amt_fu_1528_p3 < ap_const_lv12_36? 1'b1: 1'b0);
assign tmp_50_fu_1981_p2 = (ap_const_lv12_B - F2_3_reg_3578);
assign tmp_51_fu_1998_p2 = (F2_3_reg_3578 == ap_const_lv12_B? 1'b1: 1'b0);
assign tmp_52_fu_2007_p2 = (sh_amt_3_fu_1986_p3 < ap_const_lv12_36? 1'b1: 1'b0);
assign tmp_53_fu_2013_p2 = (sh_amt_3_fu_1986_p3 < ap_const_lv12_C? 1'b1: 1'b0);
assign tmp_54_fu_1711_p4 = {{sh_amt_1_fu_1684_p3[ap_const_lv32_B : ap_const_lv32_4]}};
assign tmp_55_fu_2019_p0 = sh_amt_3_cast_fu_1994_p1;
assign tmp_55_fu_2019_p1 = $unsigned(tmp_55_fu_2019_p0);
assign tmp_56_fu_2023_p2 = $signed(man_V_12_fu_1964_p3) >>> tmp_55_fu_2019_p1;
assign tmp_58_fu_2037_p0 = $signed(tmp_109_fu_2003_p1);
assign tmp_58_fu_2037_p1 = sh_amt_3_cast_fu_1994_p1;
assign tmp_58_fu_2037_p2 = tmp_58_fu_2037_p0 << tmp_58_fu_2037_p1;
assign tmp_59_fu_1737_p1 = tmp_25_fu_1731_p2[15:0];
assign tmp_5_fu_1575_p2 = $signed(man_V_2_fu_1506_p3) >>> tmp_7_fu_1571_p1;
assign tmp_60_fu_1002_p1 = $unsigned(exp_tmp_V_4_fu_992_p4);
assign tmp_61_fu_2093_p3 = {{ap_const_lv1_1}, {tmp_134_reg_3592}};
assign tmp_62_fu_1751_p1 = tmp_28_fu_1745_p2[15:0];
assign tmp_63_fu_1010_p2 = (tmp_122_fu_980_p1 == ap_const_lv63_0? 1'b1: 1'b0);
assign tmp_64_fu_2117_p2 = ($signed(F2_4_reg_3603) > $signed(12'b000000000000)? 1'b1: 1'b0);
assign tmp_65_fu_2122_p2 = (ap_const_lv12_0 - F2_4_reg_3603);
assign tmp_66_fu_1022_p2 = (exp_tmp_V_4_fu_992_p4 == ap_const_lv11_433? 1'b1: 1'b0);
assign tmp_67_fu_2142_p2 = (F2_7_fu_2127_p3 < ap_const_lv12_36? 1'b1: 1'b0);
assign tmp_68_fu_2164_p0 = F2_7_cast_fu_2134_p1;
assign tmp_68_fu_2164_p1 = $unsigned(tmp_68_fu_2164_p0);
assign tmp_69_fu_888_p1 = ireg_V_2_fu_884_p1[62:0];
assign tmp_6_fu_826_p2 = (tmp_3_fu_796_p1 == ap_const_lv63_0? 1'b1: 1'b0);
assign tmp_70_fu_2168_p2 = $signed(man_V_15_fu_2110_p3) >>> tmp_68_fu_2164_p1;
assign tmp_71_fu_2178_p1 = $unsigned(tmp_142_fu_2138_p1);
assign tmp_72_fu_2182_p1 = F2_7_cast_fu_2134_p1;
assign tmp_72_fu_2182_p2 = tmp_71_fu_2178_p1 << tmp_72_fu_2182_p1;
assign tmp_73_fu_1054_p1 = $unsigned(exp_tmp_V_5_fu_1044_p4);
assign tmp_74_fu_914_p1 = ireg_V_2_fu_884_p1[51:0];
assign tmp_75_fu_1068_p3 = {{ap_const_lv1_1}, {tmp_169_fu_1064_p1}};
assign tmp_76_fu_1094_p2 = (tmp_167_fu_1032_p1 == ap_const_lv63_0? 1'b1: 1'b0);
assign tmp_77_fu_1857_p1 = man_V_8_fu_1818_p3[11:0];
assign tmp_78_fu_1106_p2 = ($signed(F2_6_fu_1100_p2) > $signed(12'b11010)? 1'b1: 1'b0);
assign tmp_79_fu_1112_p2 = (F2_6_fu_1100_p2 + ap_const_lv12_FE6);
assign tmp_7_fu_1571_p0 = sh_amt_cast_fu_1536_p1;
assign tmp_7_fu_1571_p1 = $unsigned(tmp_7_fu_1571_p0);
assign tmp_80_fu_1118_p2 = (ap_const_lv12_1A - F2_6_fu_1100_p2);
assign tmp_81_fu_1124_p2 = (F2_6_fu_1100_p2 == ap_const_lv12_1A? 1'b1: 1'b0);
assign tmp_82_fu_2245_p2 = (sh_amt_5_fu_2236_p3 < ap_const_lv12_36? 1'b1: 1'b0);
assign tmp_83_fu_2251_p2 = (sh_amt_5_fu_2236_p3 < ap_const_lv12_1C? 1'b1: 1'b0);
assign tmp_84_fu_2257_p0 = sh_amt_5_cast_fu_2241_p1;
assign tmp_84_fu_2257_p1 = $unsigned(tmp_84_fu_2257_p0);
assign tmp_85_fu_1883_p1 = tmp_40_fu_1877_p2[11:0];
assign tmp_86_fu_2261_p2 = $signed(man_V_28_reg_3623) >>> tmp_84_fu_2257_p1;
assign tmp_88_fu_2273_p0 = $signed(tmp_170_reg_3668);
assign tmp_88_fu_2273_p1 = sh_amt_5_cast_fu_2241_p1;
assign tmp_88_fu_2273_p2 = tmp_88_fu_2273_p0 << tmp_88_fu_2273_p1;
assign tmp_89_fu_1134_p2 = ($signed(exp_V_fu_1058_p2) > $signed(12'b000000000000)? 1'b1: 1'b0);
assign tmp_8_fu_1513_p2 = ($signed(F2_reg_3503) > $signed(12'b1101)? 1'b1: 1'b0);
assign tmp_90_fu_1897_p1 = tmp_42_fu_1891_p2[11:0];
assign tmp_91_fu_2362_p2 = ($signed(pos1_fu_2344_p2) < $signed(12'b110110)? 1'b1: 1'b0);
assign tmp_92_fu_2382_p0 = $signed(pos1_fu_2344_p2);
assign tmp_92_fu_2382_p1 = $unsigned(tmp_92_fu_2382_p0);
assign tmp_93_fu_934_p1 = ireg_V_3_fu_930_p1[62:0];
assign tmp_94_fu_2386_p2 = $signed(man_V_28_reg_3623) >>> tmp_92_fu_2382_p1;
assign tmp_95_fu_2415_p2 = ($signed(pos2_fu_2353_p2) < $signed(12'b110110)? 1'b1: 1'b0);
assign tmp_96_fu_2421_p0 = $signed(pos2_fu_2353_p2);
assign tmp_96_fu_2421_p1 = $unsigned(tmp_96_fu_2421_p0);
assign tmp_97_fu_2442_p2 = (Range2_V_1_fu_2425_p2 == ap_const_lv54_0? 1'b1: 1'b0);
assign tmp_98_fu_2448_p2 = (pos2_fu_2353_p2 == ap_const_lv12_36? 1'b1: 1'b0);
assign tmp_99_fu_960_p1 = ireg_V_3_fu_930_p1[51:0];
assign tmp_9_fu_1518_p2 = (F2_reg_3503 + ap_const_lv12_FF3);
assign tmp_V_15_cast_fu_510_p1 = $unsigned(tmp_V_fu_502_p3);
assign tmp_V_16_cast_fu_572_p1 = $unsigned(tmp_V_2_fu_564_p3);
assign tmp_V_17_cast_fu_634_p1 = $unsigned(tmp_V_4_fu_626_p3);
assign tmp_V_18_cast_fu_696_p1 = $unsigned(tmp_V_6_fu_688_p3);
assign tmp_V_19_cast_fu_758_p1 = $unsigned(tmp_V_8_fu_750_p3);
assign tmp_V_1_fu_496_p2 = (ap_const_lv16_0 - qam_d_out_i_V_preg);
assign tmp_V_2_fu_564_p3 = ((isneg_13_fu_550_p3)? tmp_V_3_fu_558_p2: qam_d_out_q_V_preg);
assign tmp_V_3_fu_558_p2 = (ap_const_lv16_0 - qam_d_out_q_V_preg);
assign tmp_V_4_fu_626_p3 = ((isneg_14_fu_612_p3)? tmp_V_5_fu_620_p2: qam_ph_out_i_V_preg);
assign tmp_V_5_fu_620_p2 = (ap_const_lv12_0 - qam_ph_out_i_V_preg);
assign tmp_V_6_fu_688_p3 = ((isneg_15_fu_674_p3)? tmp_V_7_fu_682_p2: qam_ph_out_q_V_preg);
assign tmp_V_7_fu_682_p2 = (ap_const_lv12_0 - qam_ph_out_q_V_preg);
assign tmp_V_8_fu_750_p3 = ((isneg_16_fu_736_p3)? tmp_V_9_fu_744_p2: qam_loop_out_V_preg);
assign tmp_V_9_fu_744_p2 = (ap_const_lv28_0 - qam_loop_out_V_preg);
assign tmp_V_fu_502_p3 = ((isneg_12_fu_488_p3)? tmp_V_1_fu_496_p2: qam_d_out_i_V_preg);
assign tmp_fu_1489_p3 = {{ap_const_lv1_1}, {tmp_11_reg_3492}};
assign tmp_s_fu_1523_p2 = (ap_const_lv12_D - F2_reg_3503);
assign underflow_fu_3214_p2 = (neg_src_reg_4028 & brmerge92_i_fu_3209_p2);
always @ (posedge ap_clk)
begin
    qam_ph_i_V1vld_reg <= 1'b0;
    qam_ph_q_V1vld_reg <= 1'b0;
    control_out_qam_V1vld_reg <= 1'b0;
    control_out_lf_p1vld_reg <= 1'b0;
    control_out_lf_i1vld_reg <= 1'b0;
    control_out_lf_out_gain1vld_reg <= 1'b0;
    control_out_reg_clr1vld_reg <= 1'b0;
    control_out_reg_init_V1vld_reg <= 1'b0;
    ap_start_out1vld_reg <= 1'b0;
    tmp_V_15_cast_reg_3362[16] <= 1'b0;
    tmp_V_16_cast_reg_3389[16] <= 1'b0;
    tmp_V_17_cast_reg_3416[12] <= 1'b0;
    tmp_V_18_cast_reg_3443[12] <= 1'b0;
    tmp_V_19_cast_reg_3470[28] <= 1'b0;
end



endmodule //qam_runner

